#!/usr/bin/perl
#
# $Source: /headas/headas/swift/uvot/ut/build3/ut-tfc-1.0,v $
# $Revision: 1.4 $
# $Date: 2003/02/06 21:16:00 $
#
#	ut-starid-1.0
#		validate TDRSS finding chart processing
#
#	options
#		-input=<directory>
#			set the input directory
#		-output=<directory>
#			set the output directory
#		-chatter=<verbosity>
#
#
# $Log: ut-tfc-1.0,v $
# Revision 1.4  2003/02/06 21:16:00  rwiegand
# Corrected the string constant of the tool.  Optionally report output from tool
# under test.
#
# Revision 1.3  2002/12/12 21:11:22  rwiegand
# Updated parameter passing/parsing.
#
# Revision 1.2  2002/12/12 18:46:20  rwiegand
# Removed .pl extension from starid and tfc tool names.
#
# Revision 1.1  2002/11/26 15:30:56  rwiegand
# Tests for star identification and TDRS finding chart tools.
#

use strict;

package Test::TFC;

use base qw(Task::Getopt);
use Task qw(:codes);

use FileHandle;
use Math;


my %DEFAULT = (
	input => '.',
	output => '.',
);

my %INTERNAL = (
	chatter => 1,
);


# main
{
	my $tool = bless({
		tool => 'ut-tfc-1.0',
		code => 0,
		});

	$tool->parseOptions(
		spec => [ qw(chatter=i input=s output=s) ],
		args => [ @ARGV ],
		internal => \%INTERNAL,
		default => \%DEFAULT,
		);

	$tool->execute;

	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->validate
		if $self->isValid;

	$self->runStarID
		if $self->isValid;

	$self->checkResults
		if $self->isValid;

	my $result = $self->{code} ? 'failed' : 'passed';
	$self->report("test $result");
}


sub validate
{
	my ($self) = @_;

	$self->report("validating set up")
		if $self->chatter;

	my $args = $self->args;

	# validate environment
	foreach my $var (qw(HEADAS FTOOLS)) {
		if (not defined($ENV{$var})) {
			$self->error(BAD_INPUT,
				"environment variable $var not set");
		}
		elsif (not -d $ENV{$var}) {
			$self->error(BAD_INPUT,
				"invalid $var directory $ENV{$var}");
		}
	}

	# validate input/output directories
	foreach my $key (qw(input output)) {
		if (not -d $args->{$key}) {
			$self->error(BAD_INPUT,
				"invalid $key directory: $args->{$key}");
		}
	}
}


sub runStarID
{
	my ($self) = @_;

	my $args = $self->args;

	my $headas = $ENV{HEADAS};
	my $input = $args->{input};
	my $output = $args->{output};

	$self->{expectedLog}   = "$input/expected.log";
	$self->{expectedSparse}= "$input/ExpectedSparse.fits";
	$self->{testSparse}    = "$output/SPARSE_IMAGE.fits";

	my %task = (
		findingChart  => "$input/findingChart.packet",
		partition     => $input,

		zeroPoints    => "$input/UVOT_ZERO_POINTS.fits",
		tlefile       => "$input/SWIFT_TLE_ARCHIVE.txt",
		sparsefile    => "!$self->{testSparse}",

		directMagTolerance => 10,
		directPosTolerance => 1 * Math::ARC_MIN_r,
		doubletTolerance => 2 * Math::ARC_SEC_r,

		chatter       => 3,
		clobber       => 'yes',
	);

	# build command line
	my $command = 'tfc';

	foreach my $p (qw(findingChart partition
			zeroPoints tlefile sparsefile
			directMagTolerance directPosTolerance
			doubletTolerance
			chatter)) {
		if (not defined($task{$p})) {
			$self->error(BAD_TASK, "missing parameter $p");
		}
		else {
			$command .= " '$p=$task{$p}'";
		}
	}

	my $result = $self->doCommand($command);
	if (not $self->isValid) {
		if ($result->{output}) {
			$self->report($result->{output});
		}
		$self->error(BAD_EXECUTE, 'starid failed');
	}
	else {
		$self->report($result->{output})
			if $self->chatter(4);
	}

	$self->{testLines} = $result->{lines};
}


sub checkResults
{
	my ($self) = @_;

	my $template = $self->{expectedLog};

	my @expected = ();
	my $fh = FileHandle->new($template);
	if (not $fh) {
		$self->error(BAD_INPUT, "unable to open $template: $!");
		return;
	}
	else {
		@expected = <$fh>;
	}
	undef($fh);

	my $exp = parseOutput(\@expected);

	my $got = parseOutput($self->{testLines});

	my @compare = (
		meanLoss => 'realrat:1e-4',
		matches => 'list:list:string',
		quaternion => 'list:realrat:1e-4',
		initialLoss => 'realrat:1e-4',
		finalLoss => 'realrat:1e-4',
		unmatched => 'list:string',
	);

	for (my $i = 0; $i < @compare; $i += 2) {
		my ($key, $type) = @compare[$i, $i+1];
		my @meta = split(':', $type);
		$self->report("checking $key")
			if $self->chatter(1);
		$self->compare($key, \@meta, $exp->{$key}, $got->{$key});
	}
}


sub compare
{
	my ($self, $label, $meta, $exp, $got) = @_;

	my $type = $meta->[0];

	if ($type eq 'list') {
		my $ne = @$exp;
		my $ng = @$got;
		if ($ne != $ng) {
			$self->error(BAD_OUTPUT,
				"different number of $label [$ne != $ng");
		}
		else {
			my @rest = @{ $meta };
			shift(@rest);
			for (my $i = 0; $i < $ne; ++$i) {
				$self->compare($label . $i, \@rest, $exp->[$i], $got->[$i]);
			}
		}
	}
	elsif ($type eq 'string') {
		if ($exp ne $got) {
			$self->error(BAD_TASK, "[compare] $label $exp ne $got");
		}
	}
	elsif ($type eq 'realrat') {
		my $test = $meta->[1];
		# the ratio of the two values should be within the given tolerance of 1
		my $tmp = (abs($exp) < abs($got)) ? $exp / $got : $got / $exp;
		if (1 / abs($tmp) - 1 > $test) {
			$self->error(BAD_TASK,
				"[compare] $label ratio of $exp to $got differs from unity by more than $test");
		}
	}
	elsif ($type eq 'integer') {
		if ($exp != $got) {
			$self->error(BAD_TASK, "[compare] $label $exp != $got");
		}
	}
	else {
		$self->error(BAD_TASK, "[compare] unexpected type '$type'");
	}
}
		

# This grabs interesting parts of the starid output (best catalog matches,
# optimal quaterion, q method loss before and after applying quaternion,
# and list of unmatched sources.
# We parse the expected result from a known good run and the output from
# the test run and then do compare them.
sub parseOutput
{
	my ($lines) = @_;

	my %result = (
		matches => [ ],
		quaternion => [ 0, 0, 0, 0 ],
		unmatched => [ ],
	);

use constant ADVANCING  => 'advancingThesis';
use constant OPTIMAL    => 'optimalQuaternion';
use constant INITIAL    => 'initialLoss';
use constant FINAL      => 'finalLoss';
use constant UNMATCHED  => 'unmatchedSources';

	my $mode = 'none';
	my $optSign = qr(|\+|-);
	my $reReal = qr($optSign(\d+\.\d+[Ee]$optSign\d+|\d*\.\d+|\d+));


	foreach my $line (@$lines) {
		if ($line =~ /advancing thesis:/) {
			$mode = ADVANCING;
		}
		elsif ($line =~ /optimal quaternion/) {
			$mode = OPTIMAL;
		}
		elsif ($line =~ /initial loss/) {
			$mode = INITIAL;
		}
		elsif ($line =~ /final loss/) {
			$mode = FINAL;
		}
		elsif ($line =~ /unmatched sources:/) {
			$mode = UNMATCHED;
		}

		if ($mode eq ADVANCING) {
			if ($line =~ /mean loss ($reReal)/) {
				$result{meanLoss} = $1;
			}
			elsif ($line =~ /(\d+\[\d+\]) => (\S+)/) {
				push(@{ $result{matches} }, [ $1 => $2 ]);
			}
		}
		elsif ($mode eq OPTIMAL) {
			if ($line =~ /quaternion ($reReal) ($reReal) ($reReal) ($reReal)/) {
				$result{quaternion} = [ $1, $2, $3, $4 ];
			}
		}
		elsif ($mode eq INITIAL) {
			if ($line =~ /initial loss ($reReal)/) {
				$result{initialLoss} = $1;
			}
		}
		elsif ($mode eq FINAL) {
			if ($line =~ /final loss ($reReal)/) {
				$result{finalLoss} = $1;
			}
		}
		elsif ($mode eq UNMATCHED) {
			if ($line =~ /(\d+\[\d+\]) ra=($reReal), dec=($reReal)/) {
				push(@{ $result{unmatched} }, $1);
			}
		}
	}

	return \%result;
}


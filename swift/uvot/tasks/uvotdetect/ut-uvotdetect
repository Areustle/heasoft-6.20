#!/usr/bin/perl
# $Source: /headas/headas/swift/uvot/tasks/uvotdetect/ut-uvotdetect,v $
# $Revision: 1.11 $
# $Date: 2005/11/02 15:19:31 $
#
#	ut-uvotdetect
#
#
# $Log: ut-uvotdetect,v $
# Revision 1.11  2005/11/02 15:19:31  rwiegand
# Updated external command invocations to use Task::shell.
#
# Revision 1.10  2005/10/17 13:17:49  rwiegand
# Ignore CREATOR keyword differences.
#
# Revision 1.9  2004/12/09 21:24:36  rwiegand
# Accept more alternatives for exposure duration.  Convert source position
# error from degrees to arcsec.
#
# Revision 1.8  2004/09/24 20:54:27  miket
# Merge of Swift Build 9 back onto main trunk
#
# Revision 1.7  2004/09/09 15:45:15  rwiegand
# Changed unit test relative tolerance to 1e-3.
#
# Revision 1.6  2004/06/25 15:20:50  rwiegand
# Refactoring and cleanup.
#
# Revision 1.5  2004/05/12 16:03:50  rwiegand
# Intra-tool parameter consistency renaming effort.
#
# Revision 1.4  2003/11/24 22:09:12  rwiegand
# Support images larger than ximage's default limit.  Clean up ximage
# temporary files.
#
# Revision 1.3  2003/09/30 14:00:15  rwiegand
# Support processing multiple input HDUs.  Write source lists to FITS tables.
#
# Revision 1.1  2003/09/08 21:29:37  rwiegand
# Added infrastructure (unit test, help file, Makefile).
#

use strict;

package Test::Detect;
use base qw(Task::HEAdas);
use Task qw(:codes);


# main
{
	my $tool = Test::Detect->new;

	$tool->run;

	my $result = $tool->{code} ? 'failed' : 'passed';
	$tool->report("test $result");

	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->validateEnvironment
		if $self->isValid;

	$self->initialize
		if $self->isValid;

	$self->runUvotdetect
		if $self->isValid;

	$self->checkResults
		if $self->isValid;
}


sub initialize
{
	my ($self) = @_;

	$self->pilOptions(
			options => [ qw(input=string output=string chatter=int) ],
			get => 1,
			);

	my $args = $self->args;

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runUvotdetect
{
	my ($self) = @_;

	my $args = $self->args;

	my $input = $args->{input};
	my $output = $args->{output};

	$self->{infile} = "$input/input.fits";
	$self->{outfile} = "$output/detect.fits";
	$self->{template} = "$input/template.fits";

	my @args = (
		infile     => $self->{infile},
		outfile    => $self->{outfile},

		clobber	   => 'yes',
		cleanup	   => 'no',
		chatter	   => $args->{chatter},
	);

	# validate required files
	foreach my $key (qw(infile template)) {
		if (not -f $self->{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid $key file: $self->{$key}");
		}
	}

	my $command = $self->buildCommand('uvotdetect', @args);
	$self->shell($command);
}


sub checkResults
{
	my ($self) = @_;

	if (not -f $self->{outfile}) {
		$self->error(BAD_OUTPUT, "missing output $self->{outfile}");
		return;
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftverify',
				infile => $self->{outfile},
				);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftdiff',
			infile1 => $self->{template},
			infile2 => $self->{outfile},
			reltol => 0.001,
			exclude => 'CREATOR,DATE,SEXCONFF,SEXCONVF,FITSFILE,DATASUM',
			);
		$self->shell($command);
	}
}


#!/usr/bin/perl
# $Source: /headas/headas/swift/uvot/tasks/uvotskycorr/ut-uvotskycorr,v $
# $Revision: 1.7 $
# $Date: 2007/11/08 21:17:43 $
#
#	ut-uvotskycorr
#
#
# $Log: ut-uvotskycorr,v $
# Revision 1.7  2007/11/08 21:17:43  rwiegand
# Write corrections file to output directory.
#
# Revision 1.6  2006/05/24 19:29:30  rwiegand
# Updated to reflect that aspect corrections file is now FITS.
#
# Revision 1.5  2006/03/21 22:25:08  rwiegand
# Increased relative tolerance by two orders of magnitude in an attempt to
# address an variance seen by Mike T.
#
# Revision 1.4  2005/11/02 21:08:55  rwiegand
# Updated parameter name partition => catspec.
#
# Revision 1.3  2005/09/26 16:08:24  rwiegand
# Store catalog data with unit test.
#
# Revision 1.2  2005/09/19 14:35:22  rwiegand
# Added tolerances to output comparison.
#
# Revision 1.1  2005/09/19 14:13:10  rwiegand
# Added unit test.
#

use strict;

package Test::UVOTSkyCorr;
use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;


# main
{
	my $tool = Test::UVOTSkyCorr->new;

	$tool->unitTest;

	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->pilOptions(
			options => [
				qw(input=string output=string chatter=int)
			],
			get => 1,
			);

	$self->validate
		if $self->isValid;

	$self->runUvotskycorr
		if $self->isValid;

	$self->checkResults
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	$self->validateEnvironment;

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runUvotskycorr
{
	my ($self) = @_;

	my $args = $self->args;

	my $input = $args->{input};
	my $output = $args->{output};

	my @skyfiles = map { "$input/$_" } qw(uvv.sky uuu.sky ubb.sky);
	$self->{corrfile} = "$output/corr.fits";
	$self->{template} = "$input/template.fits";

	my @args = (
		what		=> 'ID',
		skyfile		=> join(',', @skyfiles),
		attfile		=> "$input/attitude.fits",
		outfile		=> $self->{corrfile},
		starid		=> 'rotcorr=60 n.reference=30 n.observation=20',
		catspec		=> "$input/PARTITION",

		chatter		=> 5,
	);

	# validate required files
	my %args = @args;
	foreach my $path ($self->{template}, $args{attfile}, @skyfiles) {
		if (not -f $path) {
			$self->fatal(BAD_INPUT, "missing $path");
		}
	}
	return if not $self->isValid;

	{
		my $command = $self->buildCommand('uvotskycorr', @args);
		$self->shell($command);
	}
}


sub checkResults
{
	my ($self) = @_;

	my $command = $self->buildCommand('ftdiff',
			infile1 => $self->{template},
			infile2 => $self->{corrfile},
			reltol => 1e-3,
			);
	$self->shell($command);
}


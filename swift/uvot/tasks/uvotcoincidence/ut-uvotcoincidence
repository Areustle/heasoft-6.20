#!/usr/bin/perl
# $Source: /headas/headas/swift/uvot/tasks/uvotcoincidence/ut-uvotcoincidence,v $
# $Revision: 1.1 $
# $Date: 2007/05/21 17:57:31 $
#
#	ut-uvotcoincidence
#
#
# $Log: ut-uvotcoincidence,v $
# Revision 1.1  2007/05/21 17:57:31  rwiegand
# Separated coincidence loss correction out of uvotmag.
#

use strict;

package Test::Coincidence;
use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;


# main
{
	my $tool = __PACKAGE__->new;

	$tool->unitTest;

	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->pilOptions(
			options => [
				qw(input=string output=string caldb=boolean chatter=int)
			],
			get => 1,
			);

	$self->validate
		if $self->isValid;

	$self->runUvotcoincidence
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	$self->validateEnvironment;

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runUvotcoincidence
{
	my ($self) = @_;

	my $args = $self->args;

	my $input = $args->{input};
	my $output = $args->{output};
	my $caldb = $args->{caldbFlag};

	# note: make a working copy of the source list (without magnitudes)
	# since it will be updated
	$self->shell("cp -f $input/input.fits $output/sources.fits");
	$self->shell("chmod +w $output/sources.fits");
	return if not $self->isValid;

	my @args = (
		infile    => "$output/sources.fits",
		coinfile  => $caldb ? 'CALDB' : "$input/swucoincorr.fits",

		ratecol   => 'RATE',
		errcol    => 'RATE_ERR',

		# cleanup   => 'no',
		chatter	  => 5,
	);

	# validate required files
	my %args = @args;
	$args{template} = "$input/template.fits";
	foreach my $key (qw(infile coinfile template)) {
		if ($args{$key} eq 'CALDB') {
		}
		elsif (not -f $args{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid $key file: $args{$key}");
		}
	}

	{
		my $command = $self->buildCommand('uvotcoincidence', @args);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftverify',
			infile => $args{infile},
			outfile => 'STDOUT',
			);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftdiff',
			infile1 => $args{template},
			infile2 => $args{infile},
			reltol => 1e-3,
			exclude => 'CREATOR,DATE,DATASUM',
			);
		$self->shell($command);
	}
}


#!/usr/bin/perl
#
# $Source: /headas/headas/swift/uvot/tasks/uvotimgrism/ut-uvotimgrism,v $
# $Revision: 1.16 $
# $$
#
#	ut-uvotimgrism
#		validate uvotimgrism operation
#
#
# $Log: ut-uvotimgrism,v $
# Revision 1.16  2008/05/07 13:28:59  rwiegand
# Updated calling parameters for updated test data.
#
# Revision 1.15  2005/11/02 15:19:32  rwiegand
# Updated external command invocations to use Task::shell.
#
# Revision 1.14  2004/12/10 14:48:04  rwiegand
# Updated parameter list and exclude versioning keywords.
#
# Revision 1.13  2004/10/14 20:50:13  rwiegand
# Added CALDB test mode.
#
# Revision 1.12  2004/10/12 22:39:20  rwiegand
# Stop checkout output after the first error.
#
# Revision 1.10  2004/05/28 15:47:39  rwiegand
# Transfer MJDREF, MJDREFI, MJDREFF cards to output.
#
# Revision 1.9  2004/05/20 19:59:00  rwiegand
# ftdiff results against templates.
#
# Revision 1.8  2004/05/12 17:12:38  rwiegand
# Intra-tool parameter consistency effort.
#
# Revision 1.7  2004/05/05 19:13:11  rwiegand
# Updated parameter names and units.
#
# Revision 1.6  2003/08/28 18:41:52  miket
# global name change from uvotgrism to uvotimgrism
#
# Revision 1.5  2003/07/01 18:54:29  rwiegand
# Implemented loading of grating equation from calibration file.
#
# Revision 1.4  2003/06/30 17:50:09  rwiegand
# Allow user to specify source using RA and DEC.
#
# Revision 1.3  2003/06/27 20:33:00  rwiegand
# Recombined extracted region and wave scale into a single output file.
# Modified to include 0th order in extracted region.  Updated wavelength
# equation constants.  Updated unit test to run with UVOT test data.
#
# Revision 1.2  2003/06/11 21:10:03  miket
# global name change ugrism to uvotgrism
#
# Revision 1.1  2003/05/14 13:33:27  rwiegand
# Implemented flux calibration.  Added unit test and help file.
#

use strict;

package Test::ImageGrism;
use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;


# main
{
	my $tool = Test::ImageGrism->new;

	$tool->unitTest;

	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->pilOptions(
			options => [
				qw(input=string output=string caldb=boolean chatter=int)
			],
			get => 1,
			);

	$self->validate
		if $self->isValid;

	$self->runUvotimgrism
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	foreach my $var (qw(HEADAS)) {
		if (not defined($ENV{$var})) {
			$self->fatal(BAD_INPUT,
				"environment variable $var not set");
		}
		elsif (not -d $ENV{$var}) {
			$self->fatal(BAD_INPUT,
				"invalid $var directory $ENV{$var}");
		}
	}

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runUvotimgrism
{
	my ($self) = @_;

	my $args = $self->args;

	my $input = $args->{input};
	my $output = $args->{output};
	my $caldb = $args->{caldbFlag};

	my @task = (
		infile     => "$input/testguv.fits",
		badpixfile => "$input/badpixmap.fits+1",

		outfile    => "$output/spectrum.pha",
		backfile   => "$output/background.pha",

		teldeffile => $caldb ? 'CALDB' : "$input/swuteldef.fits",
		wavefile   => $caldb ? 'CALDB' : "$input/swugrism.fits",
		areafile   => $caldb ? 'CALDB' : "$input/swufluxcal.fits",

		# sourcex    => 1306,
		# sourcey    => 1300,
		ra         => 189.78406,
		dec        => -45.56359,

		ang        => -1,
		srcwid     => 30,
		bkgwid1    => 10,
		bkgoff1    => 0,
		bkgwid2    => 10,
		bkgoff2    => 0,
		wavemin    => 1600,
		wavemax    => 2900,

		nsigma     => 5,

		chatter	   => 5,
		clobber	   => 'yes',
		history	   => 'yes',
	);

	my %task = @task;
	$task{spectemplate} = "$input/spectrum.pha";
	$task{backtemplate} = "$input/background.pha";

	# validate required files
	foreach my $key (qw(infile teldeffile wavefile areafile)) {
		if ($task{$key} eq 'CALDB') {
		}
		elsif (not -f $task{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid $key file: $task{$key}");
		}
	}

	# run uvotimgrism
	{
		my $command = $self->buildCommand('uvotimgrism', @task);
		my $result = $self->shell($command, { pipeFrom => 1 });
		if ($self->isValid) {
			my $fh = $result->{handle};
			while (<$fh>) {
				chomp;
				$self->report($_);
			}
			if (not $fh->close) {
				$self->error(BAD_EXECUTE,
					"error closing uvotimgrism pipe");
			}
		}
	}

	if ($self->isValid) {
		my $command = qq(ftverify infile=$task{outfile} outfile=STDOUT);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = qq(ftverify infile=$task{backfile} outfile=STDOUT);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftdiff',
				infile1 => $task{spectemplate},
				infile2 => $task{outfile},
				tolerance => 0.1,
				exclude => 'CREATOR,DATASUM',
				);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftdiff',
				infile1 => $task{backtemplate},
				infile2 => $task{backfile},
				tolerance => 0.1,
				exclude => 'CREATOR,DATASUM',
				);
		$self->shell($command);
	}

}


# for XMM/OM...
# uvlambdazero => 190.18,
# uvlambdarate => 0.11607,


#!/usr/bin/perl
#
# $Source: /headas/headas/swift/uvot/tasks/uvotevgrism/ut-uvotevgrism,v $
# $Revision: 1.6 $
# $Date: 2005/11/02 15:19:31 $
#
#	ut-uvotevgrism
#		validate uvotevgrism operation
#
#
# $Log: ut-uvotevgrism,v $
# Revision 1.6  2005/11/02 15:19:31  rwiegand
# Updated external command invocations to use Task::shell.
#
# Revision 1.5  2004/10/14 17:36:01  rwiegand
# Added CALDB option and use unit test support.
#
# Revision 1.4  2004/10/05 15:24:25  rwiegand
# Updated format of grism calibration file to accommodate grism equation
# and zeroth order offset variation across detector.
#
# Revision 1.3  2004/05/12 20:41:50  rwiegand
# Updated the grating equation calibration file format.  Intra-tool parameter
# consistency effort.
#
# Revision 1.2  2003/08/11 18:25:10  rwiegand
# Corrected V wavelengths in parameter file.  Corrected Makefile installation
# of unit test.
#
# Revision 1.1  2003/07/11 19:27:13  rwiegand
# Unit test for UVOT event grism tool.
#
# Revision 1.3  2003/06/11 21:26:40  miket
# global name change from uexpmap to uvotevgrism
#
# Revision 1.2  2003/05/15 19:19:38  rwiegand
# Makefile had some incorrect file names.
#
# Revision 1.1  2003/05/13 22:35:17  rwiegand
# Renamed some invocation parameters.  Added test case and help files.
#

use strict;

package Test::EventGrism;
use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;


# main
{
	my $tool = Test::EventGrism->new;

	$tool->unitTest;

	exit($tool->{code});
}



sub execute
{
	my ($self) = @_;

	$self->pilOptions(
			options => [ qw(
				input=string output=string caldb=boolean chatter=int
				) ],
			get => 1,
			);

	$self->validate
		if $self->isValid;

	$self->runUvotevgrism
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	foreach my $var (qw(HEADAS)) {
		if (not defined($ENV{$var})) {
			$self->fatal(BAD_INPUT,
				"environment variable $var not set");
		}
		elsif (not -d $ENV{$var}) {
			$self->fatal(BAD_INPUT,
				"invalid $var directory $ENV{$var}");
		}
	}

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runUvotevgrism
{
	my ($self) = @_;

	my $args = $self->args;
	my $input = $args->{input};
	my $output = $args->{output};

	my $caldb = $args->{caldbFlag};

	my @args = (
		infile     => "$input/evt72349.unf",
		outfile    => "$output/evgrism.fits",

		wavefile   => $caldb ? 'CALDB' : "$input/gratecal.fits",
		teldeffile => $caldb ? 'CALDB' : "$input/swuteldef.fits",
		attfile	   => "$input/attconst.fits",
		attlim     => 32,

		ra         => 157.6061,
		dec        => 73.62038,

		uvang      => 207,
		uvwid      => 30,
		uvmin      => 300,
		uvmax      => 2000,

		vang       => 207,
		vwid       => 30,
		vmin       => 2000,
		vmax       => 6500,

		clobber	   => 'yes',
		history	   => 'yes',
		chatter	   => 5,
	);

	# validate required files
	my %args = @args;
	$args{template} = "$input/template.fits";

	foreach my $key (qw(infile wavefile attfile teldeffile)) {
		if ($args{$key} eq 'CALDB') {
		}
		elsif (not -f $args{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid $key file [$args{$key}]");
		}
	}

	my $command = $self->buildCommand('uvotevgrism', @args);
	$self->shell($command);

	if ($self->isValid) {
		my $command = $self->buildCommand('ftverify',
			infile => $args{outfile},
			outfile => 'STDOUT',
			);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $col = '[col WAVELENGTH]';
		my $command = $self->buildCommand('ftdiff',
			infile1 => $args{template} . $col,
			infile2 => $args{outfile} . $col,
			reltol => 0.01,
			exclude => 'DATASUM',
			);
		$self->shell($command);
	}
}


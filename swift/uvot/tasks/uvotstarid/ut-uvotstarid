#!/usr/bin/perl
#
# $Source: /headas/headas/swift/uvot/tasks/uvotstarid/ut-uvotstarid,v $
# $Revision: 1.9 $
# $Date: 2005/11/02 15:19:33 $
#
#	ut-uvotstarid
#		validate uvotstarid operation
#
#
# $Log: ut-uvotstarid,v $
# Revision 1.9  2005/11/02 15:19:33  rwiegand
# Updated external command invocations to use Task::shell.
#
# Revision 1.8  2005/03/04 22:14:40  rwiegand
# Updated maximum correction parameters.
#
# Revision 1.7  2004/10/15 14:26:54  rwiegand
# Added CALDB test mode for consistency with other unit tests.  Added tighter
# check on RA and DEC columns.
#
# Revision 1.6  2004/09/24 20:54:29  miket
# Merge of Swift Build 9 back onto main trunk
#
# Revision 1.5.2.1  2004/08/17 15:19:37  miket
# allowing tolerance of 1e-03 and excluding DATASUM
#
# Revision 1.5  2004/06/17 21:33:50  rwiegand
# Updated parameter names for Martin.  Use new HEAdas perl task support.
# Partitioned catalog loading placed in UVOT/xxx modules.
#
# Revision 1.4  2004/05/10 17:55:36  rwiegand
# Use ftdiff for comparing results.
#
# Revision 1.3  2003/11/26 17:25:47  rwiegand
# Updated angle parameters to be in arcsec instead of radians.  Object fields
# renamed for compatibility with libraries.
#
# Revision 1.2  2003/06/11 21:38:36  miket
# global name changes from tfc/starid to uvottfc/uvotstarid
#
# Revision 1.1  2003/02/10 18:06:17  rwiegand
# Build 4 unit tests.  Updated from previous releases to use PIL.
#
# Revision 1.4  2002/12/12 21:11:22  rwiegand
# Updated parameter passing/parsing.
#
# Revision 1.3  2002/12/12 18:46:20  rwiegand
# Removed .pl extension from starid and tfc tool names.
#
# Revision 1.2  2002/11/26 15:30:56  rwiegand
# Tests for star identification and TDRS finding chart tools.
#
# Revision 1.1  2002/11/22 22:00:05  rwiegand
# Test driver for starid tool
#

use strict;

package Test::StarID;

use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;
use Math;


# main
{
	my $tool = Test::StarID->new;

	$tool->unitTest;

	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->pilOptions(
			options => [
				qw(input=string output=string chatter=int)
			],
			get => 1,
			);

	$self->validate
		if $self->isValid;

	$self->runStarID
		if $self->isValid;

	$self->checkResults
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	$self->report("validating set up")
		if $self->chatter;

	my $args = $self->args;

	# validate environment
	$self->validateEnvironment;

	# validate input/output directories
	foreach my $key (qw(input output)) {
		if (not -d $args->{$key}) {
			$self->error(BAD_INPUT,
				"invalid $key directory: $args->{$key}");
		}
	}
}


sub runStarID
{
	my ($self) = @_;

	my $args = $self->args;

	my $input = $args->{input};
	my $output = $args->{output};

	my @task = (
		infile     => "$input/sources.fits[SOURCES]",
		partition  => $input,
		outfile    => "$output/starid.fits",

		reflist    => 'none',

		matchtol   => 3,   # arcsec
		radius     => 50,  # arcsec
		magtol     => 10,
		postol     => 60,  # arcsec,
		difftol    => 2,   # arcsec

		poscorr    => 3,   # arcsec
		rotcorr    => 1,   # arcmin

		clobber    => 'yes',
		chatter    => 3,
	);

	my %task = @task;
	$self->{expectedOutput} = "$input/template.fits";
	$self->{outfile} = $task{outfile};

	if (not -d $task{partition}) {
		$self->error(BAD_TASK, "invalid partition directory $task{partition}");
	}

	if (-e $task{outfile}) {
		unlink($task{outfile})
			or $self->error(BAD_OUTPUT, "unable to unlink $task{outfile} [$!]");
	}

	# build command line
	my $command = $self->buildCommand('uvotstarid', @task);

	$self->shell($command);
}


sub checkResults
{
	my ($self) = @_;

	my $command = $self->buildCommand('ftdiff',
			infile1 => $self->{expectedOutput},
			infile2 => $self->{outfile},
			exclude => 'DATE,DATASUM,CREATOR',
			tolerance => 1e-03,
			);
	$self->shell($command);

	# run check with tighter tolerance on RA,DEC
	my $cols = '[col RA;DEC]';
	$command = $self->buildCommand('ftdiff',
			infile1 => $self->{expectedOutput} . $cols,
			infile2 => $self->{outfile} . $cols,
			exclude => 'DATE,DATASUM,CREATOR',
			tolerance => 1e-06,
			);
	$self->shell($command);
}


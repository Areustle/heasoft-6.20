#!/usr/bin/perl
# $Source: /headas/headas/swift/uvot/tasks/uvotmag/ut-uvotmaghist,v $
# $Revision: 1.4 $
# $Date: 2006/12/19 15:03:24 $
#
#	uvotmaghist unit test
#
#
# $Log: ut-uvotmaghist,v $
# Revision 1.4  2006/12/19 15:03:24  rwiegand
# Added parameters for specifying nsigma and whether time axis uses log or
# linear scale.  Use same approach as uvotsource for finding rates from
# source and background regions and counts.  Adjusted title and use white
# background for plots.  Added more columns to output table.
#
# Revision 1.3  2006/05/24 21:35:16  rwiegand
# Updated to use reltol.
#
# Revision 1.2  2005/11/02 15:19:32  rwiegand
# Updated external command invocations to use Task::shell.
#
# Revision 1.1  2005/01/24 21:21:30  rwiegand
# Added uvotmaghist unit test.
#

use strict;

package Test::MagHistory;
use base qw(Task::HEAdas);
use Task qw(:codes);


# main
{
	my $tool = Test::MagHistory->new;

	$tool->unitTest;

	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->pilOptions(
			options => [
				qw(input=string output=string caldb=boolean chatter=int)
			],
			get => 1,
			);

	$self->validate
		if $self->isValid;

	$self->runUvotmaghist
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	$self->validateEnvironment(qw(FTOOLS));

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runUvotmaghist
{
	my ($self) = @_;

	my $args = $self->args;

	my $input = $args->{input};
	my $output = $args->{output};
	my $caldb = $args->{caldbFlag};

	my @args = (
		infile    => "$input/sky.fits",
		outfile   => 'maghist.fits',
		plotfile  => 'maghist.gif',

		zerofile  => $caldb ? 'CALDB' : "$input/swucolor.fits",
		coinfile  => $caldb ? 'CALDB' : "$input/swucoincorr.fits",

		ra        => 23.35,
		dec       => -41.8231,
		# ra        => 177.3410,
		# dec       => 64.1568,

		srcas     => 3,
		bkgas     => 10,
		srcreg    => "$input/src.reg",
		bkgreg    => "$input/bkg.reg",

		cleanup   => 'no',
		chatter	  => 5,
	);

	# validate required files
	my %args = @args;
	$args{template} = "$input/template.fits";
	foreach my $key (qw(infile zerofile coinfile template)) {
		if ($args{$key} eq 'CALDB') {
		}
		elsif (not -f $args{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid $key file: $args{$key}");
		}
	}

	{
		my $command = $self->buildCommand('uvotmaghist', @args);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftverify',
			infile => $args{outfile},
			outfile => 'STDOUT',
			);
		$self->shell($command);
	}

	if ($self->isValid) {
		my $command = $self->buildCommand('ftdiff',
			infile1 => $args{template},
			infile2 => $args{outfile},
			reltol => 1e-3,
			exclude => 'CREATOR,DATE,DATASUM',
			);
		$self->shell($command);
	}

	$self->report("plotfile $args{plotfile} must be verified manually");
}


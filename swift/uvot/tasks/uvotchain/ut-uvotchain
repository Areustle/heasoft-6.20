#!/usr/bin/perl
#
# $Source: /headas/headas/swift/uvot/tasks/uvotchain/ut-uvotchain,v $
# $Revision: 1.6 $
# $Date: 2005/11/02 15:19:30 $
#
#	ut-uvotchain
#		validate uvotchain operation
#
#
# $Log: ut-uvotchain,v $
# Revision 1.6  2005/11/02 15:19:30  rwiegand
# Updated external command invocations to use Task::shell.
#
# Revision 1.5  2004/05/05 15:21:18  rwiegand
# FTOOLS no longer required.  Separated functions for running uvotchain and
# checking results.
#
# Revision 1.4  2003/06/11 21:29:12  miket
# global name change from uchain to uvotchain
#
# Revision 1.3  2003/03/24 22:07:54  rwiegand
# Allow separate input and output directories.  Activate autoflush in uvotchain.
#
# Revision 1.2  2003/03/21 14:29:34  rwiegand
# Pass chatter argument to uvotchain subprocess.  Open pipe from uvotchain and report
# uvotchain output as it outputs.
#
# Revision 1.1  2003/02/24 15:11:29  rwiegand
# Added unit test for uvotchain.  This version just verifies that uvotchain is run
# and that the created images are valid according to ftverify.
#

use strict;

use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;
use DirHandle;


# main
{
	my $tool = bless({
		tool => 'ut-uvotchain',
		code => 0,
		});

	$tool->parseOptions(
		argv => [ @ARGV ],
		options => [ qw(
			input output chatter
			) ],
		);

	$tool->execute;

	my $result = $tool->{code} ? 'failed' : 'passed';
	$tool->report("test $result");
	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->validate
		if $self->isValid;

	$self->runUvotchain
		if $self->isValid;

	$self->checkOutput
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	foreach my $var (qw(HEADAS)) {
		if (not defined($ENV{$var})) {
			$self->fatal(BAD_INPUT,
				"environment variable $var not set");
		}
		elsif (not -d $ENV{$var}) {
			$self->fatal(BAD_INPUT,
				"invalid $var directory $ENV{$var}");
		}
	}

	# validate input, output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runUvotchain
{
	my ($self) = @_;

	my $args = $self->args;
	my $input = $args->{input};
	my $output = $args->{output};

	my @task = (
		input         => $args->{input},
		output        => $args->{output},
		coordinator   => 'no',
		preclean      => 'yes',
		postclean     => 'no',
		imageandevent => 'yes',
		chatter       => $args->{chatter},
	);

	my %task = @task;

	# run uvotchain
	{
		my $command = $self->buildCommand('uvotchain', @task);

		my $result = $self->shell($command, { pipeFrom => 1 });
		if ($result->{error}) {
			$self->error(BAD_OUTPUT,
				"$command failed: $result->{error}");
		}
		else {
			my $fh = $result->{handle};
			while (<$fh>) {
				chomp;
				$self->report($_);
			}
			close($fh);
		}
	}

}



sub checkOutput
{
	my ($self) = @_;

	my $args = $self->args;

	# count output images and ftverify each one
	my $output = "$args->{output}/uvotchain";
	my $dh = DirHandle->new($output);
	if (not $dh) {
		$self->error(BAD_OUTPUT,
			"unable to open output directory $output: $!");
	}
	my @files = $dh->read;
	undef($dh);

	my $verified = 0;
	foreach my $f (@files) {
		my $full = "$output/$f";
		if (-f $full) {
			my $command = qq(ftverify infile=$full outfile=STDOUT 2>&1);
			my $result = $self->shell($command);

			if ($result->{error} or ($result->{output} =~ /\*\s+Error/)) {
				$self->error(BAD_OUTPUT,
					"ftverify $full failed: $result->{text}");
			}
			else {
				++$verified;
			}
		}
	}

	# everything _except_ '.', '..'
	my $expected = @files - 2;
	if ($verified != $expected) {
		$self->error(BAD_OUTPUT,
			"verified $verified of $expected expected images");
	}

}


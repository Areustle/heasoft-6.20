#!/usr/bin/perl
#
# $Source: /headas/headas/swift/bat/tasks/batbinevt/ut_batbinevt_dph,v $
# $Revision: 1.5 $
# $Date: 2007/08/10 07:44:30 $
#
#	ut_batbinevt_dph
#		validate batbinevt operation for detector images
#
#
#

# ******************* FILL IN NAME OF TASK HERE ********
$taskname      = "batbinevt";
$ut_taskname   = "ut_batbinevt_dph";

print "\n\n\n======================== TEST OF $taskname ==============\n";

# use strict;

use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;


# main
{
	my $tool = bless({
		tool => $ut_taskname, 
		code => 0,
		});

	$tool->parseOptions(
		argv => [ @ARGV ],
		options => [ qw(
			input output chatter tolerance
			) ],
		);

	$tool->execute;

	my $result = $tool->{code} ? 'failed' : 'passed';
	$tool->report("test $result");
	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->validate
		if $self->isValid;

	$self->runtask
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	foreach my $var (qw(HEADAS )) {
		if (not defined($ENV{$var})) {
			$self->fatal(BAD_INPUT,
				"environment variable $var not set");
		}
		elsif ($ENV{$var} !~ m/^(http|ftp):/ && not -d $ENV{$var}) {
			$self->fatal(BAD_INPUT,
				"invalid $var directory $ENV{$var}");
		}
	}

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runtask
{
	my ($self) = @_;

        my $headas = $ENV{HEADAS};
	my $input = $self->args->{input};
	my $output = $self->args->{output};
	my $tolerance = $self->args->{tolerance};

	# ******************* FILL IN PARAMETERS HERE ********
	my %task = (
		    infile        => "$input/batbinevt.evt.in",
		    outfile       => "$output/batbinevt.dph.output",
		    outtype       => "DPH",
		    timedel       => 0,
		    timebinalg    => uniform,
		    energybins    => "15-25,25-50,50-195",
		    gtifile       => "NONE",
		    ecol          => "ENERGY",
		    weighted      => "NO",
		    outunits      => "COUNTS",
		    maskwt        => "NONE",
		    tstart        => "INDEF",
		    tstop         => "INDEF",
		    detmask       => "$input/batbinevt.detmask.in",
		    clobber       => "Yes",
		    );


	# ******************* FILL IN INPUT FILES HERE ********
	@infiles = ("infile", "detmask");
	
	my %template = (
			outfile => "$input/batbinevt.dph.template",
			);

	# validate required files
	foreach my $key (@infiles) {
		if (not -f $task{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid $key file: $task{$key}");
		}
	}

	# build command line
	my $command = "$taskname";

	foreach my $p (keys %task) {
	    $command .= " $p=$task{$p}";
	}

	my $result = $self->doCommand($command);

	# ***************** VERIFY OUTPUT OF TASK HERE ***********
	$command = qq(ftverify infile=$task{outfile} outfile=STDOUT heasarc=yes);
	$self->doCommand($command);

	# Check template files are present
	foreach my $key (keys %template) {
		if (not -f $template{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid template $key file: $template{$key}");
			return -1;
		}
	}
	$command = "ftdiff $template{outfile} $task{outfile} " .
	    "exclude=PHAFILE,CREATOR tolerance=$tolerance";
	$result = $self->doCommand($command);
	if ($result->{output} =~ m/End of file comparison: *([0-9]+) *differences/ ) {
	    $ndiffs = $1;
	    print "   -->  FTDIFF reports $ndiffs differences\n";
	    if ($ndiffs ne 0) {
		$lines = $result->{output};
		print "$lines\n" if $self->chatter(5);
		$self->error(BAD_OUTPUT, "error because of bad compare");
	    }

	}
	
}


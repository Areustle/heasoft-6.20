#!/usr/bin/perl
#
# $Source: /headas/headas/swift/bat/tasks/batmaskwtevt/ut_batmaskwtevt,v $
# $Revision: 1.20 $
# $Date: 2007/09/13 18:05:27 $
#
#	ut_batmaskwtevt
#		validate batmaskwtevt operation
#
#
#

# ******************* FILL IN NAME OF TASK HERE ********
$taskname      = "batmaskwtevt";
$ut_taskname   = "ut_batmaskwtevt";

print "\n\n\n======================== TEST OF $taskname ==============\n";

# use strict;

use base qw(Task::HEAdas);
use Task qw(:codes);

use FileHandle;


# main
{
	my $tool = bless({
		tool => $ut_taskname, 
		code => 0,
		});

	$tool->parseOptions(
		argv => [ @ARGV ],
		options => [ qw(
			input output chatter tolerance reltol distfile
			) ],
		);

	$tool->execute;

	my $result = $tool->{code} ? 'failed' : 'passed';
	$tool->report("test $result");
	exit($tool->{code});
}


sub execute
{
	my ($self) = @_;

	$self->validate
		if $self->isValid;

	$self->runtask
		if $self->isValid;
}


sub validate
{
	my ($self) = @_;

	# validate environment
	foreach my $var (qw(HEADAS CALDB)) {
		if (not defined($ENV{$var})) {
			$self->fatal(BAD_INPUT,
				"environment variable $var not set");
		}
		elsif ($ENV{$var} !~ m/^(http|ftp):/ && not -d $ENV{$var}) {
			$self->fatal(BAD_INPUT,
				"invalid $var directory $ENV{$var}");
		}
	}

	# validate input/output directories
	foreach my $key (qw(input output)) {
		my $arg = $self->args->{$key};
		if (not -d $arg) {
			$self->fatal(BAD_INPUT,
				"invalid $key directory: $arg");
		}
	}
}


sub runtask
{
	my ($self) = @_;

        my $headas = $ENV{HEADAS};
	my $input = $self->args->{input};
	my $output = $self->args->{output};
	my $tolerance = $self->args->{tolerance};
	my $reltol = $self->args->{reltol};
	my $distfile = $self->args->{distfile};

	$distsuff = "";
	if ($distfile eq "INDEF") {
	    $distfile = "$input/batcelldetect_swbdistort.fits";
	    $distsuff = "_dist";
	}

	# ******************* FILL IN PARAMETERS HERE ********
	my %task = (
		    infile        => "$output/batmaskwtevt.evt.output",
		    aperture      => "CALDB:FLUX",
		    attitude      => "$input/batmaskwtevt.att.in",
		    ra            => 358.4274,
		    dec           => 65.9454,
		    coord_type    => "sky",
		    teldef        => "CALDB",
		    bat_z         => 0,
		    origin_z      => 0,
		    detmask       => "$input/batmaskwtevt.qmap.in",
		    rebalance     => "YES",
		    corrections   => "default",
		    distfile      => "$distfile",
		    auxfile       => "$output/batmaskwtevt.aux.output",
		    filtexpr      => "'(EVENT_FLAGS == 0) || (EVENT_FLAGS == 16)'",
		    clobber       => "YES",
		    );


	# ******************* FILL IN INPUT FILES HERE ********
	@infiles = ("infile");
	
	my %template = (
			infile => "$input/batmaskwtevt.evt$distsuff.template",
			auxfile => "$input/batmaskwtevt.aux$distsuff.template",
			);

	# (copy input template to output so there is something to write)
	$command = qq(ftcopy $input/batmaskwtevt.evt.in \!$task{infile});
	$self->doCommand($command);
	

	# validate required files
	foreach my $key (@infiles) {
		if (not -f $task{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid $key file: $task{$key}");
		}
	}

	# build command line
	my $command = "$taskname";

	foreach my $p (keys %task) {
	    $command .= " $p=$task{$p}";
	}

	my $result = $self->doCommand($command);

	# ***************** VERIFY OUTPUT OF TASK HERE ***********
	# Check template files are present
	foreach my $key (keys %template) {
		if (not -f $template{$key}) {
			$self->fatal(BAD_INPUT,
				"invalid template $key file: $template{$key}");
			return -1;
		}
	}

	# Check the event file
	$command = "ftdiff $template{infile} $task{infile} tolerance=$tolerance reltol=$reltol exclude=BATCREAT,BTELDEF";
	$result = $self->doCommand($command);
	if ($result->{output} =~ m/End of file comparison: *([0-9]+) *differences/ ) {
	    $ndiffs = $1;
	    print "   -->  FTDIFF reports $ndiffs differences\n";
	    if ($ndiffs ne 0) {
		$lines = $result->{output};
		print "$lines\n" if $self->chatter(5);
		$self->error(BAD_OUTPUT, "error because of bad compare");
	    }

	}

	# Check the auxiliary file
	$command = "ftdiff $template{auxfile} $task{auxfile} tolerance=$tolerance reltol=$reltol exclude=BATCREAT";
	$result = $self->doCommand($command);
	if ($result->{output} =~ m/End of file comparison: *([0-9]+) *differences/ ) {
	    $ndiffs = $1;
	    print "   -->  FTDIFF reports $ndiffs differences\n";
	    if ($ndiffs ne 0) {
		$lines = $result->{output};
		print "$lines\n" if $self->chatter(5);
		$self->error(BAD_OUTPUT, "error because of bad compare");
	    }

	}
	
	
}


.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "xpatemplate n"
.TH xpatemplate n "July 23, 2013" "version 2.1.15" "SAORD Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\fBXPATemplate: Access Point Names and Templates\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1XPA\s0 access points are composed of two parts: a general class and a
specific name.  Both parts accept template characters so that you
can send/retrieve data to/from multiple servers at one time.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When \s-1XPA\s0 servers call
\&\fIXPANew()\fR,
or
\&\fIXPACmdNew()\fR
to define \s-1XPA\s0 access points, they specify a string identifier composed of a
class and a name. When clients communicate with \s-1XPA\s0 access points,
they specify which access points to communicate with using
an identifier of the form:
.PP
.Vb 1
\&  class:name
.Ve
.PP
All registered \s-1XPA\s0 access points that match the specified identifier
will be available for communication (subject to access control rules,
etc.)
.PP
As of \s-1XPA\s0 2.1.5, the length of both the class and name designations are
limited to 1024 characters.
.PP
The \s-1XPA\s0 class:name identifier actually is a template: it accepts wild
cards in its syntax, so a single specifier can match more than one \s-1XPA\s0
access point.  (Note that the class is optional and defaults to \*(L"*\*(R".)
The allowed syntax for clients to specify the class:name template is
of the form shown below. (Note that \*(L"*\*(R" is used to denote a generic
wild card, but other wild cards characters are supported, as described
below).
.PP
.Vb 7
\&  template      explanation
\&  \-\-\-\-\-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-
\&  class:name    exact match of class and name
\&  name          match any class with this name
\&  *:name        match any class with this name
\&  class:*       match any name of this class
\&  *:*           match any access point
.Ve
.PP
In general, the following wild-cards can be applied to class and name:
.PP
.Vb 5
\&  wildcard      explanation
\&  \-\-\-\-\-\-\-\-      \-\-\-\-\-\-\-\-\-\-\-
\&  ?             match any character, but there must be one
\&  *             match anything, or nothing
\&  [...]         match an inclusive set
.Ve
.PP
Although the class:name template normally is used to refer to \s-1XPA\s0
access points, these also can be specified using their individual
socket identifiers.  For inet sockets, the socket identifier is
\&\fBip:port\fR, where ip can be the DNS-registered name,
the \s-1ASCII\s0 \s-1IP\s0 number (e.g. 123.45.67.890) or the hex \s-1IP\s0 number
(e.g. 838f3a60). For unix sockets, the identifier is the socket file
name.  These socket identifiers are displayed as the fourth argument
in the xpans display of registered access points.  For example,
consider the ds9 program started using inet sockets. The xpans name
server will register something like this:
.PP
.Vb 2
\&  csh> xpaget xpans
\&  DS9 ds9 gs saord.harvard.edu:3236 eric
.Ve
.PP
You can access ds9 using ip:3236 in any of the three forms:
.PP
.Vb 2
\&  csh> xpaget saord:3236 file
\&  /home/eric/data/snr.ev
\&
\&  csh> xpaget 123.45.67.890:3236 file
\&  /home/eric/data/snr.ev
\&
\&  csh> xpaget 838f3a60:3236 file
\&  /home/eric/data/snr.ev
.Ve
.PP
In the case of unix  sockets, the socket identifier is a file:
.PP
.Vb 2
\&  csh> xpaget xpans
\&  DS9 ds9 gs /tmp/.xpa/DS9_ds9.2631 eric
\&
\&  csh> xpaget /tmp/.xpa/DS9_ds9.2631 file
\&  /home/eric/data/snr.ev
.Ve
.PP
This feature can be useful in distinguishing between multiple
instances of a program that all have the same class:name designation.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See xpa(n) for a list of \s-1XPA\s0 help pages

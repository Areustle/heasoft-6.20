.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "xpaconvert n"
.TH xpaconvert n "July 23, 2013" "version 2.1.15" "SAORD Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\fBXPAConvert: Converting the \s-1XPA\s0 \s-1API\s0 to 2.0\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document describes tips for converting from xpa 1.0 (Xt-based
xpa) to xpa 2.0 (socket-based xpa).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following are tips for converting from xpa 1.0 (Xt-based xpa) to
xpa 2.0 (socket-based xpa). The changes are straight-forward and
almost can be done automatically (we used editor macros for most of
the conversion).
.IP "\(bu" 4
The existence of the cpp \s-1XPA_VERSION\s0 directive to distinguish between 1.0
(where it is not defined) and 2.0 (where it is defined).
.IP "\(bu" 4
Remove the first widget argument from all send and receive server
callbacks.  Also change first 2 arguments from XtPointer to void
*. For example:
.Sp
#ifdef \s-1XPA_VERSION\s0
static void XPAReceiveFile(client_data, call_data, paramlist, buf, len)
     void *client_data;
     void *call_data;
     char *paramlist;
     char *buf;
     int len;
#else
static void XPAReceiveFile(w, client_data, call_data, paramlist, buf, len)
     Widget w;
     XtPointer client_data;
     XtPointer call_data;
     char *paramlist;
     char *buf;
     int len;
#endif
.IP "\(bu" 4
Server callbacks should be declared as returning int instead
of void. They now should return 0 for no errors, \-1 for error.
.IP "\(bu" 4
The mode flags have changed when defining \s-1XPA\s0 server callbacks.
The old \fIS\fR flag (save buffer) is replaced by \fIfreebuf=false\fR.
The old \fIE\fR flag (empty buffer is \s-1OK\s0) is no longer used (it
was an artifact of the X implementation).
.IP "\(bu" 4
Change \fINewXPACommand()\fR to \fIXPAcmdNew()\fR, with the new calling sequence:
.Sp
.Vb 1
\&  xpa = NewXPACommand(toplevel, NULL, prefix, NULL);
.Ve
.Sp
is changed to:
.Sp
.Vb 1
\&  xpa = XPACmdNew(xclass, name);
.Ve
.IP "\(bu" 4
Change the \fIAddXPACommand()\fR subroutine name to XPACmdAdd (with the same
calling sequence):
.Sp
.Vb 3
\&  AddXPACommand(xpa, "file",
\&    "\etdisplay a new file\en\et\et  requires: filename",
\&    NULL, NULL, NULL, XPAReceiveFile, text, NULL);
.Ve
.Sp
is changed to:
.Sp
.Vb 3
\&  XPACmdAdd(xpa, "file",
\&    "\etdisplay a new file\en\et\et  requires: filename",
\&    NULL, NULL, NULL, XPAReceiveFile, text, NULL);
.Ve
.IP "\(bu" 4
The \fIXPAXtAppInput()\fR routine should be called just before \fIXtAppMainLoop()\fR
to add xpa fds to the Xt event loop:
.Sp
.Vb 2
\&  /* add the xpas to the Xt loop */
\&  XPAXtAddInput(app, NULL);
\&
\&  /* process events */
\&  XtAppMainLoop(app);
.Ve
.IP "\(bu" 4
Change \fINewXPA()\fR to \fIXPANew()\fR and call \fIXPAXtAddInput()\fR if the XtAppMainLoop
routine already has been entered:
.Sp
.Vb 4
\&  xpa = NewXPA(saotng\->xim\->toplevel, prefix, xparoot,
\&               "FITS data or image filename\en\et\et  options: file type",
\&               XPASendData, new, NULL,
\&               XPAReceiveData, new, "SE");
.Ve
.Sp
is changed to:
.Sp
.Vb 6
\&  sprintf(tbuf, "%s.%s", prefix, xparoot);
\&  xpa = XPANew("SAOTNG", tbuf,
\&               "FITS data or image filename\en\et\et  options: file type",
\&               XPASendData, new, NULL,
\&               XPAReceiveData, new, "SE");
\&  XPAXtAddInput(XtWidgetToApplicationContext(saotng\->xim\->toplevel), xpa);
.Ve
.IP "\(bu" 4
Change \fIXPAInternalReceiveCommand()\fR to \fIXPACmdInternalReceive()\fR
remove first argument in the calling sequence):
.Sp
.Vb 3
\&  XPAInternalReceiveCommand(im\->saotng\->xim\->toplevel,
\&                            im\->saotng, im\->saotng\->commands,
\&                            "zoom reset", NULL, 0);
.Ve
.Sp
is changed to:
.Sp
.Vb 2
\&  XPACmdInternalReceive(im\->saotng, im\->saotng\->commands,
\&                        "zoom reset", NULL, 0);
.Ve
.IP "\(bu" 4
Change DestroyXPA to XPAFree:
.Sp
.Vb 1
\&  DestroyXPA(im\->dataxpa);
.Ve
.Sp
is changed to:
.Sp
.Vb 1
\&  XPAFree(im\->dataxpa);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See xpa(n) for a list of \s-1XPA\s0 help pages

.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "xpaintro n"
.TH xpaintro n "July 23, 2013" "version 2.1.15" "SAORD Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\fBXPAIntro: Introduction to the \s-1XPA\s0 Messaging System\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A brief introduction to the \s-1XPA\s0 messaging system, which provides
seamless communication between all kinds of Unix event-driven
programs, including X programs, Tcl/Tk programs, and Perl programs.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1XPA\s0 messaging system provides seamless communication between all
kinds of Unix programs, including X programs, Tcl/Tk programs, and
Perl programs.  It also provides an easy way for users to communicate
with these XPA-enabled programs by executing \s-1XPA\s0 client commands in
the shell or by utilizing such commands in scripts.  Because \s-1XPA\s0 works
both at the programming level and the shell level, it is a powerful
tool for unifying any analysis environment: users and programmers have
great flexibility in choosing the best level or levels at which to
access \s-1XPA\s0 services, and client access can be extended or modified
easily at any time.
.PP
A program becomes an XPA-enabled server by defining named points of
public access through which data and commands can be exchanged with
other client programs (and users).  Using standard \s-1TCP\s0 sockets as
a transport mechanism, \s-1XPA\s0 supports both single-point and broadcast
messaging to and from these servers.  It supports direct communication
between clients and servers, or indirect communication via an
intermediate message bus emulation program. Host-based access control
is implemented, as is as the ability to communicate with \s-1XPA\s0 servers
across a network.
.PP
\&\s-1XPA\s0 implements a layered interface that is designed to be useful both
to software developers and to users.  The interface consists of a
library of \s-1XPA\s0 client and server routines for use in programs and a
suite of high-level user programs built on top of these libraries.
Using the \s-1XPA\s0 library, access points can be added to
Tcl/Tk
programs, 
Xt
programs, or to Unix programs that use the \s-1XPA\s0 event loop or any
event loop based on \fIselect()\fR.  Client access subroutines can be added
to any Tcl/Tk or Unix program. Client access also is supported at the
command line via a suite of high-level programs.
.PP
The major components of the \s-1XPA\s0 layered interface are:
.IP "\(bu" 4
A set of \s-1XPA\s0 server routines, centered on 
\&\fIXPANew()\fR,
which are used by \s-1XPA\s0 server programs to tag public access points with
string identifiers and to register send and receive callbacks for
these access points.
.IP "\(bu" 4
A set of \s-1XPA\s0 client routines, centered on the 
\&\fIXPASet()\fR
and
\&\fIXPAGet()\fR,
which are used by external client applications to exchange data and
commands with an \s-1XPA\s0 server.
.IP "\(bu" 4
High-level programs, centered on
xpaset
and
xpaget,
which allow data
and information to be exchanged with \s-1XPA\s0 server programs from the
command line and from scripts.  These programs have the command syntax:
.Sp
.Vb 2
\&  [data] | xpaset  [qualifiers ...]
\&           xpaget  [qualifiers ...]
.Ve
.IP "\(bu" 4
An \s-1XPA\s0 name server program, 
xpans,
through which \s-1XPA\s0 access point names are
registered by servers and distributed to clients.
.PP
Defining an \s-1XPA\s0 access point is easy: a server application calls
\&\fIXPANew()\fR,
\&\fIXPACmdNew()\fR,
or the experimental
\&\fIXPAInfoNew()\fR
routine to
create a named public access point.  An \s-1XPA\s0 service can specify \*(L"send\*(R"
and \*(L"receive\*(R" callback procedures (or an \*(L"info\*(R" procedure in the case
of \fIXPAInfoNew()\fR) to be executed by the program when an external
process either sends data or commands to this access point or requests
data or information from this access point.  Either of the callbacks
can be omitted, so that a particular access point can be specified as
read-only, read-write, or write-only.  Application-specific client
data can be associated with these callbacks.  Having defined one or
more public access points in this way, an \s-1XPA\s0 server program enters
its usual event loop (or uses the standard \s-1XPA\s0 event loop).
.PP
Clients communicate with these \s-1XPA\s0 public access points
using programs such as
xpaget,
xpaset, and
xpainfo
(at the command line),
or routines such as
\&\fIXPAGet()\fR,
\&\fIXPASet()\fR,
and
\&\fIXPAInfo()\fR
within a program.  Both methods require specification of the name of
the access point.  The xpaget program returns data or other
information from an \s-1XPA\s0 server to its standard output, while the
xpaset program sends data or commands from its standard input to an
\&\s-1XPA\s0 application. The corresponding \s-1API\s0 routines set/get data to/from
memory, returning error messages and other info as needed.  If a
template
is used to specify the access point name (e.g., \*(L"ds9*\*(R"), then
communication will take place with all servers matching that template.
.PP
Please note that \s-1XPA\s0 currently is not thread-safe. All \s-1XPA\s0 calls must be
in the same thread.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See xpa(n) for a list of \s-1XPA\s0 help pages


********** Programmer's Guide for CLI **********

	Last Update: 19-Feb-2005

*	Subroutine Intrd( promot, value )
	Subroutine IntrdL( prompt, value, lower, upper )
	Subroutine IntrdX( prompt, value, text )

	Input : Character * (*)  prompt
	        Integer * 4  value
	        Integer * 4  lower, upper
	Output: Integer * 4  value
	        Character * (*)  text

	Description:
	    Read interger (INTEGER * 4) from input token stream.



*	Subroutine Hexrd( promot, value )
	Subroutine HexrdL( promot, value, lower, upper )
	Subroutine HexrdX( promot, value, text )

	Input : Character * (*)  prompt
	        Integer * 4  value
	        Integer * 4  lower, upper
	Output: Integer * 4  value
	        Character * (*)  text

	Description:
	    Read hexadecimal (INTEGER * 4) from input token stream.



*	Subroutine Fltrd( promot, value )
	Subroutine FltrdL( promot, value, lower, upper )
	Subroutine FltrdX( prompt, value, text )

	Input : Character * (*)  prompt
	        Real * 4  value
	        Real * 4  lower, upper
	Output: Real * 4  value
	        Character * (*)  text

	Description:
	    Read float (REAL * 4) from input token stream.



*	Subroutine Fdprd( prompt, value )
	Subroutine FdprdL( prompt, value, lower, upper )
	Subroutine FdprdX( prompt, value, text )

	Input : Character * (*)  prompt
	        Real * 8  value
	        Real * 8  lower, upper
	Output: Real * 8 value

	Description:
	    Read double (REAL * 8) from input token stream.



*	Subroutine Txtrd( prompt, string )

	Input : Character * (*)  prompt
	Output: Character * (*)  string

	Description:
	    Read one word from input token stream.
	    Word delimiters are ' ', TAB, CR, ',' and  '='.



*	Subroutine Titrd( promot, string )

	Input : Character * (*)  prompt
	Output: Character * (*)  string

	Description:
	    Read a whole line from input stream.



*	Subroutine Logrd( prompt, value )

	Input : Character * (*)  prompt
	Output: Logical * 4  value

	Description:
	    Read logical value from input token stream.



*	Subroutine Keyrd(mode,prompt,word,table,ntable,choice)

	Input : Integer mode
	        Character * (*)  prompt
	        Character * (*)  table(ntable)
	        Integer ntable
	In/Out: Character * (*)  word
	Output: Integer  choice

	Description:
           Read a token from input stream and lookup keyword table.

        Mode =  0 : several line mode
                1 : one line mode
               -1 : no line control/no alias/force input
               -2 : no line control/alias substituion/force input
               -3 : no line contrl/alias substitution/just return 

	choice:  > 0  : keyword found
	         = 0  : keyword not found
	         = -1 : ambiguous keyword


*	Integer Function Lenrd( string )

	Input: Character * (*)  string

	Description:
	    Return the effective length of string, i.e. ignore
	    trailing blanks.



*	Integer Function Lkbrd( string, n )

	Input : Character * (*)  string
	        Integer * 4  n
	Output: Character * (*)  string

	Description:
	   Collapse sucessive blanks into blanks of length 'n' 
	   and return the effective length of string.



*	Integer Function Opnrd( file )

	Input: Character * (*)  file

	Return: 0 for succesfull completion, -1 for error

	Description:
	    redirect the input stream of CLI to the specified file.



*	Integer Function Lunrd( lun )

	Input: Integer * 4  lun

	Return: 0 for succesfull completion, -1 for error

	Description:
	    redirect the input stream of CLI to the specified LUN.



*	Integer Function Iopen( lun,file,ext,kind )

	Input: Integer * 4  lun
	       Character * (*)  file, ext, kind

	Return: 0 for succesfull completion, -1 for error

	Description:
	    Open a file.

	    file : filename
	    ext  : default extention of filename
            kind : 'R' for READ,
                   'A' for APPEND, 'D' for DIRECT,
                   'U' for UNFORMATTED



*	Subroutine CLopen( file,lun,mode,error,default )

	Input:  Character * (*)  file
	        Integer * 4      lun
                Character * (*)  mode
                Character * (*)  default
        Output: Integer * 4      error

	Description:
	    Open a text (formatted) file.

	    file     : filename
            lun      : Logical Unit Number, 
            mode     : 'R' for READ, 'r' without CLIerr
                       'W' for WRITE, 'w' without CLIerr
                       'A' for APPEND, 'a' without CLIerr
	    default  : default extention of filename (e.g. '.dat')

	Note:
            If LUN is 6, redirects stdout (SYS$OUTPUT) to a specifed file.
	    For UNIX, inquires 'DELETE or NOT' when the file already
            exists for mode 'W'.



*	Logical Function Qopen( promot,lun,file,mode,form,stat )

	Input : Character * (*) prompt
	        Integer * 4  lun
	        Character * (*) file
		Character * (*) mode, form, stat
	Output: Character * (*) file

	Return: .TRUE. for succesfull completion, .FALSE. for error

	Description:
	    Ask a filename and open it.

	    mode: 'READ','WRITE','BOTH','DIRECT'
	    form: 'FORMATTED','UNFORMATTED'
	    stat: 'OLD','NEW','UNKNOWN'

	Note:
	    If a filename contains a wildcard '*', the list of matched
            files are printed for the user's choice.



*	Subroutine Affirm( prompt, value )

	Input : Character * (*)  prompt
	Output: Logical * 4  value

	Description:
	    Like Logrd but ask yes/no always on console.




*	Subroutine CLatof( string,value )
	
	Input:  Character * (*)  string
	Output: Real * 4  value

	Description: Convert string to real value



*	Subroutine CLatod( string,value )
	
	Input:  Character * (*)  string
	Output: Real * 8  value

	Description: Convert string to real*8 value



*	Subroutine CLatoi( string,value )

	Input:  Character * (*)  string
	Output: Integer * 4  value

	Description: Convert string to integer value



*	Subroutine CLftoa( value,string )

	Input:  Real * 4  value
	Output: Character * (*)  string

	Description: Convert real*4 value to string



*	Subroutine CLdtoa( value,string )

	Input:  Real * 8  value
	Output: Character * (*)  string

	Description: Convert real*8 value to string



*	Subroutine CLitoa( value,string )

	Input:  Integer * 4  value
	Output: Character * (*)  string

	Description: Convert integer*4 value to string



*	Integer Function CLrchr( string,c )

	Input : Character * (*)  string
	        Character * 1  c

	Description:
	    Return the offset of the LAST occurence of 'c' in 'string'.



	Subroutine CLstrupc( length,string )
*	Subroutine Strupc( length,string )

	Input : Integer  length
	        Character * (*)  string

        Description:
	    Change case to upper of first 'length' characters of 'string'.
	    Strupc() is obsolete.  Use CLstrupc() instead.



*	Subroutine CLstrdwc( length,string )

	Input : Integer  length
	        Character * (*)  string

        Description:
	    Change case to lower of first 'length' characters of 'string'.



*	Integer Function CLstricmp( s1,s2 )

	Input: Character * (*)  s1, s2

	Description:
	    Compare s1 and s2 after changing case into upper for both,
            and return 0:(s1=s2), +1:(s1>s1), -1:(s1<s2)



*	Subroutine CLword( string,delimiter,nwords,words )

	Input : Character * (*)  string
	        Character * (*)  delimiter
	Output: Integer * 4  nwords
		Character * (*)  words(*)

	Description:
	    Divide the string into the words separated by any 
	    character in the delimiter and put the results into
            the array of characters.



*	Subroutine CLpart( string,np,word )

	Input : Character * (*)  string
	        Integer  np
	Output:	Character * (*)  word

	Description:
	    Return the 'np'-th word delimited by blanks in the string.



*	Subroutine CLsubp( string,np,index )

	Input : Character * (*)  string
		Integer * 4  np
	Output: Integer * 4  index

	Description:
	    Return the offset of the first character of 'np'-th
	    word of the string.  Single and double quotations are
	    NOT escaped.  This function is obsolete, use CLsubp2.



*	Subroutine CLpart2( string,np,word,len )

	Input : Character * (*)  string
	        Integer  np
	Output:	Character * (*)  word
	        Integer  len

	Description:
	    Return the 'np'-th word delimited by blanks (SPACE & TAB)
	    in the string.  The length of the string is set to 'len'.
	    Single and double quotations are escaped.  Internally,
	    this function calls CLsubp2.



*	Subroutine CLsubp2( string,np,index0,index1 )

	Input : Character * (*)  string
		Integer * 4  np
	Output: Integer * 4  index0, index1

	Description:
	    Return the offset of the first ('index0') and last ('index1')
	    character of 'np'-th word of the string.  Single and double
	    quotations are escaped.  Both 'index0' and 'index1' are set
	    to 0, if 'np'-th word is not found.



*	Subroutine Printf(lun,format,var,...)

	Input: Integer * 4  lun
	       Character * (*)  format
	       Real/Integer * 4  var,...

	Description:
	    Emulate C's printf() function.
	    'format' must be terminated with '$'.
	    Only "%m.nf" (for REAL*4) and "%md" for (INTEGER*4)
	    formats are valid for the current version.

	Bug:
	    This routine may not work for the current version.



*	Subroutine CLerok

	Description:
	    Discard the remaining trail in the current input.
	    This routine is equivalent to Linrd(1,1)


*	Subroutine CLlast( Length )

	Input:	Integer  Length

	Description:
	    Returns the length of internal input buffer remaining.


*	Integer Function CLILVL()

	Description:
	    Command procedure nesting level, 0 means console mode.


*	Subroutine CLILUN( Lun )

	Output:	Integer  Lun

	Description:
	    Get current LUN (Logical Unit Number) of command input stream.


*	Subroutine CLflaS( IFLQin,IFCRin )
*	Subroutine FLGRD( IFLQin,IFCRin )	... obsolete

	Input:	Integer  IFLQin
		Integer  IFCRin

	Description:
	    Set internal CLI flags, IFLQ & IFCR.

	    IFLQ	This flag is actually read only status flag.
			0: Next character will be read from internal buffer.
			1: Next character will be read from input stream,

	    IFCR        This flag controls the handling of characters
			remaining is the internal input buffer.
			1: Normal
			0: Don't read next line from input stream.
			   Next input will be an empty string
			   if internal buffer is exhasuted.


*	Subroutine CLflaG( IFLQout,IFCRout )
*	Subroutine FLARD( IFLQout,IFCRout )	... obsolete

	Output:	Integer  IFLQout
		Integer  IFCRout

	Description:
	    Get internal CLI flags, IFLQ & IFCR.
	    See CLflaS for their meanings.


*	Subroutine CLSTAR( IICOM )

	Input:	Integer IICOM

	Description:
	    Enable/Disable temporary reading from console.
		IICOM = 1	Enable
		IICOM = 0	Disble


*	Subroutine Ugetrd( string,length )

	Input: Character * (*)  string
	       Integer  length

	Description:
	    Put back 'string' as if it comes from input stream.



*	Subroutine CLalii( alias,command )

	Input: Character * (*)  alias, command

	Description:
            Define an alias name for an sequence of commands.
	    Alias substitution occurs for 'CALL Keyrd(-2,,,)'.



*	Subroutine CLsetv( var,value )

	Input: Character * (*)  var
	       Character * (*)  value

	Description:
             Assing 'value' to a variable 'var'.



*	Subroutine CLseti( var,value )

	Input: Character * (*)  var
	       Integer  value

	Description:
             Assing 'value' to a variable 'var'.



*	Subroutine CLsetf( var,value )

	Input: Character * (*)  var
	       Real * 4  value

	Description:
             Assing 'value' to a variable 'var'.



*	Subroutine CLsetd( var,value )

	Input: Character * (*)  var
	       Real * 8  value

	Description:
             Assing 'value' to a variable 'var'.



*	Subroutine CLexec( command,input,output )

	Input: Character * (*)  command 
	       Character * (*)  input
	       Character * (*)  output

        Description:
            Execute a shell (DCL) command. input/output are the
            files to be assigned for stdin (SYS$INPUT) and stdout
	    (SYS$OUTPUT). If input/output are null string, default
            input/output are used.



*	Subroutine CLfdel( file )

	Input: Character * (*)  file

	Description:
            Delete a file. For VMS, an explicit specification for a
            version number, ';*' is assumed.


*	Subroutine CLsigI( signal )

	Description:
	   Establish signal handler.


*	Logical Function CLsigC( signal )

	Description:
	   Check if signal occured.


*	Subroutine CLsigR( signal )

	Descption:
	   Reset signal flag.


*	Subroutine CLsigX( signal )

	Descption:
	    Restore original signal hander.


*	Subroutine CLsigF( signal,sigsub )

	Description:
	    Establish user's signal handler.


*	Subroutine CLstar( icom )

	Output : Integer  icom

	Description:
	    Enable/disable temporary reading from console.


*	Subroutine CLIopt( opt, ival )

        Input : Character * (*)  opt

        Input/Output: Integer  ival

	opt = 'AT'	: Enable/Disable the interpretation of '@' as
			  the execution of the command file.

	opt = '?AT'	: Query 'AT' status.

	opt = 'ECHO'	: Enable/Disable echo, equivalent to '@+' or '@-'.

	opt = '?ECHO'	: Query 'ECHO' status.

	opt = 'BREAK'	: Enable/Disable Cntrl-C (SIGINT) handling by CLI

	opt = '?BREAK'	: Query 'BREAK' status.

	opt = 'DEBUG'	: Enable/Disable single stepping execution of
			  the command file. 

	opt = '?DEBUG'	: Query 'DEBUG' status.

	opt = 'ALIAS'	: Enable/Disable alias substitution in Keyrd(-2, ..).

	opt = '?ALIAS'	: Query 'ALIAS' status.

	opt = 'DOLLAR'	: Enable/Disable $(symbol) substituion.

	opt = '?DOLLAR'	: Query 'DOLLAR' status.

	opt = 'PERCENT'	: Enable/Disable %*, %0-%9 substituion as
			   command procedure arguments.

	opt = '?PERCENT': Query 'PERCENT' status.

	opt = 'BSLASH'	: Enable/Disable the line concatenation by '\'
			  at the end of line

	opt = '?BSLASH'	: Query 'BSLASH' status.

	opt = 'INCO'	: Enable/Disable inline comments, @! or ! comments...

	opt = '?INCO'	: Query 'INCO' status.

	opt = 'HISTORY'	: Enable/Disable command line history ![-]n[:n]
			  in console mode.

	opt = '?HISTORY': Query 'HISTORY' status.


*	Subroutine CLecho( string )

	Input : Character * (*)  string

	Description:
	    Print string (with LF).


*	Subroutine CLprom( prompt )

	Input : Character * (*)  prompt

	Description:
	    Print string (without LF).


*	Subroutine CLputL( lun, string )

	Input : Integer lun
	        Character * (*)  prompt

	Description:
	    Print string to logical unit number lun.


*	Subroutine CLvers

	Description:
	    Print CLI version string.


*	Subroutine CLgetlun( LUN )

	Output : Integer  LUN

	Description:
	    Get vacant logical unit number (20-80), or lun=-1 if not vacant.


*	Subroutine CLfreelun( LUN )

	Input : Integer  LUN

	Description:
	    Free logical unit number, LUN.


*	Subroutine CLmarklun( LUN )

	Output : Integer  LUN

	Description:
	    Mark the logical unit number, LUN, as being used.



*** CLI Special Directives ***

@

  Print CLI version and current CLI status.  Same as '@.status'.

@file [arg...]

  Execute a command procedure file 'file'.  Arguments are
  passed to the command procedure using CLI variables $%*, $%0, ..., $%9.
  When '@.set percent on', '%n' (n=0..9) in a command procedure file
  will be replaced by the actual arguments (default off).

@command [arg...] |

  Execute output of the DCL/shell command as a command procedure.
  Exit status is set to the CLI variable '?'.

@@file

  Execute a command procedure file 'file' in the sigle step mode.

@*prompt

  Read from console in a command procedure.

@<

  Suspend/resume the execution of a command procedure.

@!comment

  Comment in a command procedure.

@/*
@*/

  Start/End block comment.

@//message

  Print message to standard output.

@$command

  Execute DCL/shell command.  Exit status is set to the CLI variable '?'.

@(file

  The subsequent inputs will be written on 'file'.

@)

  Close the file opend by '@(' directive.

@>file

  The subsequenbt outputs will be written on 'file'.

@>*

  Close the file opened by '@>' directive and resume the output.

@%
@%%

  Turn outputs off with/without info message.

@#
@##

  Turn outputs on with/without info message.

@-
@--

  Turn echo off with/without info message.

@+
@++

  Turn echo on with/without info message.

@?

  Toggle the single step mode.

@=

  Show list of CLI variables.

@=arg0 arg1 arg2 ...

  Override current arguments, refered by $%*, $%0, ... $%9.

@symbol=value

  Symbol assignment. The symbol will be refered as $symbol or $(symbol).

@symbol=`shell command`

  Symbol assignment by an output of shell command.
  Exit status of the shell command is set to the CLI variable '?'.

@symbol=?prompt

  Symbol assignment from terminal input with a 'prompt'.

@:

  Show list of labels defined in the current context.

@:label

  Set label for @.goto command.  Ignored in the console mode.

@.abort

  Abort the execution of all command procedures.

@.alias [name [word]]

  If no arguments are specified, displays all aliases.
  If 'name' is specified, displays the alias for 'name'.
  If 'word' is also specified, assigns 'word' as the alias of 'name'.
  Aliases defined here is only usable when calling Keyrd(-2, ..).

@.call name [arg...]

  Enter the subroutine of 'name', defined by '@.sub name' ... '@.endsub'.
  Internally, this procedure is identical to '@file [arg...]',
  and the arguments are passed to the subroutine using the CLI variables
  $%*, $%0, ..., $%9.

@.cd directory
@.chdir directory

  Changes the working directory to 'directory'.

@.exit [value]

  Force exit the program with the 'value'.
  Use '@.return [value]' just exit from the current command procedure.

@.goto label

  Goto specified label.  The destination label must be outside of
  @.if/elif/else/endif blocks.

@.help

  Show this document.

@.history [filename]

  Write input line history to 'filename' (default STDOUT).

@.path [search-path]

  Set search path(s) of the command procedure file.  Multiple
  search paths can be specified by using a delimiter of ':'.

@.resume

  Resume the execution of a command procedure.

@.return [value]

  Return from current command procedure, with setting
  the CLI variable of '$?' to VAL.

@.set at [on/off]

  Enable/disable the interpretation of '@'.
  Note that there is no way to back if you set 'at' off.

@.set break [on/off]

  Enable/disable to catch Ctrl-C (SIGINT) to suspend command procedure.

@.set debug [on/off]

  Enter/exit the single step mode.

@.set echo [on/off]

  Turn echo on/off for info message, same as '@+' and '@-'.

@.set alias [on/off]

  Enable/Disable alias substitution in Keyrd(-2, ..).

@.set dollar [on/off]

  Enable/Disable $(symbol) substitution.

@.set percent [on/off]

  Enable/Disable %*, %0-%9 substituion as command procedure arguments.
  These expressions are obsolete, and 'percent' is off by default.
  Use $%*, $%0, ... $%9, instead.

@.set bslash [on/off]

  Enable/Disable the line concatenation by '\' at the end of line.

@.set inco [on/off]

  Enable/Disable inline comments, i.e., @! or ! comments...

@.set history  [on/off]

  Enable/Disable command line history ![-]n[:i] in console mode.

@.setenv [name [word]]

  If no arguments are specified, execute putenv command.
  If 'name' is specified, displays the value of environmental variable 'name'.
  If 'word' is also specified, sets the value of 'name' as 'word'.

@.sleep seconds

  Sleep for the specified seconds in real number.

@.show [vers|proc|flow|alias|var|label|sub|opt]
@.status

  Show present status of the command processing.

@.suspend

  Suspend the execution of a command procedure.

@.unalias name

  Discards alias with 'name'.

@.version

  Show CLI version string.

@.sub

  Show a list of subroutines defined so far.

@.sub name
@.endsub

  Define a subroutine of 'name'.

@.if EXPRESSION
@.elif EXPRESSION
@.else
@.endif

  Conditional execution.  EXPRESSION is represented by
  [NOT] LEFT-VALUE [OPERATOR RIGHT-VALUE],
  and allowed operators are:
	NOT		negation
	EQ, NEQ		comparison as real numbers
	GT, GE		Greater Than / Greater or Equal
	LT, LE		Less Than / Less or Equal
	EQS, NEQS	comparison as strings

@.while EXPRESSION
@.end

  Loop structure doing while EXPRESSION is true.

@.repeat
@.until EXPRESSION

  Loop structure doing until EXPRESSION becomes true.


$(symbol) or $symbol is replaced by CLI variable named 'symbol', if exists.
$? or $(?) is automatically set to the exit status of the last
shell command execution (@$command, @ command |, @symbol=`command`).
$(?symbol) or $?symbol is replaced by 1 or 0, depending on
whether $(symbol) is defined or not.

%* and %0 ... %9 is replaced by command procedure arguments,
when '@.set percent on'.  This function is obsolete,
and set to off by default.

! in input line in console mode is interpreted as command history.
!-num refers to relative history, !num refers to direct history.
![-]n:i refers to i-th word in the line.
! only shows list of history.

! or @! in the mid of line is treated as an inline comment.
!! is replaced by a single !.  Note that ! in the line starting with '@'
is NOT treated as a comment, but a normal text.

\ at the end of line is interpreted as a concatenation mark.

The evaluation priority is
  (1) concatenation mark '\',
  (2) command history '!' (only in console mode),
  (3) command procedure arguments '%' (it's off by default),
  (4) CLI variable substitution '$(symbol)',
  (5) CLI special commands start with '@',
  (6) inline comments by '!' or '@!'
  (7) aliases in Keyrd(-2, ...)


#!/usr/bin/perl -w
#
# ut_aepipeline
#
# $Id: ut_aepipeline,v 1.3 2011/03/16 20:43:45 apadgett Exp $
#
# $Log#
use strict;
use ut_xrtobj;

# main
{
    # Object Istances
    my $ut = ut_xrtobj->new(
			    name    => "aepipeline",
			    utname  => "ut_aepipeline",
			    version => "1.1",
			   );
    
    # Set Parameters
    my $input   = $ut->getParam( "input_dir" );
    my $output  = $ut->getParam( "output_dir" ) . "/" . $ut->getParam( "utname" );
    my $chat    = $ut->getParam( "chatter" );
    my $clobber = $ut->getParam( "clobber" );

    # I/O Directory Check
    $ut->checkIODirectory( )
    if $ut->isValid;

    # Environment check
    my @chk_env = ( "LHEASOFT", "HEADAS", "CALDB" );
 
    $ut->checkEnvironment( @chk_env )
    if $ut->isValid;
    
    my $ArchDir = "ut_aepipeline";
    
    # Input Files Check
    my @chk_inp = ( 
		   "$input/$ArchDir/input/ae502063120.hk.gz",
		   "$input/$ArchDir/input/ae502063120.att.gz",
		   "$input/$ArchDir/input/ae502063120.orb.gz",
		   "$input/$ArchDir/input/ae502063120.ehk.gz",
		   "$input/$ArchDir/input/ae502063120.mkf.gz",
		   "$input/$ArchDir/input/ae502063120.tim.gz",
		   "$input/$ArchDir/input/ae502063120xi1_0_tel_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120xi0_0_conf_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120xi3_0_tel_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120xi3_0.hk.gz",
		   "$input/$ArchDir/input/ae502063120xi3_0_conf_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120xi0_0_tel_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120xi0_0.hk.gz",
		   "$input/$ArchDir/input/ae502063120xi1_0.hk.gz",
		   "$input/$ArchDir/input/ae502063120xi1_0_conf_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120xi0_0_3x3n066z_uf.evt.gz",
		   "$input/$ArchDir/input/ae502063120xi3_0_3x3n066z_uf.evt.gz",
		   "$input/$ArchDir/input/ae502063120xi1_0_3x3n069z_uf.evt.gz",
		   "$input/$ArchDir/input/ae502063120hxd_0_tel_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120hxd_0.hk.gz",
		   "$input/$ArchDir/input/ae502063120hxd_0_wel_uf.gti.gz",
		   "$input/$ArchDir/input/ae502063120hxd_0_wel_uf.evt.gz"
		  );

    $ut->checkExist( "Input", @chk_inp )
    if $ut->isValid;
    
    # Prototype Check ( Prototype = known valid output)

    my @prototype_files = ("$input/$ArchDir/prototypes/ae502063120hxd_0_gsono_cl.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120hxd_0_pinno_cl.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120hxd_0_pse_cl.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120hxd_0_tel_uf.gti.gz",
			   "$input/$ArchDir/prototypes/ae502063120hxd_0_wel_uf.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi0_0_3x3n066a_cl.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi0_0_3x3n066z_uf.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi0_0_conf_uf.gti.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi0_0_tel_uf.gti.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi1_0_3x3n069b_cl.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi1_0_3x3n069z_uf.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi1_0_conf_uf.gti.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi1_0_tel_uf.gti.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi3_0_3x3n066a_cl.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi3_0_3x3n066z_uf.evt.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi3_0_conf_uf.gti.gz",
			   "$input/$ArchDir/prototypes/ae502063120xi3_0_tel_uf.gti.gz");

    $ut->checkExist( "Prototype", @prototype_files)
    if $ut->isValid;

    my @output_files = ("$output/ae502063120hxd_0_gsono_cl.evt",
			"$output/ae502063120hxd_0_pinno_cl.evt",
			"$output/ae502063120hxd_0_pse_cl.evt",
			"$output/ae502063120hxd_0_tel_uf.gti",
			"$output/ae502063120hxd_0_wel_uf.evt",
			"$output/ae502063120xi0_0_3x3n066a_cl.evt",
			"$output/ae502063120xi0_0_3x3n066z_uf.evt",
			"$output/ae502063120xi0_0_conf_uf.gti",
			"$output/ae502063120xi0_0_tel_uf.gti",
			"$output/ae502063120xi1_0_3x3n069b_cl.evt",
			"$output/ae502063120xi1_0_3x3n069z_uf.evt",
			"$output/ae502063120xi1_0_conf_uf.gti",
			"$output/ae502063120xi1_0_tel_uf.gti",
			"$output/ae502063120xi3_0_3x3n066a_cl.evt",
			"$output/ae502063120xi3_0_3x3n066z_uf.evt",
			"$output/ae502063120xi3_0_conf_uf.gti",
			"$output/ae502063120xi3_0_tel_uf.gti");


    # Executables Files Check
    my @chk_exe = ( "./aepipeline", "ftdiff", "fverify", "pquery2" );
    $ut->checkExecutable( @chk_exe )
    if $ut->isValid;

    # Task Files Check

    my %par_task = (
		    indir             => "$input/$ArchDir/input", 
		    outdir            => $output, 
		    steminputs        => "ae502063120", 
		    entry_stage       => 1, 
		    exit_stage        => 2, 
		    instrument        => "ALL",
                    report            => "no",
		    clobber           => "yes", 
		    remove_temp_files => "yes",
                    bstgti            => "yes",
                    hxdpi_old         => "no",
                    hxd_gsogpt        => "$ENV{CALDB}/data/suzaku/hxd/bcf/ae_hxd_gsogpt_20100323.fits",
                    hxd_gsolin        => "$ENV{CALDB}/data/suzaku/hxd/bcf/ae_hxd_gsolin_20051209.fits",
                    hxd_gsopsd        => "$ENV{CALDB}/data/suzaku/hxd/bcf/ae_hxd_gsopsd_20090812.fits",
                    hxd_pinghf        => "$ENV{CALDB}/data/suzaku/hxd/bcf/ae_hxd_pinghf_20051125.fits",
                    hxd_pinlin        => "$ENV{CALDB}/data/suzaku/hxd/bcf/ae_hxd_pinlin_20060724.fits",
                    hxd_pinthr        => "$ENV{CALDB}/data/suzaku/hxd/bcf/ae_hxd_pinthr_20070822.fits",
                    xis0_badcolum     => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi0_badcolum_20070418.fits",
                    xis1_badcolum     => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi1_badcolum_20070418.fits",
                    xis2_badcolum     => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi2_badcolum_20070418.fits",
                    xis3_badcolum     => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi3_badcolum_20070418.fits",
                    xis0_calmask      => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi0_calmask_20060731.fits",
                    xis1_calmask      => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi1_calmask_20060731.fits",
                    xis2_calmask      => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi2_calmask_20060731.fits",
                    xis3_calmask      => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi3_calmask_20060731.fits",
                    xis0_makepi       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi0_makepi_20100929.fits",
                    xis1_makepi       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi1_makepi_20100929.fits",
                    xis2_makepi       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi2_makepi_20100929.fits",
                    xis3_makepi       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi3_makepi_20100929.fits",
                    xis0_teldef       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi0_teldef_20080303.fits",
                    xis1_teldef       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi1_teldef_20080303.fits",
                    xis2_teldef       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi2_teldef_20080303.fits",
                    xis3_teldef       => "$ENV{CALDB}/data/suzaku/xis/bcf/ae_xi3_teldef_20080303.fits",
		   );

    $ut->runTask( %par_task )
    if $ut->isValid;
        
    if ( $ut->isValid ) {
	
	# fverify

        foreach my $test_output_file ( @output_files ) {
            $ut->fverify( $test_output_file );
        }
	
	# ftdiff

        foreach my $list ( map( [ $prototype_files[$_] , $output_files[$_] ] , 0..$#prototype_files  ) ) {
            $ut->ftdiff( @$list );
        }
    }    

    $ut->delete( );
}

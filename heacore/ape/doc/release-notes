Release Notes for Ape Version 2.7

Open Issues:
  None.

Summary of Changes
------------------

2010-09-28 Ape 2.7
  Changes Made:
    * Add ape_session interface, which parallels the ape_trad
      interface. This supports having multiple parameter files
      open simultaneously and independently.
    * Add some Fortran-accessible wrappers for ape_trad functions.
    * Add ape_trad_get_int and ape_trad_set_int for access to
      parameters treated as integers.
    * Internal code only: reenable handling of parameters as
      vectors of strings.

2010-01-19 Ape 2.6
  Changes Made:
    * Add PILGetLong function, needed for XPI compatibility.
    * Improve handling of undefined and infinite/nan values.
      Correctly report (debug only) when such values are used
      for a parameter value. Flag as an error when such values
      are used in ranges.

2009-09-17 Ape 2.5.3
  Changes Made:
    * Replace stat with _stat on Windows.

2009-07-09 Ape 2.5.2
  Changes Made:
    * A bug was fixed that prevented Ape from handling files with
      lines that are too long. Now Ape detects such lines (longer
      than 8192 characters) and gives proper error messages
      describing the problem.
    * Small clean up of redundant flags for optimization and symbols.
    * Corrected typographical error in file include/ape/ape_par.h.

2009-06-24 Ape 2.5.1
  Changes Made:
    * Fixes to the installation process to build position-independent
      code and to create all needed directories.

2009-06-23 Ape 2.5
  Changes Made:
    * If the system parameter file has a more recent time stamp than
      the local parameter file, Ape will now take the current value of the
      parameter from the system parameter file, not from the local
      parameter file.

2008-07-17 Ape 2.4
  Changes Made:
    * Ape was tolerant of empty paths in the PFILES variable, which may
      now contain system and/or local portions of the path that
      include leading colons, trailing colons, or consecutive colons.

Changes between version 2.2 and 2.3
The following functional and behavioral changes are new in this
version:

o If the environment variable APEDEBUG is set, debugging messages
  will be enabled throughout the Ape library at run-time.

o The plist and pquery2 utilities now assume queried and learned
  behavior ("ql") for automatic parameters if there is no mode
  parameter in the file. Previous versions silently returned an
  error code. (Note that an "automatic parameter" is one whose
  third field, the mode field, is "a". The "mode parameter" is
  a parameter named mode, whose value specifies the behavior for
  automatic parameters, usually "ql".)

o The pcheck utility now reports an error if the parameter file
  contains one or more automatic parameters but there is no mode
  parameter. Previous versions did not detect this error. (See
  also change to plist and pquery2 described above.)

o Ape now handles correctly all file types associated with the
  SAOHost interface, including "fe" (file exists), "fn" (file does
  not exist), "fr" (file is readable), "fw" (file is writable), and
  "f" (no file check performed). These modes may also be combined,
  e.g. "frw" (file is readable and writable), but it is therefore
  possible to create modes that will never be accessible, such
  as "fen" (file exists and file does not exist).

o When Ape is built without readline (configure --without-readline),
  prompts are now redirected to the user's terminal (/dev/tty) on
  Unix systems. This change made Ape's behavior consistent
  regardless of whether it is built with or without readline.

o When built with Windows/Visual Studio, Ape's file access checking
  code is now consistent with the Unix version.

o The ape_test unit test binary now takes an optional argument
  giving the name of the log file into which to redirect all
  output. This makes it easier to run the unit test from the
  command line while debugging.

The following code changes are new in this version:

o A new API function, ape_util_get_file_check_func, returns a pointer
  to the current file access checking function. This complements
  the extant function ape_util_set_file_check, and allows client
  code greater flexibility when implementing custom file access
  checking.

o A new API function, ape_util_interpret_env, reads all necessary
  environment variables and sets the internal state of Ape
  correctly based on their values.

o A new API function, ape_par_redirect_prompt_stream, allows
  prompts to be redirected to the given C FILE* stream.

o The functions ape_par_check and ape_io_check_file_format, which
  check the validity of indivual parameters and parameter files,
  respectively, were rationalized to perform more precise error
  checking, and to provide more explicit error messages.

o The functions PILInit and ape_trad_init, which set up Ape
  for standard parameter access, no longer call the strict file
  format checking function ape_io_check_file_format. Serious errors
  will still cause these functions to return an error code, but
  without the extensive output given by ape_io_check_file_format,
  which is not always desired simply while opening a parameter file.
  This change also allows client code to document and recover from
  errors by leaving the parameter file as open as possible. However,
  it is now especially important to call ape_trad_close in all cases,
  whether or not an error occurred in ape_trad_init.

About the Ape unit test:

Unix Version
--------------------------------------------------------------------------------
1. Source code for the compiled unit tests is contained directly within
   individual source code files, module by module. This allows the test
   to access internal data in the modules being tested.
2. The file src/ape_test.c contains support functions and the "main" for
   the test tool test_ape.
3. The heart of the test is the ape_test binary, which is built by the
   "test" Makefile target and installed by the "install-test" Makefile target.
   The ape_test binary requires the following run-time conditions to be met:

   a. The $PFILES environment variable should *not* be set.

   b. The following input parameter files must exist in the run-time
      directory: ape_test_unix.par, ape_test_win32.par, and
      pfiles/ape_test.par (implies pfiles/ directory must exist). At the
      beginning of ape_test execution, these files should all be identical
      to the reference file src/test/unix-ref/ape_test.par, apart from the
      fact that ape_test_win32.par uses dos32 newlines rather than Unix
      newlines.

   c. Some of the tests exercise ape's interactive capabilities, and
      require specific user input. The correct responses needed for the
      test to function properly are given in the file src/test/ape_test-input.

4. Running the ape_test binary produces the following outcomes in the
   run-time directory:

   a. The file ape_test_win32_copy.par, which starts as a copy of the
      file ape_test_win32.par, but has different settings for some
      parameters at the end of the ape_test run.

   b. The file ape_test_unix_copy.par, which should be an identical copy
      of ape_test_unix.par.

   c. The file ape_large.par, which is generated from scratch by
      the ape_test binary.

   d. Input parameter files (see above) should not be affected by the
      run.

5. Normally the input conditions described above are set by the run-test
   target in the src/test/Makefile, which uses the perl script
   ape_test_pfile_writer to copy the input parameter files as required.
   The target also pipes the inputs in ape_test-input into the executable
   and writes the text output of ape_test in the file ape_test-log.
   Finally, the target checks the output conditions (see above).
6. The repository contains the following ancillary test files, given
   relative to the directory src/test:

   a. The input file ape_test-input with input text prompts (see above).

   b. The perl script ape_test_pfile_writer.

   c. The directories unix-ref and win32-ref, which contain reference
      files generated on 64-bit Linux and Windows systems, respectively.
      These directories each include files named ape_test.par and
      ape_test-log, which give the canonically correct input and text output
      files produced by ape_test on Unix and Windows sytems, respectively.
      (Note that Cygwin output is closer to the Unix output than
      the Windows output).

   d. No other copies of parameter files, log files, input files etc.
      should be in the repository.
7. To update the unit test:

   a. A change of any kind (new, removed, modified) to test parameters
      in the file ape_test.par, should start with modifying the source
      code file ape_io.c, in the function ape_io_test. This should
      cause changes to the output parameter files when ape_test runs.

   b. Following the modifications to ape_io.c, and whatever other test
      code changes are needed, ape_test should be re-run. Then the output
      must be carefully inspected, with special attention to the differences
      compared to the reference output. This includes the files ape_test.par and
      ape_test-log. When the developer has validated the new output
      by hand, he/she can copy the output to the unix-ref and win32-ref
      directories. Note that outputs in win32-ref should be generated
      on a Windows system.

8. Summary: here's how the run-test target works to run the tests:
   a. Unset PFILES.
   b. Use ape_test_pfile_writer to copy unix-ref/ape_test.par to
      ape_test_unix.par, and win32-ref/ape_test.par to ape_test_win32.par
      without the final newline.
   c. Copy unix-ref/ape_test.par to pfiles/ape_test.par.
   d. Pipe ape_test-input into the ape_test binary. Capture output
      in ape_test-log.
   e. Compare reference parameter file unix-ref/ape_test.par to the files
      that should match it exactly (see above).
   f. Compare reference text output unix-ref/ape_test-log to ape_test-log.

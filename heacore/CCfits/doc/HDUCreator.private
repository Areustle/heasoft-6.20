/*! \class HDUCreator

        \brief HDU factory class. Implementation of the Factory Method.
        
        Creates concrete PrimaryHDU<T>,  ImageExt<T>, AsciiTable, or BinTable objects
        depending on inputs. Related to those classes by friendship.
        
        This class is not intended to be called directly by users of the library. Documentation
        is provided here for reference only. HDUCreator objects are called into existence
        by any method that requires the creation of a new HDU object [e.g. FITS::addImage(...)].
        
        HDUCreators cannot be copied, assigned or compared.
        
        \todo make HDUCreator constructor private and give FITS class access.


*/

/*! \class HDUCreator::HDUNameRequired

        \brief exception thrown by HDUCreator if the name of the HDU is not specified when required.
        

*/



/*! \fn      HDUCreator::HDUCreator (FITS& p);

\brief Constructor for HDU factory

      A FITS object reference is a required argument, specifying that the factory object
      creates HDUs in the corresponding FITS object. Th

*/


/*! \fn      HDUCreator::~HDUCreator();

\brief destructor

*/



/*! \fn       HDU * HDUCreator::getHdu (const string& hduName, bool readDataFlag = false, const std::vector<string> &keys = std::vector<string>(), bool primary = false, int version = 0) throw (FitsException&);

\brief return a pointer to an existing HDU specified by name and optionally by version.

       arguments readDataFlag and keys are passed to the constructor of the HDU to be created.
       see PrimaryHDU, ImageExt, AsciiTable and BinTable for details.

*/


/*! \fn      HDU * HDUCreator::createImage (bool primary, int bitpix, int naxis, const valarray<long>& naxes, const string &name = string(""), int version = 0) throw (FitsException&);

\brief return a pointer to a new Image HDU. 

        Should be called by writing constructor with primary == true, and by methods
        adding Image extensions with primary == false. 
        
        See PrimaryHDU and ImageExt constructors for further details. 

*/

/*! \fn      void HDUCreator::reset ();

\brief reset creator's internal HDU pointer.

        HDUCreator will only create an object if this pointer is initialized.

*/

/*! \fn      HDU * HDUCreator::createTable (const string &name, HduType xtype, int rows, const std::vector<ValueType>& colType = std::vector<ValueType>(), const std::vector<string>& colName = std::vector<string>(), const std::vector<string> colFmt = std::vector<string>(), const std::vector<string> colUnit = std::vector<string>(), int version = 0) throw (FitsException&);

\brief return a pointer to a new Table HDU

        The table type (Ascii or Binary) is specified by the xtype argument). Other parameters
        are as specified for the AsciiTable and BinTable writing constructors. 

*/

/*! \fn      HDU * HDUCreator::getHdu (int index = 1, bool readDataFlag = false, const std::vector<string> &keys = std::vector<string>()) throw (FitsException&);
      

\brief return a pointer to an HDU read from the fitsfile represented by FITS object.

       This version allows the user to specify the HDU by HDU number.

*/


/*! \fn      HDU * HDUCreator::MakeImage (const string &name, int bpix, int naxis, const valarray<long>& naxes, int version = 0, bool primary = false) throw (FitsException&);

\brief internal implementation of createImage

*/

/*! \fn      HDU * HDUCreator::Make (const string& hduName, bool readDataFlag = false, const std::vector<string> &keys = std::vector<string>(), bool primary = true, int version = 0) throw (FitsException&);

\brief internal implementation of getHdu(hduName,...)

*/

/*! \fn      HDU * HDUCreator::MakeTable (const string &name, HduType xtype, int rows, const std::vector<ValueType> colType, const std::vector<string>& colName, const std::vector<string> colFmt, const std::vector<string> colUnit, int version) throw (FitsException&);

\brief internal implementation of createTable

*/

/*! \fn      HDU * HDUCreator::Make (int index, bool readDataFlag = false, const std::vector<string> &keys = std::vector<string>()) throw (FitsException&);

\brief internal implementation of getHdu(index,...)

The main implementation is in Make(const string&,...). 
This version just gets a name and calls the other version.

   

*/


/*! \class ColumnCreator
 
    \brief abstract base class for concrete Factory methods creating Column objects.
    
    The scheme is that the Column Creator base class is used to provide static methods
    that can instantiate Column objects by supplying the appropriate data type 
    information.
    
    templated subclasses (NewColumn, NewVectorColumn) are provided to create Column 
    objects from new data and add them to specified HDU (Table) objects.
    
    Factory methods are described in Design Patterns (Gamma et. al. 1995), the
    standard work on design patterns.

*/       
        
/*! \fn      ColumnCreator::ColumnCreator();

    \brief default constructor.

*/

/*!   \fn   virtual Column * ColumnCreator::createColumn (const int index, const string &name, const string &format, const string &unit, const long repeat, const long width, const string &comment, const int  decimals = 0);

         \brief function for creating new Column objects.
                 
        see the Column class for an explanation of the parameters. In general they
        are similar to those of the corresponding constructor.
*/
        
/*! \fn      void ColumnCreator::reset ();

    \brief  reset the Factory's internal result pointer.
*/
        
/*!  \fn    static Column * ColumnCreator::getColumn (Table* p, int number, const string& name, const string& format, const string& unit = "");

    \brief function that returns a Column from an existing file based on user 
           supplied inputs.
            
    This function is static because there is no need to create a ColumnCreator
    object in order to make a Column. Then, this class can be abstract too,
    thereby forbidding the instantiation of a Column of unspecified data type.
            
            
    see the Column class for an explanation of the parameters. In general they
    are similar to those of the corresponding constructor.
*/
        
        
/*! \fn     virtual Column * ColumnCreator::MakeColumn (const int index, const string &name, const string &format, const string &unit, const long repeat, const long width, const string &comment = "", const int decimals = 0) = 0;
 
    \brief  internal (private) implementation of createColumn
       
    The separation of the task of creating a new column into public and private
    parts is a use of the Template method whereby subclasses later added can
    reimplement the guts of an operation without changing the calling code
    as new subclasses are added.
            
    In this case, note that createColumn doesn't need to be re-implemented (although
    it is currently virtual).
            
    \todo determine whether ColumnCreator::createColumn has to be virtual.
   
*/

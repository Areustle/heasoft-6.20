Preparing a new release distribution for CCfits:

Note that for the CCfits packaged with HEAsoft, its version number is
hardcoded into the heacore/BUILD_DIR files hd_config_info and 
Makefile-CCfits.

1) Export the headas repository version of CCfits into a new directory:

    cvs export -D"1 second ago" -d newDirectory headas/heacore/CCfits
    
2) autogen (autoconf, autoheader, automake):

   [This step is not always necessary]

   If significant changes have been made to CCfits (especially if new
   source files have been added), you may want to generate a new
   configure script (also necessary if you've modified configure.in),
   Makefile.in, or config.h.in by running the "autogen" script contained
   in the top-level CCfits directory.  autogen is a UNIX shell script
   that runs a series of commands in a particular order.  It requires
   automake, autoconf and libtool to be installed on your system.

   If you have only modified configure.in to change the version number,
   you can just run autoconf by hand instead.

   Note the "AUTOMAKE_OPTIONS" line in the Makefile.am (from which
   Makefile.in is generated): automatic dependency generation - which
   is only understood by GCC - may be turned off by uncommenting the
   "no-dependencies" option (i.e. remove the "#" in front of it):

	AUTOMAKE_OPTIONS = foreign # no-dependencies

   If you leave it out, some options will be passed to compiler that it
   might not understand.  The Sun C++ compiler generates only a warning
   but other compilers may treat it as an error.  By default it is currently
   left out (i.e. dependency generation is turned on).

   Note that autogen will replace files in the CCfits/config/ directory with
   symbolic links to versions of those files in /usr/share/automake-X.X.X/
   and /usr/share/libtool/.  Remove these links and replace them with
   updated versions of those files, if necessary.

   ** Note that you should also update the CCfits version number in the
      configure.in file before running autogen.

3) configure:

   Note that the configure script assumes it is running for a stand-alone
   CCfits and not the repository version.  Therefore an un-numbered
   libcfitsio symbolic link should be placed in $HEADAS/lib pointing
   to the numbered version.  See README.INSTALL for more details.
   
   Running configure will also generate Doxygen from Doxygen.in.

4) Documentation:

   ** New release notes should be entered into doc/CCfits.txt **
   
   Create the manual in html by running

     gmake docs

   (or by running doxygen by hand)

   This will fill the /html subdirectory with generated html files.
   It will also fill the /latex directory with newly generated tex files.
   The tool 'doxygen' (http://www.doxygen.org) is required to create the
   documentation.
   
   To create POSTSCRIPT and PDF versions of the manual, do the following
   (as following the instructions on the Doxygen website ["gmake ps"
   and "gmake pdf"] doesn't seem to work):

     cd latex
     mv refman.tex CCfits.tex
     
     latex CCfits  // this uses CCfits.tex rather than refman.tex.
     makeindex CCfits
     latex CCfits
     
     (optional POSTSCRIPT:)
     dvips -o CCfits-[version].ps CCfits

   You need to run latex multiple times to create the index and resolve
   references.

   PDF:
     pdflatex CCfits
     (this may require another makeindex/pdflatex combo to get the end 
       index right)
     mv CCfits.pdf CCfits-[version].pdf 

5) Fill in missing alt tags in doxygen-generated html, and create
   html tar file.
   
   The repository contains 2 perl scripts in the /html directory,
   ccfitschange_sff.pl and the sub-script support_subs.pl.  These will go 
   through every file and add some generic alt text for each class in the 
   inheritance diagrams that don't already have any.
   
   To supply all the files as stdin to ccfitschange_sff.pl:
     ls > filelist.txt  (but, should remove ccfitschange itself from this list)
     ccfitschange_sff.pl < filelist.txt
     rm -f filelist.txt shuttlechange.*

   Now html can be bundled   
     cd ..
     tar cvf - html >CCfits-html.tar   
     gzip CCfits-html.tar

6) Create the basic distribution tar file:

   Run "gmake dist" to prepare the distribution, which creates
   a "CCfits-[version].tar.gz" tar file.

   Copy this and the html manual tarfile to a new location together.
   The version number should be removed from the directory name before
   everything is finally bundled.

7) Make sure the following additional files are also copied over
   from $HEADAS/../heacore/CCfits:

    CCfits-[version].pdf
    CCfits-[version].ps
 
8) Unzip html manual files in the new CCfits-[version] directory

   tar zxvf ../CCfits-html.tar.gz

   should create a directory html in CCfits-[version]

9) Finally, re-zip everything, but REMOVE the version number from the
    directory name.  Otherwise, the cookbook program may not find the
    necessary headers.

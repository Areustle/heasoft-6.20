#! /usr/bin/perl

# Print the first part of the main.
################################################################################
print
'#include <cstdio>
#include <cstring>
#include <iostream>
#include <sstream>
#include <string>
#include <typeinfo>
#include "hoops/hoops.h"
#include "hoops/hoops_ape.h"
#include "hoops/hoops_ape_factory.h"
#include "hoops/hoops_par.h"
#include "hoops/hoops_prompt_group.h"

#include "ape/ape_par.h"

static int sLine;
static int sStatus = hoops::P_OK;
static const int ERROR_UNDETECTED = hoops::P_UNEXPECTED + 1;
static const int BAD_CONVERTED_VALUE = ERROR_UNDETECTED + 1;

int SetGlobalStatus (int status) {
  using namespace hoops;
  if (P_OK == sStatus) {
    if (P_OK == status) sStatus = ERROR_UNDETECTED;
    else sStatus = status;
  }
  return sStatus;
}

int main(int argc, char * argv[]) {
  using namespace hoops;
  std::string code[1024];
  std::string std_string;

  for (int ii = 0; ii < 1024; ++ii) {
    std::ostringstream os;
    os << "Code " << ii;
    code[ii] = os.str();
  }
  code[P_OK] = "P_OK";
  code[P_ILLEGAL] = "P_ILLEGAL";
  code[P_OVERFLOW] = "P_OVERFLOW";
  code[P_UNDERFLOW] = "P_UNDERFLOW";
  code[P_BADSIZE] = "P_BADSIZE";
  code[P_PRECISION] = "P_PRECISION";
  code[P_SIGNEDNESS] = "P_SIGNEDNESS";
  code[P_STR_OVERFLOW] = "P_STR_OVERFLOW";
  code[P_STR_INVALID] = "P_STR_INVALID";
  code[P_STR_NULL] = "P_STR_NULL";
  code[P_INFINITE] = "P_INFINITE";
  code[P_UNDEFINED] = "P_UNDEFINED";
  code[P_UNEXPECTED] = "P_UNEXPECTED";
  code[ERROR_UNDETECTED] = "ERROR_UNDETECTED";
  code[BAD_CONVERTED_VALUE] = "BAD_CONVERTED_VALUE";
  code[PAR_INVALID_TYPE] = "PAR_INVALID_TYPE";
  code[PAR_ILLEGAL_CONVERSION] = "PAR_ILLLEGAL_CONVERSION";
  code[PAR_NOT_FOUND] = "PAR_NOT_FOUND";
  code[PAR_FILE_CORRUPT] = "PAR_FILE_CORRUPT";

  std::cout.precision(32);
  std::cerr.precision(32);
  try {
';

# Tests
################################################################################
print "    // Test default constructor.\n";
write_test('std_string = ""', 'Par par_default; std_string = par_default.Value()', 'P_OK', 'std_string', '""', 'std_string.compare("")');

print "    // Test constructors for each par type.\n";
my %tests = (
  'par_bool' => [qw(b yes P_OK true)],
  'par_int' => [qw(i -2000000000 P_OK -2000000000)],
  'par_real' => [qw(r -1.2345678e3 P_OK -1234.5678)],
  'par_char_p' => [qw(s Valid P_OK Valid)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $type = shift @{$tests{$test}};
  my $init = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "std_string = \"\"";
  my $action =
    "Par $var(\"$var\", \"$type\", \"a\", \"$init\"); std_string = $var.Value()";
  my $result = "std_string";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test copy constructor.\n";
my %tests = (
  'par_bool' => [qw(b 1 P_OK true)],
  'par_int' => [qw(i -2000000000 P_OK -2000000000)],
  'par_real' => [qw(r -1.2345678e3 P_OK -1234.5678)],
  'par_char_p' => [qw(s Valid P_OK Valid)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $type = shift @{$tests{$test}};
  my $init = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup =
    "Par ".$var."1(\"$var\", \"$type\", \"a\", \"$init\"); std_string = \"\"";
  my $action = "Par ".$var."2 = ".$var."1; std_string = ".$var."2.Value()";
  my $result = "std_string";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test \"From\" methods.\n";
my %tests = (
  'par_bool' => [qw(0 P_OK false)],
  'par_int' => [qw(-1000000000 P_OK -1000000000)],
  'par_real' => [qw(-8.7654321e3 P_OK -8765.4321)],
  'par_char_p' => [qw(Invalid P_OK Invalid)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $assign = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "";
  my $action = $var."1.From(\"$assign\")";
  my $result = $var."1.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test assignment methods.\n";
my %tests = (
  'par_bool' => [qw(b yes P_OK false)],
  'par_int' => [qw(i -2000000000 P_OK -1000000000)],
  'par_real' => [qw(r -1.2345678e3 P_OK -8765.4321)],
  'par_char_p' => [qw(s Valid P_OK Invalid)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $type = shift @{$tests{$test}};
  my $init = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "Par ".$var."3(\"$var\", \"$type\", \"a\", \"$init\")";
  my $action = $var."3 = ".$var."1";
  my $result = $var."3.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test \"To\" methods.\n";
my %tests = (
  'par_bool' => [qw(P_OK false)],
  'par_int' => [qw(P_OK -1000000000)],
  'par_real' => [qw(P_OK -8765.4321)],
  'par_char_p' => [qw(P_OK Invalid)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "std_string = \"\"";
  my $action = $var."1.To(std_string)";
  my $result = "std_string";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test assignment methods from primitives. (Not exhaustive).\n";
my %tests = (
  'bool' => [qw(100 P_OVERFLOW true)],
  'int' => [qw(1000000000u P_SIGNEDNESS 1000000000)],
  'real' => [qw(-2000000000 P_PRECISION -2000000000)],
);

foreach my $test (sort keys %tests) {
  my $type = $test;
  my $assign = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "par_".$type."3.From(\"0\")";
  my $action = "par_".$type."3 = $assign";
  my $result = "par_".$type."3.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test more assignment methods from primitives. (Not exhaustive).\n";
my %tests = (
  'bool' => [qw(1 P_OK true)],
  'int' => [qw(-1000000000 P_OK -1000000000)],
  'real' => [qw(-2.e32 P_OK -2e+32)],
);

foreach my $test (sort keys %tests) {
  my $type = $test;
  my $assign = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "par_".$type."3.From(\"0\")";
  my $action = "par_".$type."3 = $assign";
  my $result = "par_".$type."3.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test still more assignment methods from primitives. (Not exhaustive).\n";
my %tests = (
  'int' => [qw(-1.2345678e3 P_PRECISION -1234)],
);

foreach my $test (sort keys %tests) {
  my $type = $test;
  my $assign = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "par_".$type."3.From(\"0\")";
  my $action = "par_".$type."3 = $assign";
  my $result = "par_".$type."3.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test assignment methods from undefined primitives..\n";
my %tests = (
  'bool' => [qw("Indef" P_OK Indef)],
  'int' => [qw("undefined" P_OK undefined)],
  'char_p' => [qw("inDef" P_OK inDef)],
  'real' => [qw("undefined" P_OK undefined)],
);

foreach my $test (sort keys %tests) {
  my $type = $test;
  my $assign = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "par_".$type."3.From(\"0\")";
  my $action = "par_".$type."3 = $assign";
  my $result = "par_".$type."3.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test \"To\" methods when value is undefined.\n";
my %tests = (
  'par_bool' => [qw(P_UNDEFINED Indef)],
  'par_int' => [qw(P_UNDEFINED undefined)],
  'par_real' => [qw(P_UNDEFINED undefined)],
  'par_char_p' => [qw(P_OK inDef)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "std_string = \"\"";
  my $action = $var."3.To(std_string)";
  my $result = "std_string";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test assignment methods from \"infinite\" values..\n";
my %tests = (
  'bool' => [qw("infinity" P_STR_INVALID false)],
  'int' => [qw("inF" P_OK inF)],
  'char_p' => [qw("inF" P_OK inF)],
  'real' => [qw("Inf" P_OK Inf)],
);

foreach my $test (sort keys %tests) {
  my $type = $test;
  my $assign = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "par_".$type."3.From(\"0\")";
  my $action = "par_".$type."3 = $assign";
  my $result = "par_".$type."3.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test \"To\" methods when value is infinite.\n";
my %tests = (
  'par_bool' => [qw(P_OK false)],
  'par_int' => [qw(P_INFINITE inF)],
  'par_real' => [qw(P_INFINITE Inf)],
  'par_char_p' => [qw(P_OK inF)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "std_string = \"\"";
  my $action = $var."3.To(std_string)";
  my $result = "std_string";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test assignment methods from \"nan\" values..\n";
my %tests = (
  'bool' => [qw("Nan" P_STR_INVALID false)],
  'int' => [qw("naN" P_OK naN)],
  'char_p' => [qw("nAn" P_OK nAn)],
  'real' => [qw("NaN" P_OK NaN)],
);

foreach my $test (sort keys %tests) {
  my $type = $test;
  my $assign = shift @{$tests{$test}};
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "par_".$type."3.From(\"0\")";
  my $action = "par_".$type."3 = $assign;";
  my $result = "par_".$type."3.Value()";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

print "    // Test \"To\" methods when value is nan.\n";
my %tests = (
  'par_bool' => [qw(P_OK false)],
  'par_int' => [qw(P_INFINITE naN)],
  'par_real' => [qw(P_INFINITE NaN)],
  'par_char_p' => [qw(P_OK nAn)]
);

foreach my $test (sort keys %tests) {
  my $var = $test;
  my $status = shift @{$tests{$test}};
  my $correct_result = shift @{$tests{$test}};

  my $setup = "std_string = \"\"";
  my $action = $var."3.To(std_string)";
  my $result = "std_string";
  my $compare = "$result.compare(\"$correct_result\")";

  write_test(
    $setup,
    $action,
    $status,
    $result,
    $correct_result,
    $compare
  );
}

################################################################################

# Test ParFile class
################################################################################
print <<EOT;

    IParFile * file = HoopsApeFileFactory().NewIParFile("hoops_par_test");

    file->Load();

    GenParItor it;

    for (it = file->begin(); it != file->end(); ++it) {
      std::cout << ':' << *(*it) << ':' << std::endl;
    }

    IParPrompt * prompt = HoopsApePromptFactory().NewIParPrompt(argc - 1, argv + 1, "hoops_par_test");

    prompt->Prompt("prompt");
    if (!(bool) prompt->Group()["prompt"]) ape_par_set_default_prompt_style(eNoPrompt);

    prompt->Prompt();

    std::string name;
    for (it = prompt->Group().begin(); it != prompt->Group().end(); ++it) {
      name = (*it)->Name();
      if (name.empty()) continue;
      if ((*it)->Value().compare(file->Group()[name].Value())) {
        std::cout << "Before prompting, parameter " << name <<
          " was :" << file->Group()[name].Value() << ":" << std::endl <<
          "After prompting, value is :" << (*it)->Value() << ":" << std::endl;
      }
    }

    // Copy prompted parameters back to the file object.
    file->Group() = prompt->Group();

    // Save prompted parameters.
    file->Save();

    delete prompt;
    delete file;
EOT
################################################################################

# Test ParPromptGroup class
################################################################################
print <<EOT;

    char test_bool_arg[] = "test_bool=no";
    char test_int_arg[] = "test_int=2";
    char test_indef_arg[] = "test_real=INDEF";
    char *new_argv[] = { test_bool_arg, test_int_arg, test_indef_arg, 0 };
    ParPromptGroup par_prompt_group(3, new_argv, "hoops_par_test");
    bool test_bool = par_prompt_group["test_bool"];
    if (test_bool) {
      std::cerr << "ERROR: ParPromptGroup did not accept the command line " <<
        "value for parameter test_bool" << std::endl;
      SetGlobalStatus(P_UNEXPECTED);
    }
    // Set test_int to INDEF before continuing with the next steps.
    par_prompt_group["test_int"] = "INDEF";
    try {
      par_prompt_group.Prompt("test_int");
    } catch (Hexception & x) {
      std::cerr << "ERROR: ParPromptGroup::Prompt threw an exception with code " <<
        x.Code() << " after being given test_int=2 on the command line" << std::endl;
      SetGlobalStatus(P_UNEXPECTED);
    }
    try {
      par_prompt_group["test_int"].operator int(); // Call operator int
    } catch (Hexception & x) {
      std::cerr << "ERROR: ParPromptGroup::operator int threw an exception with code " <<
        x.Code() << " after being given test_int=2 on the command line" << std::endl;
      SetGlobalStatus(P_UNEXPECTED);
    }
    try {
      par_prompt_group.Prompt("test_real");
      std::cerr << "ERROR: ParPromptGroup did not throw an exception after " <<
        "being given INDEF at a prompt" << std::endl;
      SetGlobalStatus(P_UNEXPECTED);
    } catch (Hexception & x) {
      if (P_UNDEFINED != x.Code()) {
        std::cerr << "ERROR: ParPromptGroup threw an exception with code " <<
          x.Code() << ", not " << P_UNDEFINED <<
          " after being given INDEF at a prompt" << std::endl;
        SetGlobalStatus(P_UNEXPECTED);
      }
    }
    try {
      float test_real = par_prompt_group["test_real"]; // Call operator float
      std::cerr << "ERROR: ParPromptGroup did not throw an exception when " <<
        "converting INDEF to a float, returned value " << test_real <<
        std::endl;
      SetGlobalStatus(P_UNEXPECTED);
    } catch (Hexception & x) {
      if (P_UNDEFINED != x.Code()) {
        std::cerr << "ERROR: ParPromptGroup threw an exception with code " <<
          x.Code() << ", not " << P_UNDEFINED <<
          " while converting INDEF to a float" << std::endl;
        SetGlobalStatus(P_UNEXPECTED);
      }
    }
    par_prompt_group.Save();
EOT
################################################################################

# Print the last part of the main.
################################################################################

print '
  } catch (const ApeException & x) {
    SetGlobalStatus(ERROR_UNDETECTED);
    std::cerr << "An unexpected ApeException was caught at the top level:\n\t";
    if (0 <= x.Code() && 1024 > x.Code()) std::cerr << code[x.Code()];
    else std::cerr << x.Code();
    std::cerr << ": " << x.what() << std::endl;
  } catch (const Hexception & x) {
    SetGlobalStatus(ERROR_UNDETECTED);
    std::cerr << "An unexpected Hexception was caught at the top level:\n\t";
    if (0 <= x.Code() && 1024 > x.Code()) std::cerr << code[x.Code()];
    else std::cerr << x.Code();
    std::cerr << ": " << x.what() << std::endl;
  } catch (const std::exception & x) {
    SetGlobalStatus(ERROR_UNDETECTED);
    std::cerr << "An unexpected std::exception of type " << typeid(x).name() <<
      " was caught at the top level:\n\t" << x.what() << std::endl;
  } catch (...) {
    SetGlobalStatus(ERROR_UNDETECTED);
    std::cerr << "A completely unexpected exception was caught at the top level!" << std::endl;
  }

  // Final status check and report.
  if (P_OK == sStatus)
    std::cout << "Test succeeded." << std::endl;
  else if (0 <= sStatus && 1024 > sStatus)
    std::cerr << "Test failed with error " << code[sStatus] << std::endl;
  else
    std::cerr << "Test failed with error " << sStatus << std::endl;

  return sStatus;
}
';

################################################################################
sub write_test {
  my $setup = shift @_;
  my $action = shift @_;
  my $status = shift @_;
  my $result = shift @_;
  my $correct_result = shift @_;
  my $compare = shift @_;

  my $name = $action;
  $name =~ s:":\\":g;

  my $test;
  if ($name =~ /\S/) { $test = "$name "; }
  $test .= "at line \" << sLine << \"";

  if ($status eq "P_OK") {
    if ($setup =~ /\S/) { print "    $setup;\n"; }
    print <<EOT;
    try {
      $action; sLine = __LINE__;
    } catch (const Hexception & x) {
      std::cerr << "ERROR: Test $test threw exception " << code[x.Code()] << "." << std::endl;
      std::cerr << x.what() << std::endl;
      SetGlobalStatus(x.Code());
    }
    if ($compare) {
      std::cerr << "ERROR: Test $test produced result \\"" << $result << "\\", not \\"" << "$correct_result" << "\\"." << std::endl;
      SetGlobalStatus(P_UNEXPECTED);
    }
EOT
  } else {
    if ($setup =~ /\S/) { print "    $setup;\n"; }
    print <<EOT;
    try {
      $action; sLine = __LINE__;
      std::cerr << "ERROR: Test $test did not throw an exception." << std::endl;
      SetGlobalStatus(ERROR_UNDETECTED);
    } catch (const Hexception & x) {
      if ($status != x.Code()) {
        std::cerr << "ERROR: Test $test threw exception " << code[x.Code()] << ", not " << code[$status] << "." << std::endl;
        std::cerr << x.what() << std::endl;
        SetGlobalStatus(ERROR_UNDETECTED);
      }
    }
    if ($compare) {
      std::cerr << "ERROR: Test $test produced result \\"" << $result << "\\", not \\"" << "$correct_result" << "\\"." << std::endl;
      SetGlobalStatus(P_UNEXPECTED);
    }
EOT
  }
}
################################################################################

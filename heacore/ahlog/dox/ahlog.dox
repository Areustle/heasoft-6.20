/**
\defgroup mod_ahlog Logging Library (ahlog)
@ingroup mod_gen_lib

This module is a thin wrapper to st_stream and provides a logger for the Astro-H
libraries.  There are four primary message streams: OUTPUT, INFO, WARN, and ERR.
The first two are sent to stdout, WARN is sent to stlog, and ERR goes to sterr.
While all message streams always go to the log file, a chatter parameter 
controls which of the streams are written to screen:

 - 0, nothing;
 - 1, OUTPUT and ERR;
 - 2, OUTPUT, ERR, and HIGH priority INFO and WARN messages; and
 - 3, OUTPUT, ERR, and all INFO and WARN messages.

A special stream, DEBUG, delivers debugging messages to stderr.  This stream is
controlled by a separate switch which can be specified at run time.

\section Usage

Initializing the logger is a simple matter.  A single call to ahlog::setup() is
made at the beginning of the main program with arguments giving 1) the name of
the program, 2) the name of the log file, 3) the chatter level, and 4) the debug
state.  The second parameter can take a normal filename, but has a couple 
special values:
 - "NONE" -- write nothing to a log file
 - "DEFAULT" -- use the value of the first argument appended with ".log"
Additionally, the filename (or DEFAULT) can be preceded with an exclamation
point (!) to indicate the the log file should be overwritten (clobbered); 
otherwise, the log file is appended.  Note: an empty string for the log filename
will result in an error.

In the example below, we are using a chatter level of 2 and turn off debug
statements.  The log file will be called testahlog.log and any previous log will
be overwritten.

\code
ahlog::setup("testahlog","!DEFAULT",2,false)
\endcode

The setup function creates a global variable in the ahlog namespace which is
accessed by macros to post log messages.  In practice, if using the startUp() 
and shutDown() functions from ahgen, then no call to setup() is needed.  As 
the arguments for setup() are known from the standard parameters, the common 
startup function can be safely used.  A call to shutDown() will close the log 
file.

Once initialized, the following macros can be used to post messages:

 - AH_OUTPUT;
 - AH_INFO(X), where X is the priority (ahlog::LOW or ahlog::HIGH);
 - AH_WARN(X), where X is the same as in AH_INFO;
 - AH_ERR; and
 - AH_DEBUG.

These macros accept streaming operators to handle the output, as in this
example:

\code
AH_OUT << "This is an output message." << std::endl;
AH_INFO(ahlog::LOW) << "This is LOW priority information." << std::endl;
\endcode 

Macros have also been created for throwing errors: one macro per exception type.
These allow for a stack trace to be printed if in debug mode.  The current list
of these macros is:

 - AH_THROW_RUNTIME(X)
 - AH_THROW_LOGIC(X)

where X is the error message to be eventually posted with AH_ERR when the
exception is caught.

*/

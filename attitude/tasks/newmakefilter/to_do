Null values -

    Currently we pick a TNULL value for integer columns if one is not present
    in the input file. But this could interfere with legitimate values.
    One solution might be to promote the column size to the next biggest type,
    and then pick a NULL value out of range in the original column. 4 byte integers
    could be promoted to doubles. Of course this might not be desirable for
    everybody, so it should be optional. 
    
Other extrapolation methods

    Currently the TwoPointInterp classes act the same way no matter how large
    the gap between two rows in the input file. It would be good to add some kind of
    time limit, so that a value only remains valid for so long after a row. 
    For step interpolation, we would handle this by modifying the advance method
    to insert a dummy null row if the time between rows is too large.
    For the linear interpolation method we would just return null from get_value
    if the time gap was too big. We would probably implement both of these as
    subclasses of StepInterpolation and LinearInterp. As for the config file
    interface, I'm thinking we would use things like "step(32)", and 
    "linear(32)", where the "32" is the expiration time. We would keep the
    current "D" and "I" for backwards compatibility. Using "step" and "linear"
    without the time argument would give the current non-expiring versions.
    
    We could add spline interpolation, though I'm not so sure there's much point to
    it. 
    
    We could add interpolation which filled in values to produce a desired
    accuracy when translated to the step functions in the filter file. 
    Which is more important accuracy in time or in value??
    

General cleanup
    there's still some general cleanup to do, like rename files to have the
    same name as the class they contain, change char*'s to strings, make things
    const correct, etc.


#!/usr/bin/perl
use Getopt::Std;

getopt();
if (defined $opt_h) { print<<EOHELP;

day2time converts a time offset (in days) relative to a reference date/time
to an absolute date/time.

EOHELP
exit 0;
}

 &set_toolname("day2time");
 &set_toolversion("1.0");

 $offset =0;
 $leapfile =0;
 $datezero =0;
 $timezero =0;
 $date =0;
 $time =0;
 $mjd =0;
 $mode =0;

 &day2time_getpar();


 $status = &day2time_work($offset,$leapfile,
                 $datezero,$timezero,$date,$time,$mjd,$mode);

 if( $status) {
    print "Error running day2time\n";
    exit(-1);
 }
 else {
    &day2time_setpar();
 }
 


sub day2time_work {

   my @val =@_;
   chop($val[0]);
   chop($val[1]);
   chop($val[2]);
   chop($val[3]);
   $val[0] *= 86400;

   my $output= `sec2time offset=$val[0] leapfile=$val[1] datezero=$val[2] timezero=$val[3] mode=$val[7]`;
   chop($output);
   my @results =split(/ +/,$output);
   $results[3] /=86400;
   $date = $results[14];
   $time = $results[15];
   $mjd = $results[20];

   print "@results\n";

   return 0;

}


sub day2time_getpar {

 if (&get_par("offset",\$offset,0)) {
    print "Error getting parameter \"offset\"\n";
    exit(-1)
 }
 if (&get_par("leapfile",\$leapfile,1)){
    print "Error getting parameter \"leapfile\"\n";
    exit(-1)
 }
 if (&get_par("datezero",\$datezero,2)) {
    print "Error getting parameter \"datezero\"\n";
    exit(-1)
 }
 if(&get_par("timezero",\$timezero,3)) {
    print "Error getting parameter \"timezero\"\n";
    exit(-1)
 }
 if (&get_par("date",\$date,4)) {
    print "Error getting parameter \"date\"\n";
    exit(-1)
 }
 if(&get_par("time",\$time,5)) {
    print "Error getting parameter \"time\"\n";
    exit(-1)
 }
 if (&get_par("mjd",\$mjd,6)) {
    print "Error getting parameter \"mjd\"\n";
    exit(-1)
 }
 if(&get_par("mode",\$mode,7)) {
    print "Error getting parameter \"mode\"\n";
    exit(-1)
 }


}

sub day2time_setpar {
  &set_par("date",$date);
  &set_par("time",$time);
  &set_par("mjd",$mjd);
}

sub set_par {
   my ($name,$val) =@_;
   my $status =0;
   $status =`pquery $toolname $name $name=$val`;
   return $status;
}


sub set_toolname {
   my ($var) =@_;
   $toolname =$var;
}

sub set_toolversion {
   my ($var) =@_;
   $toolversion =$var;
}

sub get_par {
   my ($name,$valref,$num) =@_;
   my $status =0;

   if ($#ARGV < $num) {
   $$valref = `pquery $toolname $name `;
   }
   elsif ( $ARGV[$num] =~ /\=/ ) {
     if ( $ARGV[$num] =~ /$name\=/ ) {
       $$valref = `pquery $toolname $name $ARGV[$num]`;
     }
     else {
       print "Parameter duplicated, possibly ambiguous: $name\n";
       $status =1;
     }
   }
   else {
   $$valref = `pquery $toolname $name $name=$ARGV[$num]`;
   }

   return $status;

}
 


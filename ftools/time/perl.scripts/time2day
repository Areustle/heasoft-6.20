#!/usr/bin/perl
use Getopt::Std;

getopt();
if (defined $opt_h) { print<<EOHELP;

time2day calculates time (in days) between input and reference date/time

EOHELP
exit 0;
}

 &set_toolname("time2day");
 &set_toolversion("1.0");

 $offset =0;
 $leapfile =0;
 $datezero =0;
 $timezero =0;
 $date =0;
 $time =0;
 $mjd =0;
 $mode =0;

 &time2day_getpar();


 $status = &time2day_work($offset,$leapfile,
                 $datezero,$timezero,$date,$time,$mjd,$mode);

 if( $status) {
    print "Error running time2day\n";
    exit(-1);
 }
 else {
    &time2day_setpar();
 }

sub time2day_work {

   my @val =@_;
   my $output =0;
   chop($val[0]);
   chop($val[1]);
   chop($val[2]);
   chop($val[3]);
   chop($val[4]);
   chop($val[5]);
   chop($val[6]);

   $output = `time2sec leapfile=$val[1] datezero=$val[2] timezero=$val[3] date=$val[4] time=$val[5]
mode=$val[6]`;
   chop($output);
   $output =~ s/seconds/days/;
   my @results =split(/ +/,$output);
   $results[10] /=86400;
   $offset = $results[10];
   print "@results \n";


   return 0;

}

 
sub time2day_getpar {

 if (&get_par("date",\$date,0)) {
    print "Error getting parameter \"date\"\n";
    exit(-1);
 }
 if (&get_par("time",\$time,1)){
    print "Error getting parameter \"time\"\n";
    exit(-1);
 }
 if (&get_par("leapfile",\$leapfile,2)){
    print "Error getting parameter \"leapfile\"\n";
    exit(-1);
 }
 if (&get_par("offset",\$offset,3)){
    print "Error getting parameter \"offset\"\n";
    exit(-1);
 }
 if (&get_par("datezero",\$datezero,4)) {
    print "Error getting parameter \"datezero\"\n";
    exit(-1);
 }
 if(&get_par("timezero",\$timezero,5)) {
    print "Error getting parameter \"timezero\"\n";
    exit(-1);
 }
 if(&get_par("mode",\$mode,6)) {
    print "Error getting parameter \"mode\"\n";
    exit(-1);
 }

}

sub time2day_setpar {
  &set_par("offset",$offset);
}

sub set_par {
   my ($name,$val) =@_;
   my $status =0;
   $status =`pquery $toolname $name $name=$val`;
   return $status;
}


sub set_toolname {
   my ($var) =@_;
   $toolname =$var;
}

sub set_toolversion {
   my ($var) =@_;
   $toolversion =$var;
}

sub get_par {
   my ($name,$valref,$num) =@_;
   my $status =0;

   if ($#ARGV < $num) {
   $$valref = `pquery $toolname $name `;
   }
   elsif ( $ARGV[$num] =~ /\=/ ) {
     if ( $ARGV[$num] =~ /$name\=/ ) {
       $$valref = `pquery $toolname $name $ARGV[$num]`;
     }
     else {
       print "Parameter duplicated, possibly ambiguous: $name\n";
       $status =1;
     }
   }
   else {
   $$valref = `pquery $toolname $name $name=$ARGV[$num]`;
   }


   return $status;

}
 


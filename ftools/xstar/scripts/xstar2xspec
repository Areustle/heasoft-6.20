#! /lheadev/bridgman/xstar/OSF1_4.0_alpha/bin/lhea-perl
#
# xstar2xspec
#
# Generate and manage multiple XSTAR runs to build atable and mtable models
# for analysis by XSPEC.
#
#
# Usage:
#   xstar2xspec {options}
#
#   Options:
#     -restart    Continues the XSTAR2XSPEC run using the previous run.
#                 Note that it does *NOT* check the integrity of the
#                 table files from the terminated run.  This is the user's
#                 responsibility.
#     -save       Save the spectral FITS files, modifying the file name to
#                 include the value of the loopcontrol variable for better
#                 identification.  Note this can use gobs of disk space.
#     -verbose    Print gobs of informational(?) messages on the program run.
#
# Written by: W.T. Bridgman, RITSS, March 1999
#
# History:
#  v1.0 
#

# record starting time
$starttime = time;

# Perl libraries required by FTOOLS
require "utils.pl";
require "getparm.pl";

# initialize times variable
$totaltime=$times;

# initialize file names generated by xstar2xspec
$PROCESSFILE="xstinitable.lis";
$PROCESSTEMP="xstinitable.tmp";
$INITFITS="xstinitable.fits";
$ATABLE1="xout_aout.fits";
$ATABLE2="xout_ain.fits";
$MTABLE="xout_mtable.fits";
$XSTAR2XSPECLOG="xstar2xspec.log";
# initialize file names generated by xstar
$SPECTRALFILE="xout_spect1.fits";
$XSTARLOG="xout_step.log";

$SLENWARN=800;
$SLENERROR=1000;

# clear option flags
$HELP=0;
$RESTART=0;
$SAVEFILES=0;
$VERBOSE=0;
# loop over the argument list and set the appropriate flags
for($ARGNUM=0;$ARGNUM<=$#ARGV;$ARGNUM++){
    if($ARGV[$ARGNUM] eq "-h") {$HELP=1;}
    if($ARGV[$ARGNUM] eq "-restart") {$RESTART=1;}
    if($ARGV[$ARGNUM] eq "-save"){$SAVEFILES=1;}
    if($ARGV[$ARGNUM] eq "-verbose"){$VERBOSE=1;}
}
if ($VERBOSE){$ENV{XSTARDEBUG}=1;}

if($HELP) {
print <<EOHELP;
Usage:
   xstar2xspec {options}

   Options:
     -h          Print this help 
     -restart    Continues the XSTAR2XSPEC run using the previous run.
                 Note that it does *NOT* check the integrity of the
                 table files from the terminated run.  This is the user's
                 responsibility.
     -save       Save the spectral FITS files, modifying the file name to
                 include the value of the loopcontrol variable for better
                 identification.  Note this can use gobs of disk space.
     -verbose    Print gobs of informational(?) messages on the program run.
EOHELP
exit 0;
}

# restart option activated?
if($RESTART) {
   printf "XSTAR2XSPEC Restart Option\n\n";
   printf "IMPORTANT NOTE: This option does *NOT* check the integrity\n";
   printf "of the table files from the terminated run.\n\n\n";
} else {
   # cleanup from previous run
   system("rm $PROCESSFILE");
   system("rm $INITFITS");
   system("rm $XSTAR2XSPECLOG");

   # call xstinitable FTOOL & generate xstinitable.lis 
   # and xstinitable.fits files
   printf "XSTAR2XSPEC: Initialize the Multiple XSTAR run...\n";
   #system("pset xstinitable"); # set values in parameter file
   &GetParms;

   @RC = &runcom("xstinitable mode=h","errhandler","xstinitable"); # run with .par file values
   if ($VERBOSE){print "xstinitable returns: ",@RC;}

   # do the xstinitable.lis & xstinitable.fits files exist?
   # if not, exit with error
   open(HANDLE,"$PROCESSFILE")
       ||die "Can't find $PROCESSFILE!\n";
   close(HANDLE);
   open(HANDLE,"$INITFITS")
       ||die "Can't find $INITFITS!\n";
   close(HANDLE);
   # if so, continue with the process

   # duplicate the xstinitable.fits file in preparation for its use as 
   # the base level atables & mtable files
   system("cp $INITFITS $ATABLE1");
   system("cp $INITFITS $ATABLE2");
   system("cp $INITFITS $MTABLE");
}

# entry point for restart
$OUTFILE=$PROCESSTEMP;
$DONE=0; # 0=false

printf "XSTAR2XSPEC: Entering XSTAR2XSPEC Main Processing Loop...\n";
while(!$DONE) {
        # open as read-only
	open(FILEHANDLE,"<$PROCESSFILE")
	    ||die "XSTAR2XSPEC: Can't open $PROCESSFILE\n"; 
	# read first string of $PROCESSFILE
	if(eof(FILEHANDLE)){ $DONE=1;} # 1=true
	$XSTARCOMMAND=<FILEHANDLE>; # read the first line
	close(FILEHANDLE);
	
	# submit XSTAR command
        $SCLEN=length($XSTARCOMMAND);
        if($SCLEN>$SLENERROR){
	    printf "XSTAR2XSPEC: FATAL ERROR!  This command line is $SCLEN characters long.\n";
	    printf "XSTAR2XSPEC: The maximum allowed is $SLENERROR!\n";
            exit; # terminate with extreme prejudice
        }
        if($SCLEN>$SLENWARN){
	    printf "XSTAR2XSPEC: WARNING! This command line is $SLEN characters long.\n";
	    printf "XSTAR2XSPEC: WARNING! The maximum limit is $SLENERROR!\n";
	}

	$POS=index($XSTARCOMMAND,"loopcontrol=");
	$NUM=int(substr($XSTARCOMMAND,$POS+12));
        printf "XSTAR2XSPEC: Executing Pass #%d\n",$NUM;

      	if($VERBOSE){print $XSTARCOMMAND;}
        # call FTOOL using runcom which redirects stderr output
        @RC=&runcom($XSTARCOMMAND,"errhandler","xstar");
        printf "xstar returns: ",@RC;
        print "xstar returns: ",@RC;

        # append xstar log to master log file
	if($VERBOSE){print "XSTAR2XSPEC: Appending xstar log file\n";}
	open(APPENDLOG,">>$XSTAR2XSPECLOG")
	    ||die "XSTAR2XSPEC: Can't open $XSTAR2XSPECLOG.  Exiting...\n";
        open(LOGFILE,"<$XSTARLOG")
	    ||die "XSTAR2XSPEC: Can't find $XSTARLOG file.  Exiting...\n";
	printf APPENDLOG "=============================================\n";
	printf APPENDLOG "Command Line:\n";
        printf APPENDLOG "$XSTARCOMMAND\n\nXSTAR Log:";
        while(!eof(LOGFILE)){
	    $temp=<LOGFILE>;
	    printf APPENDLOG $temp;
	}
	close(APPENDLOG);
	close(LOGFILE);

        # build entry for mtable & atables
        if($VERBOSE) {print "XSTAR2XSPEC: Updating ATABLES & MTABLE.\n";}
        @RC=&runcom("xstar2table","errhandler","xstar2table");
        print "xstar2table returns: ",@RC;
        printf "xstar2table returns: ",@RC;
        print @RC;

	# remove first line from $PROCESSFILE
	open(INHANDLE,"<$PROCESSFILE")
	    ||die "XSTAR2XSPEC: Can't open $PROCESSFILE\n";
        open(OUTHANDLE,">$OUTFILE")
	    ||die "XSTAR2XSPEC: Can't open $OUTFILE\n";
        $LINE=<INHANDLE>; # read first line to discard it
        $LINECOUNTER=0;
        while(!eof(INHANDLE)){
	    $temp=<INHANDLE>;
	    printf OUTHANDLE $temp;
            $LINECOUNTER++;
            } # end while
        close(INHANDLE);
        close(OUTHANDLE);
        printf "XSTAR2XSPEC: $LINECOUNTER runs remaining to process.\n";
        $RC=`cp $OUTFILE $PROCESSFILE`; # rename output file
        if($RC) {
	    printf "XSTAR2XSPEC: Error transcribing command file: $RC\n";
	}

        if($LINECOUNTER==0) {$DONE=1;} # end of loop

        # if option set to save files, do it here
        if($SAVEFILES) {
	    $POS=index($XSTARCOMMAND,"loopcontrol=");
	    $NUM=int(substr($XSTARCOMMAND,$POS+12));
	    $SNUM=sprintf("%04d",$NUM);
	    $POSF=index($SPECTRALFILE,".fits");
	    $NEWSPECFILE=substr($SPECTRALFILE,0,$POSF)."_".$SNUM.".fits";
	    $RC=`cp $SPECTRALFILE $NEWSPECFILE`; # copy file to new name
        }

        # cleanup after this run
        $RC=`rm xout_abund1.fits`;
	$RC=`rm xout_detail.fits`;
        $RC=`rm $SPECTRALFILE`;
        $RC=`rm xout_step.lis`;
	$RC=`rm $XSTARLOG`;

	} # end of 'while' loop

# append closing steps to master log file
open(APPENDLOG,">>$XSTAR2XSPECLOG")
     ||die "XSTAR2XSPEC: Can't open $XSTAR2XSPECLOG.  Exiting...\n";
printf APPENDLOG "=============================================\n";
# compute total run time 
$endtime=time;
$totaltime=$endtime-$starttime;
printf "XSTAR2XSPEC: Execution time: %10.2f seconds\n",$totaltime;
printf "XSTAR2XSPEC: Processing Complete!\n";	
printf APPENDLOG "Execution time: %10.2f seconds\n",$totaltimes;
printf APPENDLOG "XSTAR2XSPEC Processing Complete!\n";	
close(APPENDLOG);

# final cleanup
$RC=`rm $PROCESSFILE`;
$RC=`rm $PROCESSTEMP`;
$RC=`rm $INITFITS`;

# All done!

###################################################
#
# Grab all the parameters for xstar2xspec and set them
# appropriately in the xstinitable parameter file
#
sub GetParms{
    $ftoolname="xstinitable";
    $specFileFlag=0;
    # physical parameter names
    @physparms=("trad","cfrac","temperature","pressure","density","rlrad38",
	    "column","rlogxi","habund","heabund","cabund","nabund","oabund",
	    "neabund","mgabund","siabund","sabund","arabund","caabund",
	    "feabund","niabund");

    # control parameter names
    @ctrlparms=("redshift","nsteps","niter","lwrite","lprint","lstep","npass",
	    "lcpres","emult","taumax","xeemin","critf","vturbi","modelname",
             "loopcontrol","elow","ehigh");

    # enter spectrum type
    $spectrum=&GetParameter($ftoolname,"spectrum",$status);
    #printf("%s=%s (status=%d)\n","spectrum",$spectrum,$status);
    if($spectrum eq "file") {
	$spectrumfile=&GetParameter($ftoolname,"spectrum_file",$status);
	#printf("%s=%s (status=%d)\n","spectrum_file",$spectrumfile,$status);
	$spectrumunits=&GetParameter($ftoolname,"spectun",$status);
	#printf("%s=%s (status=%d)\n","spectun",$spectrumunits,$status);
	$specFileFlag=1;
    }

    # loop over the physical parameters
    foreach $varname (@physparms) {
	# if spectrum file specified, skip 'trad' entry
	if(($varname eq "trad")&&($specFileFlag==1)){ next;}

	$value=&GetParameter($ftoolname,$varname,$status);
        #printf("%s=%s (status=%d)\n",$varname,$value,$status);

        # check parameter type
	$svarname=$varname."typ";
	$type=&GetParameter($ftoolname,$svarname,$status);
        #printf("%s=%s (status=%d)\n",$svarname,$type,$status);

        # if variable is interpolated
	if($type==2) {
	    $svarname=$varname."int";
	    $mode=&GetParameter($ftoolname,$svarname,$status);
	    #printf("%s=%s (status=%d)\n",$svarname,$mode,$status);
	    $svarname=$varname."sof";
	    $softmin=&GetParameter($ftoolname,$svarname,$status);
	    #printf("%s=%s (status=%d)\n",$svarname,$softmin,$status);
	    $svarname=$varname."nst";
	    $nsteps=&GetParameter($ftoolname,$svarname,$status);
	    #printf("%s=%s (status=%d)\n",$svarname,$nsteps,$status);
	}
    } # end of foreach loop

# now loop over the control parameters
    foreach $varname (@ctrlparms) {
	$value=&GetParameter($ftoolname,$varname,$status);
	#printf("%s=%s (status=%d)\n",$varname,$value,$status);
    } # end of foreach loop
}

#################################################################
#   Error handler
#
sub errhandler {
    printf "XSTAR2XSPEC: Failure in %s\n",$_[0];
    printf "XSTAR2XSPEC: Exiting program\n";	
    exit;    
}

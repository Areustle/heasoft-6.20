      FUNCTION ASCA_EEF(E,R,Off,Azi)
c     arguments
c     E (in)  : energy (keV)
c     r (in)  : diameter (mm) (0.9823 arc min per mm)
c     off(in) : offset angle (arcmin)
c     azi(in) : azimuthal angle (radian) [DUMMY]
c               This parameter is insensitive for the EEF.
c     asca_eef  : encircled enrgy function normalized at 12 mm (11.8 arc min)
c
c     FUNCTION
c                f(r,r1) - c*f(r,r2)
c         eef = ----------------------
c                f(12,r1)- c*f(12,r2)
c
c         where f(r,R) = 1-(r/R)*exp(-r/R)-exp(-r/R)
c
c     Version 1.0     coded by H. Awaki
c      parameters were calcurated using XRT response made by Tsusaka
------------------------------------------------------------------------
      SUBROUTINE ASCA_VIGN(Off_axis,Phi,Energy,Vcor,Ierr)
c
c  I  off-axis in armin
c  I  phi
c  I  energy in keV (constant value)
c  O  vcor vignetting correction value
c  O  ierr error
 
c     On-axis effective area with off-axis coeff (Awaki, 1992)
------------------------------------------------------------------------
      subroutine backgd_in(infile, status)
c
c  Read file into backgd include
c
c  I  infile   (i)  Input file location
c  O  status   (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      subroutine backgd_out(outfile, status)
c
c  Write contents of backgd include to file
c
c  I  outfile  (i)  Output file location
c  O  status   (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      subroutine background(Map, Szx, Szy, Status)
c
c  Calculates background, writes background file
c
c  I  Map      (i)  Image map
c  I  Szx/y    (i)  Size of map
c  O  Status   (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE BARYCENTER(Map,Szx,Szy,Xpos,Ypos,Optbox,Good)
c
c  Calculates barycenter
c
c  I  map    (i)  Image map
c  I  szx/y  (i)  Size of image map
c I/O x/ypos (r)  Box center
c  I  optbox (i)  Optimal box for highest S/N (image coordinates)
c I/O good   (l)  Whether box is good or not
c
------------------------------------------------------------------------
      SUBROUTINE BOXX(Xpos,Ypos,Radius,Icolour)
c
c  Plots a square box at (xpos,ypos) with half-width of (radius)
c
c  I  x/ypos   (r)  Center of box
c  I  radius   (r)  Half-width of box
c  I  icolour  (i)  Color index
c
------------------------------------------------------------------------
      subroutine bxhtest(Map, Szx, Szy, Imin1, Imax1, Imin2, Imax2, 
     &                   Probx, Proby, Status)
c
c  Background box half test.  Splits box in half vertically, compares
c  sides with chi square test, then splits horizontally and does the
c  same.
c
c  I  map   (i)  Image map
c  I  szx/y (i)  Size of image map
c  I  imin1 (i)  Minimum index of bg box in x
c  I  imax1 (i)  Maximum index of bg box in x
c  I  imin2 (i)  Minimum index of bg box in y
c  I  imax2 (i)  Maximum index of bg box in y
c  O  probx (r)  Probability that x sides match
c  O  proby (r)  Probability that y sides match
c
------------------------------------------------------------------------
      subroutine bxhwork(Alist, Blist, Npix, Prob)
c
c  Performs chi-square calculation, comparing two groups of
c  sorted pixels
c
c  I  A/Blist  (i) Groups to be compared
c  I  Npix     (i) Number of elements in each group
c  O  Prob     (r) Probability that they match 
c
------------------------------------------------------------------------
      SUBROUTINE CENTROID(Map, Szx, Szy, Equinox, Status)
c
c  Calculate centroid
c
c  I  map     (i)  Image map
c  I  szx/y   (i)  Size of map
c  I  equinox (i)  XIMAGE equinox
c  O  status  (i)  Error flag (0=OK)
c
------------------------------------------------------------------------
      SUBROUTINE CNVL(S,D,N,R,M)
c
c     +,1-D CONVOLUTION
c
------------------------------------------------------------------------
      SUBROUTINE CONTIG_SRCH(Bright,Pex,Tr)
c
c  Search for contiguous excesses
c
c  I  bright (l)  Whether to use old contig search (rather than fast)
c  I  pex    (l)  Whether to plot boxes
c  I  tr     (i)  Threshold value
c
------------------------------------------------------------------------
      SUBROUTINE BOXCNT(Map,Szx,Szy,Bxcen,Bycen,Brad,Conts,Cconts,
     &                  Isump,Ifl,Iwic,Rbpix)
c
c   counts photons in a square box
c
c   I  map      (i)  Image map
c   I  szx/y    (i)  Size of image
c   I  bx/ycen  (r)  Box center
c   I  brad     (r)  Box radius
c   O  conts    (i)  Weighted counts
c   O  cconts   (i)  Actual counts
c   O  isump    (i)  Number of image pixels
c   I  ifl      (i)  1=output weighted for background non-uniformity
c                    0=output not weighted for background non-uniformity 
c   I  iwic    (i)  Absolute value of weight at the position where 
C                   the back is to be rescaled.
C                   iwic is not used if ifl=0
c   O  rbpix   (r)  ? BGmap(i,j)/1000. summed for in img pixels in box
c
------------------------------------------------------------------------
      SUBROUTINE DETECT(Map, Exmap, Szx, Szy, Equinox, Status)
c
c detect inputs
c
c changed 5/5/94 to get d/f box size from ximage.inf file
c except for exosat le...
c
c  I  map     (i)  Image map
c  I  exmap   (r)  Exposure map
c  I  szx/y   (i)  Size of map
c  I  equinox (i)  XIMAGE equinox
c  O  status  (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      subroutine detect_bgr(Map, Szx, Szy, Status)
c
c calculates background in map
c
c  I  map        (i)  Image map
c  I  szx/y      (i)  Size of image map
c  O  status     (i)  Error flag  (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE DETECT_OUTPUT(Exmap, Szx, Szy, Equinox, Fileout)
c
c    Final part of detect
c    Writes output to screen
c
c  I  exmap    (r)   Exposure map
c  I  szx/y    (i)   Size of map
c  I  equinox  (i)   XIMAGE equinox
c  O  status   (i)   Error flag (0=OK)
c
------------------------------------------------------------------------
      SUBROUTINE DETECT_SEARCH(Map, Szx, Szy, Pex, Snr_thr,
     &                         Prob_lim, Status)
c
c  Detection algorithm
c
c  I  map                 (i)  Image map
c  I  szx/y               (i)  Size of map
c  I  pex                 (i)  Whether to plot excesses
c  I  snr_thr             (r)  Signal to noise ratio threshold
c  I  prob_lim            (r)  Probability that src is a bg fluctuation
c  O  status              (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE DO_BACK(Map,Szx,Szy,Optimize,Ibbace,Status)
c
c  I  map        (i)  Image map
c  I  szx/y      (i)  Size of image map
c  I  optimize   (l)  Whether to look for optimal boxsize
c I/O ibbace     (i)  Box size in image pixels
c  O  status     (i)  Error flag  (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE DYNM_THRESH(Itel,Exposure,Dist,Scrit,Plim)
c
c this subroutine dynamically increases the threshold for source
c acceptance depending on exposure time and off-axis angle
c
c  I  itel     (i)  Telescope index
c  I  exposure (d)  Exposure time
c  I  dist     (r)  Distance of detection from offset
c  O  scrit    (r)  Minimum signal to noise
c  O  plim     (r)  Probability that source is a back fluctuation
c
------------------------------------------------------------------------
      SUBROUTINE EINSTEIN_VIGN(A,E,Vig,Ierr)
c
c get the Einstein vignetting
c
c Taken from a routine written by Xiaoyi Wu at Columbia University
c Author N. White 8/20/93
c
c in:
c A is off axis angle in arc min
c E is the energy (not used)
c out:
c vig - the fractional vignetting
c ierr - something went wrong
c
------------------------------------------------------------------------
      FUNCTION ERROR_RADIUS(Xpix,Ypix,Snrat,Itel)
c   this function returns an estimate of the cma  90% error radius
c   in units of seconds of arc for any given position Xpix,Ypix
c   (units of 4 arcsecs linearized image pixels)
c   itel=telescope number  (Special calc for EXOSAT)
c
------------------------------------------------------------------------
      SUBROUTINE EXCESS(Map, Szx, Szy, Status)
c
c Find excesses
c
c  I  map     (i)  Image map
c  I  szx/y   (i)  Size of map
c  O  status  (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      subroutine excess_in(infile, status)
c
c  Reads excess finding results from file into excess.inc
c
c  I  infile   (s)  output file
c  O  status    (i)  error flag
c
------------------------------------------------------------------------
      subroutine excess_out(outfile, status)
c
c  Writes excess finding results to file
c
c  I  outfile  (s)  output file
c  O  status   (i)  error flag
c
------------------------------------------------------------------------
      SUBROUTINE EXCESS_SEARCH(Map, Szx, Szy, Pex, Bright, 
     &                         User_threshold_scal, Status)
c
c  Excess search algorithm
c
c  I  map                 (i)  Image map
c  I  szx/y               (i)  Size of map
c  I  pex                 (i)  Whether to plot excesses
c  I  bright              (i)  Whether to use old contig search
c  I  user_threshold_scal (r)  Threshold scaling
c  O  status              (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      FUNCTION FERMI(R,C1,C2,C3,C4)
      REAL*4 C1 , C2 , R , C3 , C4
      REAL*4 FERMI
C       approximates integral cma psf value at off-axis distance r
      FERMI = C1 + C2/(EXP((R-C3)/C4)+1.)
      RETURN
      END
------------------------------------------------------------------------
      SUBROUTINE FINAL_CHECKS(Itel,Xpix,Ypix,Stonr,Scrit,Plim,Dist)
c
c  I  itel    (i)  Telescope index
c  I  x/ypix  (r)  Detection in original pixel coordinates
c  I  stonr   (r)  Signal to noise ratio
c  I  scrit   (r)  Minimum signal to noise
c  I  plim    (r)  Probability that source is a back fluctuation
c  I  dist    (r)  Distance of detection from offset
c
------------------------------------------------------------------------
      subroutine flatback(Flatval,Ibbace,Status)
c
c  Fill background common with flat value
c
c  I  flatval    (r)  Value for flat background
c I/O ibbace     (i)  Box size in image pixels
c  O  status     (i)  Error flag  (0 = OK)
c
------------------------------------------------------------------------
      FUNCTION FLIM(X)
c
      INCLUDE 'xflim.inc'
      REAL*8 ffff
      REAL*4 XPOLOG , amea , FLIM , X
      INTEGER*4 mmme
c
      amea = BACkg + X
      mmme = MME
      ffff = 1. - XPOLOG(mmme,amea,1) + XPOLOG(mmme,amea,2)
      FLIM = ffff - 2.7E-3
c
      RETURN
      END
------------------------------------------------------------------------
      FUNCTION FUNCT(I,Sig)
      REAL*4 Sig , FUNCT
c     +,CONVOLUTION KERNEL
c     Used in gaussian smoothing
C     GAUSSIAN KERNEL
      INTEGER*4 I
      FUNCT = EXP(-0.5*FLOAT(I*I)/Sig/Sig)
      RETURN
      END
------------------------------------------------------------------------
      SUBROUTINE GET_EXPOSURE(Exmap,Szx,Szy,Xpix,Ypix,Hbox,Exposure)
c
c return the correct exposure, from the exposure map
c
c  I  exmap    (r)  Exposure map
c  I  szx/y    (i)  Size of map
c  I  x/ypix   (r)  Center of box
c  I  hbox     (r)  Half box size
c  O  exposure (d)  Exposure time
c
------------------------------------------------------------------------
      SUBROUTINE GET_VIGN(Xpix,Ypix,Itel,Vcor,Status)
c
c  I  x/ypix (r)  Location of detection
c  I  itel   (i)  Telescope index
c  O  vcor   (r)  Vignetting correction
c  O  status (i)  Error flag  (0=OK)
c
------------------------------------------------------------------------
      subroutine getbgmap (Bgmap, Bgsz, Status)
c
c  Read in FITS background map corresponding to current map's
c  detector.  If non-existent generate flat map internally
c
c  O  Bgmap   (i)  Background map
c  I  Bgsz    (i)  Size of map
c  O  Status  (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE HISTOMAX(Map, Szx, Szy, Bxcen, Bycen, Boxrad, 
     &                    Xout, Yout)
c
c  Determine new center for box by histogram of selected region
c
c  I  map      (i)  Image map
c  I  szx/y    (i)  Size of image
c  I  bgx/ycen (r)  Center of box in image coordinates
c  I  boxrad   (r)  Half size of box in image coordinates
c  O  x/yout   (r)  Point of maximum intensity in image coor.
c
------------------------------------------------------------------------
      FUNCTION HRIPSF(Eps,R)
C
C HRI PSF approximation for off-axis data
C December 2nd 1993 version
C Jane Turner from larrys model (Nov '93) tested on 6 cal
C datasets, using some of JT/IMG code from September 1993 version.
C tests show model is sometimes a poor fit to radial
C profile data, partly due to
C variations in aspect quality. NOT to be used for image
C deconvolution. Can be used to do crude extent tests, and
C determine extraction cell sizes.
C
C     EPS is off-axis anlgle from optical axis, in arcminutes
C     R is radial distance from centroid  in arcseconds
C     S1,S2 and S3 are in arcseconds, A1,A2,A3 are empirically determined
C     constants.
------------------------------------------------------------------------
      subroutine dps_cntrd(Map,Szx,Szy,W,Dd,Deriv,Bufsz,Bxcen,Bycen,
     &                     Boxrad,Xout,Yout,Status)
c
c  Use derivative of the partial sums wrt Bxcen, Bycen to
c   calculate centroid. Adapted from IDLastro command, CNTRD
c
c  PURPOSE: (from original CNTRD.pro)
c       Compute the centroid coordinates of a stellar object 
c       using the algorithm in the DAOPHOT FIND subroutine.
c
c  PROCEDURE: (from original CNTRD.pro)
c       Maximum pixel within distance from input pixel X, Y  determined 
c       from FHWM is found and used as the center of a square, within 
c       which the centroid is computed as the value (XOUT,YOUT) at which 
c       the derivatives of the partial sums of the input image over (y,x)
c       with respect to (x,y) = 0.
c
c  I  map    (i)  Image map
c  I  szx/y  (i)  Dimensions of image
c  I  w      (r)  Buffer for weighting factor
c  I  dd     (r)  Buffer for distance from center
c  I  deriv  (r)  Buffer for derivative
c  I  xcen   (r)  Approximate source center in x
c  I  ycen   (r)  Approximate source center in y
c  I  boxrad (r)  Half of box size
c  O  xout   (r)  Computed x centroid position
c  O  yout   (r)  Computed y centroid position
c  O  status (i)  Error flag (0=OK)
c
c ---CUT---
c  I  fwhm  (r)  Centroid is computed using a box of half
c                  width equal to 1.5 sigma = 0.637* FWHM
c ---CUT---
c
------------------------------------------------------------------------
      subroutine initstat()
c
c  Initialize include files for statistics commands
c  so it will be known whether various things, such as
c  the background, excesses, etc. have been
c  calculated for this image.
c
------------------------------------------------------------------------
      SUBROUTINE INTENSITY(Srccnts,Srcpix,Baccnts,Bacpix,Opixbox,
     &                     Stonr)
c
c fixed it so that it cannot take the sqrt of a -ve number  LA 9/15/92
c
c  I  srccnts  (r)  Counts in source box
c  I  srcpix   (r)  Image pixels in source box
c  I  baccnts  (r)  Counts in local background box
c  I  bacpix   (r)  Image pixels in local background box
c  I  opixbox  (i)  Size of source box in original pixels
c  O  stonr    (r)  Signal to noise ratio
c
c common changes
c sint - corrected for psf and bgnd
c
------------------------------------------------------------------------
      FUNCTION IPOSS(Sum,Seed)
c
c  poisson numb generator <880421.1100>
C
C***** function to return numbers that follow a poisson
C***** distribution with mean = sum
c
c  for vax version one has to pass down seed for random
c  number generator
c  8/2/90   gth
c
------------------------------------------------------------------------
      SUBROUTINE LOC_EXCESS(Map, Szx, Szy, Pex, Tr, Status)
c
c  Locate excesses
c
c  I  map    (i)  Image map
c  I  szx/y  (i)  Size of image map
c  I  pex    (l)  Whether to plot excesses
c  I  tr     (i)  Threshold
c  O  status (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE LOCAL_BG(Xpos,Ypos,Ibgx,Ibgy,Zmx,Baccnts,Bacpix)
c
c  Calculate local background
c
c  I  x/ypos   (r)  Location of detection in image coordinates
c  I  ibgx/y   (i)  Location of detection in BGMAP
c  I  zmx      (i)  Image zoom in x
c  O  baccnts  (r)  Counts in local background box
c  O  bacpix   (r)  Pixels in local background box
c
------------------------------------------------------------------------
      SUBROUTINE MOVXY(Xin,Yin)
      IMPLICIT NONE
      REAL*4 Xin(*) , Yin(*)
      INTEGER*4 i
      DO 100 i = 1 , 3
         Xin(i) = Xin(i+1)
         Yin(i) = Yin(i+1)
 100  CONTINUE
      RETURN
      END
------------------------------------------------------------------------
      SUBROUTINE NOBOX(Sfa,Opixback,Scts,Opixbox)
      IMPLICIT NONE
c
C subroutine to calculate optimum box size for maximizing signal to
C noise ratio
C
C  I  sfa       (r) ?area
C  I  opixback  (r) Background in cnts/original pixel (This is
C                   the bg calculated before boxes are checked
C                   for bad statistics)
C  I  scts      (r) Source counts
C  O  opixbox   (i) Size of optimum cell for count rate estimation
C                   units are in original pixels
C   Input from common:
C            FRAc  vector containing source point spread function
C
------------------------------------------------------------------------
      SUBROUTINE NPSF(Xpix,Ypix,Itel,Sfa,Emin,Emax)
c
C      this subroutine returns (in a common) the appropriate
C      point spread function for a given position in the
C      field of view
C      inputs :
C             xpix,ypix source position in units of elemental pixels
C             itel      telescope id. 1=le1  2=le2   3=hri 4=ipc  5=xmm
C                                     6=jetx 7=rosat 8=sax 9=astrod
c                                    10=wfxt
C      outputs:
C              psf       point spread function
c
------------------------------------------------------------------------
      FUNCTION PAR(X,Ag,Bg,Cg)
      REAL*4 Ag , Bg , Cg , X , PAR
      PAR = Ag + Bg*X + Cg*X*X
      RETURN
      END
------------------------------------------------------------------------
      SUBROUTINE PARIN(Xin,Yin,Ifclou,Agood,Bgood,Cgood)
c
c   this subroutine is to interpolate data with weighted parabola
c   method.
c   ifclou: -1 for the first couple, 1 for the last, 0 for all the others
c
------------------------------------------------------------------------
      SUBROUTINE PEPSI(X,Y)
c
c  calculates expected cma psf
c
------------------------------------------------------------------------
      subroutine prback(status)
c
c  Print calculated background and box size used
c
------------------------------------------------------------------------
      SUBROUTINE PSF(Map, Szx, Szy, Device, Status)
c
c Calculate the number of counts in concentric squared boxes.
c Produce as output a file contaning the total number of counts
c in each box, the differential counts in two concentric boxes and
c the differential counts divided by the area in two concentric boxes
c and the percentage of the counts in each box obtained normalizing for the
c total number of counts for that reagion.
c The input parameters are:
c a) the x and y pixels position in the image,
c b) the number concentric boxes over calculate the counts
c c) the background level (background/pixels)
c The space in arcsec between the consegutive boxes is determinate by the
c image resolution. The increment is one image pixel at the time.
c
c  I  map    (i)  Image map
c  I  szx/y  (i)  Size of map
c  I  device (c)  PGPLOT device for qdp file
c  O  status (i)  Error flag (0=OK)
c
------------------------------------------------------------------------
      FUNCTION PSFOFF(Ene,Eps,X,Ierr)
C
CC  calculates PSPC off-axis PSF (normalized surface brightness)
C
C************************ FFORM VERSION 1.2 ************ DD-MMM-YY HH:MM
C
CA  author : GRH        date: 24-FEB-1992 09:21
CU  update : AMS        date: 2-APR-1993 16:42    off-axis dependence
CU  update : GRH        date: 2-APR-1993 17:05    exponential fraction
C
CT  status: not tested
C
C   general description:
CG  The PSPC on-axis PSF is a combination of three, physically well
CG  understood terms:
CG
CG  1. a Gaussian for the intrinsic PSPC resolution due to the inherent
CG     statistics of the primary electron generation. Theoretically
CG     the Gaussian Sigma is propotrional to 1/SQRT(Energy)
CG
CG  2. an exponential function due to the finite penetration depth of
CG     the X-rays in the counter gas combined with the 8.5 degree cone
CG     angle. The PSPC is focussed for 1 keV; the 'chromatic aberration'
CG     is largest for large energies
CG
CG  3. a Lorentzian function for the mirror scattering which breaks into
CG     a different power law slope at larger energies. Theoretically the
CG     scattering fraction should increase like the square of the
CG     energy, if the grazing angle remains constant. Due to the
CG     diffraction laws, the shape parameters should be proporional to
CG     1/Energy.
CG
CG  In principle these three components should be folded with each
CG  other, however, their angular domains are reasonably well separated
CG  that a simple addition is accurate enough. The detailed PSF
CG  parameters and their energy dependence have been determined using
CG  the PANTER telescope calibration data of both PSPC-A and PSPC-C at
CG  the monochromatic energies 0.28, 0.93, 1.49 and 1.70 keV. At lower
CG  pulseheights than channel 15 (0.15 keV) additional 'ghost images'
CG  appear in the PSPC for which no analytical fit is possible. These
CG  events should be avoided as far as possible in PSF modelling.
CG
CG  The off-axis blur of the telescope, although highly structured and
CG  asymmetric, can be modeled by a simple Gaussian in its radially
CG  integrated profile. This Gaussian is added in quadrature to the
CG  gaussian of the detector. Since the PSF is not convolved, but a
CG  simple addition of terms, the contribution of the exponential term
CG  has to be diminished while the gaussian is "eating up" the
CG  exponential. This is modelled as a gaussian decay of the exponential
CG  term as a function of off-axis angle.
CG
CG
CG
C   call_var.          type I/O description
CP  ENE                 R   I   Energy [keV]
CP  EPS			R   I	off-axis angle [arc min]
CP  X                   R   I   angle from target position [arcsec]
C
CP  IERR                I   O   = 0 no error
CP                              = 1 energy outside bounds 0.07-3 keV
CP                              = 3
C
C     OUTPUT:
C             PSFOFF      surface brightness of point spread function,
C                         normalized, so that  Integral 2*PI*r*dr*f
C                         from 0 to infinity = 1 [1/arcsec2]
C
C   include_block_name          description
C
C   routines_called    type     description
CR  HFLAG               R       output flag handling routine
CR  WRFLAG              SR      writes to FLAG output stream
C
------------------------------------------------------------------------
      SUBROUTINE QSORT_DETECT(Sortcrit, Nbros, Ndim, Nmax)
c
C modified from algol code to structured fortran,j.c.lewis
C see n.wirth 'algorithms+data structures=programs'
C -quicksort takes an element k (near the middle say),scans the array
C  from the left till an el. gt k is found,scans from the right till an
C  el. lt k is found,& swaps these 2 els.
C  this is continued till all els to left of k are lt k,and all to right
C  are gt k.
C  now do the same for these 'subpartitions'.when all subpartitions
C  are of length 1,array is sorted!!!!
C   use a stack array to keep track of partitions yet to be sorted-
C  always sort the smaller partition first
C  use stack size=log2(nmax)
C
c  this is a modification of paolos qsort.
c
c I/O sortcrit  (r)  Array containing values to be sorted on
c I/O nbros     (i)  Output order corresponding to sort
c  I  ndim      (i)  Dimension of arrays
c  I  nmax      (i)  Number of elements in arrays
c
------------------------------------------------------------------------
      SUBROUTINE RAW_COUNTS(Map,Szx,Szy,Xpos,Ypos,Srccnts,Srcpix,
     &                      Optbox,Optbxh,Good)
c
c find the raw number of counts in the box
c
c  I  map     (i) image map
c  I  szx/y   (i) size of image map
c  I  x/ypos  (r) location of current box in image pixels
c  O  srccnts (r) number of counts in box
c  O  srcpix  (r) number of image pixels in box
c  I  optbox  (i) full size of box in image pixels
c  I  optbxh  (r) half size of box in image pixels
c I/O good    (l) Whether current box is good
c
------------------------------------------------------------------------
      subroutine rd_fitsmap (Filename, Map, Szx, Szy, Zmx, Zmy,
     &                       Drpix, Status)
c
c  Read simple map (i.e. Szx=Naxes(1) and Szy=Naxes(2))
c  Intended for use reading background and vignetting correction maps
c
c  I  Filename  (s)  Filename of FITS map
c  O  Map       (i)  Where FITS map is read into
c  I  Szx,Szy   (i)  Size of map
c  O  Zmx/y     (i)  FITS map zoom
c  O  Drpix     (d)  Center in detector coords
c  O  Status    (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      subroutine rdpsf(filename, offset, first, sfa, status)
c
c  Make PSF correction based on multi-column file from PSF
c  command.
c
c  I  filename   (s)  PSF correction file
c  I  offset     (r)  Distance for optical axis in detector coordinates
c I/O first      (l)  True on first call from loop,
c                     False for subsequent calls
c  O  sfa        (r)  ?area (Carries zoom info)
c  O  status     (i)  Error flag (0=OK)
c
------------------------------------------------------------------------
      subroutine rebinmax (Map, Szx, Szy, Bxbuf, Ibox, Bxcen, Bycen,
     &                     Xout, Yout)
c
c  Find maximum in box by rebinning until location of maximum
c  stabilizes.
c
c  I  map     (i) Image map
c  I  szx/y   (i) Image size
c  I  bxbuf   (i) Work buffer for rebin calculation
c  I  ibox    (i) Size of work buffer
c  I  bxcen   (r) Center of box in image x coordinate
c  I  bycen   (r) Center of box in image y coordinate
c  O  xout    (r) Computed maximum pixel in image x coordinates
c  O  yout    (r) Computed maximum pixel in image y coordinates
c
------------------------------------------------------------------------
      SUBROUTINE REMOVE_SOURCES(Map, Szx, Szy, Status)
c
c Remove part of image and substitute with background value
c
c  I  map    (i)  Image map
c  I  szx/y  (i)  Size of map
c  O  status (i)  Error flag (0=OK)
c
------------------------------------------------------------------------
      SUBROUTINE RESOLUTION(Ixs,Szx,Szy,Zmx,Zmy,Xcen,Ycen,Itel,
     &                      Dmini,Dmin2)
c
c  I  ixs    (i)  Excess index
c  I  szx/y  (i)  Size of image
c  I  zmx/y  (i)  Zoom of image
c  I  x/ycen (d)  Center of image
c  I  itel   (i)  Telescope index
c  O  dmini  (r)  Min distance between distinct sources
c  O  dmin2  (r)  dmini*1.5
c
------------------------------------------------------------------------
      SUBROUTINE ROSAT_VIGN(A,E,Vig,Ierr)
c      SUBROUTINE OFF_AX_A(A,E,VIG,IERR)
C
CC  Returns the normalized value of the vignetting function
C
C************************ FFORM VERSION 1.0 ************  9-SEP-88 08:50
C
CA  author : SLS               date: 9-SEP-1988 08:00
CU  update : CRI               date: 7-DEC-1988 15:13
CU  update : CRI        date: 18-DEC-1989 09:33
CU  update : CRI        date: 19-MAR-1990 09:30 message 902 removed
C
CT  status: not tested
C
C   general description
CG  This routine calculates the normalized vignetting function of the
CG  ROSAT/PSPC combination for a given off-axis angle and energy.
CG  The effect of the window support structure has not been included
CG  for this calculation.  The values come fom an analytic fit to
CG  the vignetting function.
C
C   call_var.          type I/O description
CP  IERR                I4    O = 0 no error
CP                              = 1 angle or energy greater than the
CP                                  specified range, calculated value
CP                                  returned limited to GE 0.
CP                              = 1 angle or energy less than 0., value
CP                                  returned of 1.
CP  A                   R4  I   angle in arc minutes (0. - 60.)
CP  E                   R4  I   energy in eV (0. - 2000.)
CP  VIG                 R4    O analytic vignetting function value
C
------------------------------------------------------------------------
      SUBROUTINE SAX_VIGN(Off_axis,Energy,Vcor,Ierr)
      IMPLICIT NONE
c
c  I  off-axis in arcmin
c  I  energy in keV (constant value)
c      ONLY USED IN OLD VERSION (ignored in this version) 
c  O  vcor vignetting correction value
c  O  ierr error
 
------------------------------------------------------------------------
      SUBROUTINE SEARCH(Map, Exmap, Szx, Szy, Equinox, Status)
c
c  Search for sources
c
c  I  map     (i)  Image map
c  I  exmap   (r)  Exposure map
c  I  szx/y   (i)  Size of map
c  I  equinox (i)  XIMAGE equinox
c  O  status  (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      subroutine search_in(infile, status)
c
c  Read source searching results from file
c
c  I  infile   (s)  input file
c  O  status   (i)  error flag
c
------------------------------------------------------------------------
      subroutine search_out(outfile, status)
c
c  Writes source searching results to file
c
c  I  outfile   (s)  output file
c  O  status    (i)  error flag
c
------------------------------------------------------------------------
      SUBROUTINE SET_THRESHOLD(Bnew,Boxsiz,Szx,Szy,Tr)
c
c  I  bnew    (r)  Background in cts per image pixel
c  I  boxsize (i)  Size of background boxes
c  I  szx/y   (i)  Size of image
c  O  tr      (r)  Threshold value
c
------------------------------------------------------------------------
      SUBROUTINE SMOOTH(Map, Exmap, Rmap, Szx, Szy, Status)
c
c  Smooth image interface
c
c  I  map     (i)  Image map
c  I  exmap   (r)  Exposure map
c  I  rmap    (r)  Real map (Used as buffer in smoothing)
c  I  szx/y   (i)  Size of maps
c  O  status  (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE SMOOTHWORK(Map,Exmap,Rmap,Szx,Szy,Sigpix,
     &                      Scaling_factor,Smooth_x,Smooth_y,
     &                      Exp_map,Wavesmth,Status)
c
c      IMAGE SMOOTHING
C
C      L.CHIAPPETTI - ESOC - JUN 84 <850319.1118>
C      VERSION 1 MOD 1
C Vx   ORIGINAL ADAPTMENT FROM RB ROUTINE (FAULTY IF N .NE. 256)
C VxM1 ABOVE BUG CORRECTED, ALSO BUG IN LOWER CORNER CORRECTED !
C VxM2 RTE 6 CHANGES
C VxM3 INTERACTIVE SYSTEM CHANGES - P.G. -
C      FINALISED FOR LE IA ON -841214.1826-
C V1M1 NOW SCALING FACTOR HAS PHYSICAL MEANING
C      ALSO SUITABLE DEFAULT IS PROVIDED
C
c   VAX/VMS version  12/2/90 GTh
c
c   adapted to work from BROWSE and XIMAGE by P.G. on 13/2/90
c   added exposure maps NEW 1 sep 1993
c
c  I  map            (i)  Image map
c  I  exmap          (r)  Exposure map
c  I  rmap           (r)  Real map (Used as buffer)
c  I  szx/y          (i)  Size of maps
c  I  sigpix         (r)  Sigma of the gaussian in image pixels
c  I  scaling_factor (r)  Scale factor used to increase precision
c  I  smooth_x       (l)  Whether to smooth x direction
c  I  smooth_y       (l)  Whether to smooth y direction
c  I  exp_map        (l)  Whether to smooth exposure map
c  I  wavesmth       (l)  Whether to use wavelet smoothing
c  I  status         (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      SUBROUTINE SMTH(Map,Exmap,Rmap,Szx,Szy,S,D,Bufsz,Sigpix,
     &                Scaling_factor,Anrm,Smooth_x,Smooth_y,
     &                Exp_map,Wavesmth)
c
c  smth performs a two-dimensional smoothing of data
c  vax/vms version  13/2/90  gth
c
c  I  map            (i)  Image map
c  I  exmap          (r)  Exposure map
c  I  rmap           (r)  Real map (Used as buffer)
c  I  szx/y          (i)  Size of maps
c  -  s,d            (r)  Buffers for smooth calculation
c  I  bufsz          (i)  Size of buffers
c  I  sigpix         (r)  Sigma of the gaussian in image pixels
c  I  scaling_factor (r)  Scale factor used to increase precision
c  O  anrm           (r)  Normalisation factor (i.e. the area under the
c                         convolution kernel)
c  I  smooth_x       (l)  Whether to smooth x direction
c  I  smooth_y       (l)  Whether to smooth y direction
c  I  exp_map        (l)  Whether to smooth exposure map
c  I  wavesmth       (l)  Whether to use wavelet smoothing
c
------------------------------------------------------------------------
      subroutine sosta(Map, Exmap, Szx, Szy, Status)
c
c  Calculate source statistics
c
c  I  map      (i)  Image map
c  I  exmap    (r)  Exposure map
c  I  szx/y    (i)  Size of maps
c  O  status   (i)  Error flag (0 = OK)
C
C Following comments originally from sosta_ximage:
C
C version 1.3    handles sampling dead time corrections
C version 1.4    vignetting correction is now included
C version 2.0    background non-uniformities can be taken into
C                account
C version 2.1    probability that source is spurious is calculated
C                only in the case of signal-to-noise ratio < 5.0
C version 3.0    allows the use of non-standard point spread functions
C
C version 3.1    radius is automatically reset to units of 4.sec pixels
C
C version 3.2    creates file containing info for vax version of espec
C                t.g. jul 1986
C version 3.3    adapted to work with hri or ipc images also.
C
C version 4.0    default psf is the expected psf at source position.
C                segmented because of space problems jun 1987
C version 4.1    error in psf correction in rebinned images fixed
C                a proper background map for le2 is used
C
C this version can be run directly from browse/ximage  16 nov 1989
C
C version 5.0    command driven user interface added july 1990 aw
c version 5.1    added various enhaancements for ximage aug 1993 new
c version 5.2    added exposure map July 1994 new               
c version 5.3    somehow the exposure map got messed up, fixed it August 95.
c
------------------------------------------------------------------------
      SUBROUTINE SOSTA_BACK(Map,Szx,Szy,Xpix,Ypix,Xpos,Ypos,Iwc,
     &                      Local_bck,Inner_radius,Outer_radius,
     &                      Box_bck,Cursor,Nbox,Box_size,Setbck,
     &                      Ires,Isum,Back1,Erback,Sourc,Erro1,
     &                      Status)
c
c  Compute background for sosta
c
c  I  map          (i)  Image map
c  I  szx/y        (i)  Size of map
c  I  x/ypix       (r)  Source box center in original pixels
c  I  x/ypos       (r)  Source box center in image coordinates
c  I  iwc          (i)  Weight of source box center
c  I  local_bck    (l)  Whether to calculate background locally
c  I  inner_radius (r)  Inner box radius for local bg calculation
c  I  outer_radius (r)  Outer box radius for local bg calculation
c  I  box_bck      (l)  Whether to use user-defined boxes
c  I  cursor       (l)  Whether to enter boxes with mouse
c  I  nbox         (i)  Number of user-defined boxes
c  I  box_size     (r)  Box radius of user-defined boxes
c  I  ires         (i)  Sum of weighted source counts
c  I  isum         (i)  Number of image pixels summed
c I/O back1        (r)  Computed background
c  O  errback      (r)  Background error
c  O  sourc        (r)  Source value
c  O  erro1        (r)  Source error
c  O  status       (i)  Error flag (0=OK)
C
------------------------------------------------------------------------
      SUBROUTINE SOSTA_MISC(Xpix,Ypix,Itel,Exp_map,Ires,Isum,
     &                      Radsou,Sfa,Exposure,Dtime,Back1,
     &                      Sourc,Erro1,Ifrat,Proba,Probga,
     &                      Vcor,Fracc,Tsig,Kside)
c
C compute miscellaneous values for sosta: probablities, upper limits,
c vignetting, optimum box size..
c
c put in protection against -ve sqrt     9/15/92 LA
c
c  I  x/ypix    (r)  Source box center
c  I  itel      (i)  Telescope index
c  I  exp_map   (l)  Whether exposure map has been loaded
c  I  ires      (i)  Sum of weighted source counts
c  I  isum      (i)  Number of image pixels summed
c I/O radsou    (r)  Source box radius
c  I  sfa       (r)  ?Area
c  I  exposure  (d)  Exposure time
c  I  dtime     (d)  Dead time correction
c  I  back1     (r)  Computed background 
c  I  sourc     (r)  Source value
c  I  erro1     (r)  Source error
c  O  ifrat     (i)  Ratio flag
c  O  proba     (r)  Probability that source is fluctuation
c  O  probga    (r)  Probability that source is fluctuation (cumga)
c  O  vcor      (r)  Vignetting correction
c  O  fracc     (r)  EEF value
c  O  tsig      (r)  Three sigma upper limit
c  O  kside     (i)  Optimum box size
c
------------------------------------------------------------------------
      subroutine sosta_out(Xpix,Ypix,Itel,Detect,Exp_map,Exposure,Dtime,
     &                     Back1,Erback,Sourc,Erro1,Ifrat,Proba,Probga,
     &                     Vcor,Fracc,Tsig,Kside)
c
c  Source statistic output
c
c  I  x/ypix    (r)  Source box center
c  I  itel      (i)  Telescope index
c  I  detect    (l)  Whether using detected sources
c  I  exp_map   (l)  Whether exposure map is loaded
c  I  exposure  (d)  Exposure time
c  I  dtime     (d)  Dead time correction
c  I  back1     (r)  Computed background
c  I  sourc     (r)  Source value
c  I  erro1     (r)  Source error
c  I  ifrat     (i)  Ratio flag
c  I  proba     (r)  Probability that source is fluctuation
c  I  probga    (r)  Probability that source is fluctuation (cumga)
c  I  vcor      (r)  Vignetting correction
c  I  fracc     (r)  EEF value
c  I  tsig      (r)  Three sigma upper limit
c  I  kside     (i)  Optimum box size
c
------------------------------------------------------------------------
      SUBROUTINE SOSTA_SOURCE(Map,Szx,Szy,Xpix,Ypix,Xpos,Ypos,Itel,
     &                        Radius,Radsou,Maxrad,Radeef,Eefbak,
     &                        Optimize,Sfa,Radius98,Ires,Isum,Status)
c
c  I  map       (i)  Image map
c  I  szx/y     (i)  Size of map
c  I  x/ypix    (r)  Source center in original pixel coordinates
c  I  x/ypos    (r)  Source center in image coordinates
c  I  itel      (i)  Telescope index
c  I  radius    (r)  User-entered source box radius
c  I  radsou    (r)  Source box radius
c  I  maxrad    (r)  Maximum source box radius
c  I  radeef    (r)  Fractional EEF used to get source box size
c  I  eefbak    (r)  Fractional EEF used to select where the
c                    inner background box size begins
c  I  optimize  (l)  Whether to optimize
c  O  sfa       (r)  ?Area
c  O  radius98  (r)  Source half-box for 0.98 EEF
c  O  ires      (i)  Sum of weighted source counts
c  O  isum      (i)  Number of image pixels summed
c  O  status    (i)  Error flag  (0=OK)
c
------------------------------------------------------------------------
      SUBROUTINE ULLIM(Mma,Bback,Res)
c
c   3 sigma upper limits
c
------------------------------------------------------------------------
      SUBROUTINE VDOT(Product,Vector1,Istart1,Incr1,Vector2,Istart2,
     &                Incr2,Nelements)
c
c   VAX version of VDOT subroutine on HP 1000.
c   (see: VIS user manual, p.2-19)
c   VDOT calculates the inner product between VECTOR1 and
c   VECTOR2 and stores it in variable PRODUCT.
c   This version only supports one-dimensional arrays
c   with INCR1=+/-1 and INCR2=+/-1.
c   If INCRx = -1 the multiplication is done in reversed order of elements.
c   ISTART1 and ISTART2 are starting positions for VECTOR1 and
c   VECTOR2, respectively.
c
------------------------------------------------------------------------
*****************************************************************************
C     VIGN_AWAKI.F
C
C     ERIC GOTTHELF, GSFC, FEB 6 1993
C
C     SUBROUTINE TO RETURN THE MULTIPLICATIVE CORRECTION TO THE ON-AXIS
C     XRT EFFECTIVE AREA FOR A GIVEN ENERGY (KEV), PHI (ARC MINUTES),
C     AND THETA (RADIANS).
C
C     THE AWAKI FORMULA (1992), DERIVE FROM RAY-TRACING RESULTS
C     AND CALIBRATION DATA, IS USED.
C
*****************************************************************************
 
      REAL FUNCTION VIGN_AWAKI(Energy,Theta,Phi,Vign_coeff)

------------------------------------------------------------------------
      SUBROUTINE VIGNETTING(Exmap, Szx, Szy, Status)
c
c  Correct exposure map for vignetting
c
c  I  exmap   (r)  Exposure map
c  I  szx/y   (i)  Size of map
c  O  status  (i)  Status
c
------------------------------------------------------------------------
      SUBROUTINE WRBACK(Filename, Ipd, Plot, Status)
c
c  Writes background file
c
c  I  filename      (s)  Name of file
c  I  ipd           (i)  Number of count rate intervals 
c  I  plot          (l)  Whether to plot background distribution
c  O  status        (i)  Error flag (0 = OK)
c
------------------------------------------------------------------------
      FUNCTION XPOLOG(Ib,Amea1,Iflag)
C
C  I  ib    (i)  
C  I  amea1 (r)
C  I  iflag (i)  1 for integral distribution   p(n>=ib,amea)
C                2 for differential distribution   p(n=ib,amea)
C
------------------------------------------------------------------------
      SUBROUTINE ZFUN(FUNC,Xmin,Xmax,Stepxx,Ok,Result,Imsol)
C     ZERO OF FUNCTIONS
C***** THIS SUBROUTINE COMPUTES THE SOLUTION(S) OF THE EQ. F(X)=0
C***** IN AN INTERVAL DEFINED BY "XMIN"-"XMAX".
C***** "OK" IS THE MAXIMUM DEVIATION FROM THE REAL SOLUTION
C***** IF IN THE SPECIFIED INTERVAL (XMIN-XMAX) MORE THEN ONE
C***** SOLUTION IS PRESENT , ONLY THE LAST ONE WILL BE RETURNED
C***** AND THE FLAG IMSOL WILL BE SET EQUAL TO THE ACTUAL NUMBER
C***** OF SOULTIONS FOUND
C***** IF NO SOLUTIONS ARE FOUND IN THE INTERVAL XMIN-XMAX
C***** RESULT WILL BE ZERO AND IMSOL EQUAL TO ZERO.
C ** FUNC IS THE FUNCTION F(X) AND MUST BE DECLARED EXTERNAL IN THE
C ** MAIN PROGRAM
C ** XMIN AND XMAX DEFINE THE RANGE WHERE SOLUTIONS ARE SERCHED
C ** STEPXx IS THE STARTING VALUE FOR THE INCREMENT OF THE ARGUMENT
C ** OF THE FUNCTION
C ** OK IS THE MAXIMUM DEVIATION OF THE RETURNED NUMBER FROM THE
C ** TRUE SOLUTION OF THE EQUATION
C ** RESULT IS THE RETURNED VALUE of the last solution found
C ** IMSOL IS THE NUMBER OF SOLUTIONS FOUND
c
------------------------------------------------------------------------

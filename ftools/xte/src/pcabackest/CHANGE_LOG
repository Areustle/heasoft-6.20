Version 3.2 (internal to CM only):

  Cache the SAA file once.  The original version opened the SAA
  history file 30 times (never closing!), and reads the invidual rows
  each time.  Now the file is cached once and the scan occurs in
  memory.

  Improvements:
    * SAA file opened only once. (saves file resources)
    * I/O only occurs once. (saves time)
    * Scan occurs in memory

Version 3.3 (internal to CM only):

  Source code cleanups to remove most compiler warnings.  Some
  FITSIO-fortran macros have compiler warnings that go away, but now
  it should be much easier to see compilation problems.

Version 3.4:

  Add new model "CalcInternal_Xenon" which uses the Standard2
  GoodXenon counts as the independent variable of the model.
  Considerable freedom is allowed to choose specific layer and anode
  combinations, as well as energy ranges.

  Add functions CacheSave() and CacheRetrieve() which prevent many
  recomputations of the same thing.

Version 3.5:

  The code has been simplified so that internally calculated models
  are not enumerated and tested for in two different steps.  Now
  CalcInternal() will test for the models that it knows how to
  calculate, and return -1 if it fails.  In this fashion, it is not
  necessary to enumerate all possible model names.  All of the
  InternalParms[], INTERNAL_PARAMETERS and COLCAT_UNIT_INTERNAL
  references are no longer needed, and have been deleted.

  Because of this, the CalcInternal_Xenon() function should now work
  (although untested).

  Extensive source code documentation has been added, included an
  outline of the execution paths.

Version 3.6: (08 Apr 2008)

  When the model file doesn't exist, or has the wrong format, then
  print a more descriptive error message.  (Previously it would say
  the filter file and the model file don't overlap in time, even
  if the model file didn't exist.)  Also, file name buffers have been
  expanded to 1024 characters.

Version 3.8: (2009-09-08)

  Temporary fix to interpolation routine, which was producing wild
  oscillations for some spectral models due to division by near-zero.
  This is especially a problem for the linear-in-time model which 
  has some model values that cross zero.  I (CM) am not sure that the 
  interpolation method is sound in any case, but it is egregiously 
  wrong for the case when the model is near zero.  The current fix is
  temporary: it avoids division by a large number by constraining
  the divisor to a more "sane" range, whatever that means in practice.
 

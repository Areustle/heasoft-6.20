#! /usr1/local/bin/perl5
#
# Script to run pcabackest and create several output files and 
# a file containing their names ready to be used as input for SAEXTRCT
#
# Brian K. Elza 8/19/96
# XTE GSFC/NASA
#
# 10/23/97 Zhiyu Guo cut the last part of the script which calls for SAEXTRCT.

use Getopt::Std;

#============================================================#
#
# See if there are any flags:
#

getopts('h');			
if (defined $opt_h) {
    print <<EOHELP1;

NAME
    runpcabackest -- a script that queries the user for all required input
    and pcabackest upon a series of input files, the names of the output
    files are written to a file ready to be input into saextrct. The code 
    queries the user if it should call saextrct. 
    
USAGE
    runpcabackest  
    
DESCRIPTION
    This code basically allows PCABACKEST to be run upon a series of
 Standard Mode 2 XTE data files, input via a \@filename, where filename
 contains the names of the files to operate upon. PCABACKEST is then 
 called successively to  create a series of output files which have the
 same name as the input file with _outsuffix appended to the name. These 
 output files are then ready to be processed by SAEXTRCT. The names of the
 output files are written to a file and are ready to be input into SAEXTRCT
 via the \@filename option. 
    
PARAMETERS
    
EXAMPLES
    1. runpcabackest
    
NOTES:
	This is a BETA version of the script and will be refined.
    
BUGS
    
        Please report problems to xtehelp\@athena.gsfc.nasa.gov. Provide a
        detailed  description  of  the  problem and an e-mail address at
        which you can be reached if  further  information  is  required.
        Before  reporting  a  bug  please  check  your .PAR file. At the
        moment all comparisons are CASE SENSITIVE.
    
    
SEE ALSO
    PCABACKEST and SAEXTRCT

EOHELP1
exit;
    }



# now onto the program ...

require "utils.pl";

print "This perl script will take a series of input files via \@filename
and run pcabackest multiple times, creating multiple files with the same
name as the input file with _\$outsuffix appended to the input name ready 
to be input into saextrct for farther analysis.\n\n";

#print "Do you want full filtering capability (Yes/No)?";
#chop($answer = <STDIN>);
#if($answer =~ /^[yY]/){
#    }
#else{
#    } 


print " Running RUNPCABACKEST  version 4.0   \n";
print "===========================================\n";

@infile2=&runcom('pget pcabackest infile');
chop($infile2[0]);
print "List of Standard mode 2 Science array FITS files (\@filename):[$infile2[0]]";
($infile = <STDIN>);
if($infile =~ /^./ ){
    chop($infile);
}
else{
    $infile = $infile2[0];
}
$origfile = $infile;

print "Output file which will contain the LIST of output files?:[outlist]";

($outlist = <STDIN>);
if($outlist =~ /^./){
    chop($outlist);}
else{
    $outlist = outlist;
}

@infile2=&runcom('pget pcabackest outfile');
chop($infile2[0]);
print "Suffix appended to the output background files (after underscore _):[$infile2[0]]";
($outroot = <STDIN>);
if($outroot =~ /^./){
    chop($outroot);}
else{
    $outroot = $infile2[0];
}

@infile2=&runcom('pget pcabackest filterfile');
chop($infile2[0]);
print "XTE Filter file:[$infile2[0]]";
($filterfile = <STDIN>);
if($filterfile =~ /^./){
    chop($filterfile);}
else{
    $filterfile = $infile2[0];
}

@infile2=&runcom('pget pcabackest modelfile');
chop($infile2[0]);
print "PCA Background model file:[$infile2[0]]";
($modelfile = <STDIN>);
if($modelfile =~ /^./){
    chop($modelfile);}
else{
    $modelfile = $infile2[0];
}

@infile2=&runcom('pget pcabackest interval');
chop($infile2[0]);
print "Seconds between succesive estimates:[$infile2[0]]";
($interval = <STDIN>);
if($interval =~ /^./){
    chop($interval);}
else{
    $interval = $infile2[0];
}

#@infile2=&runcom('pget pcabackest propane');
#chop($infile2[0]);
#print "Include propane layer spectra? (Yes, No):[$infile2[0]]";
#($propane = <STDIN>);
#if($propane =~ /^./){
#    chop($propane);}
#else{
#    $propane = $infile2[0];
#}

$modeltype = "BOTH";
$propane = "no";
$interpolate = "yes";
$maxmodels = "256";

@infile2=&runcom('pget pcabackest layers');
chop($infile2[0]);
print "Include individual xenon layer spectra? (Yes, No):[$infile2[0]]";
($layers = <STDIN>);
if($layers =~ /^./){
    chop($layers);}
else{
    $layers = $infile2[0];
}

@infile2=&runcom('pget pcabackest gaincorr');
chop($infile2[0]);
print "Correct for PCU Xenon gain variations? (Yes, No):[$infile2[0]]";
($gaincorr = <STDIN>);
if($gaincorr =~ /^./){
    chop($gaincorr);}
else{
    $gaincorr = $infile2[0];
}

if($gaincorr =~ /^[Yy]/){

    @infile2=&runcom('pget pcabackest gcorrfile');
    chop($infile2[0]);

    print "EDS gain correction file (CALDB) :[$infile2[0]]";
    ($gcorrfile = <STDIN>);
    if($gcorrfile =~ /^./){
	chop($gcorrfile);}
    else{
	$gcorrfile = $infile2[0];
    }
    $fullspec = 'yes';
} else {
    $gcorrfile = ' ';
    @infile2=&runcom('pget pcabackest fullspec');
    chop($infile2[0]);
    print "Expand xenon layer spectra to 256 channels? (Yes, No):[$infile2[0]]";
    ($fullspec = <STDIN>);
    if($fullspec =~ /^./){
	chop($fullspec);}
    else{
	$fullspec = $infile2[0];
    }
}

### By ZG, add saahfile to the parameter list ###

@infile2=&runcom('pget pcabackest saahfile');
chop($infile2[0]);
print "PCA SAA passage history file:[$infile2[0]]";
($saahfile = <STDIN>);
if($saahfile =~ /^./){
    chop($saahfile);}
else{
    $saahfile = $infile2[0];
}
#################################################

@infile2=&runcom('pget pcabackest syserr');
chop($infile2[0]);
print "Compute systematic error estimate? (Yes, No):[$infile2[0]]";
($syserr = <STDIN>);
if($syserr =~ /^./){
    chop($syserr);}
else{
    $syserr = $infile2[0];
}

$k=$outroot;
$count=0;
print "Outfile will be ${outlist}\n\n";

if($infile =~ /^@/ ){
    $infile =~ s/^@//;	# Remove the @ symbol
    open(INPUT_FILE,"$infile") || die "Sorry can't find $infile\n"; # Open the input file
    open(OUTPUT_FILE,"> $outlist") || die "Sorry can't open $outlist\n"; # Open a unique output file

    while(<INPUT_FILE>) {
	next if ( /^ *$/ ); # guard against blank or empty lines
	$count++;  # How many files are being processed? 
	chomp($_); # not chop() in case there is no <CR> in last file
	s/ //;  # Remove any blanks that are lest in the names.
	@list = split(/\//); # Split up the string using /
	$length_of_list = @list; # How many elements are there?
	$outall=$list[$length_of_list-1]."_".$k; # Create the output filename.

	print OUTPUT_FILE $outall."\n"; # Copy files from INFILE to OUTPUT
	$pcabackest_string = "pcabackest infile='".$_."' outfile='".$outall."' ";
	$pcabackest_string .= "filterfile='".$filterfile."' ";
	$pcabackest_string .= "modelfile='".$modelfile."' saahfile='".$saahfile."' modeltype=both interval=$interval ";
	$pcabackest_string .= "propane=no layers=$layers ";
	$pcabackest_string .= "gaincorr=$gaincorr gcorrfile='".$gcorrfile."' ";
	$pcabackest_string .= "fullspec=$fullspec interp=yes syserr=$syserr clobber=yes mode=no ";
	print "Calling pcabackest with string:\n$pcabackest_string\n\n";

	system($pcabackest_string);

	print "Generated output file: ${outall}. Continuing...\n\n";
    }
    close(INPUT_FILE);	# We are finished with the input file.
    close(OUTPUT_FILE);	# Close up the output file too.
    print "Generated output file: ${outlist}. \nThis file contains the names of the output files.\n";

    print "This file can be input into SAEXTRCT using the \@filename option.\n";
}
else {
    $count++; # How many files are being processed?

    open(OUTPUT_FILE,"> $outlist") || die "Sorry can't open $outlist\n"; # open a unique output file
    
    $infile=~ s/ //;  # Remove any blanks that are lest in the names.
    @list = split(/\//,$infile); # Split up the string using /
    $length_of_list = @list; # How many elements are there?
    $outall=$list[$length_of_list-1]."_".$k; # Create the output filename. 
    print OUTPUT_FILE $outall."\n"; # Copy the filename to output file.
    $pcabackest_string = "pcabackest infile='".$infile."' outfile='".$outall."' ";
    $pcabackest_string .= "filterfile='".$filterfile."' " ; 
    $pcabackest_string .= "modelfile='".$modelfile."' saahfile='".$saahfile."' modeltype=both interval=$interval ";
    $pcabackest_string .= "propane=$propane layers=$layers ";
    $pcabackest_string .= "gaincorr=$gaincorr gcorrfile='".$gcorrfile."' ";
    $pcabackest_string .= "fullspec=$fullspec interp=yes syserr=$syserr clobber=yes mode=no ";
    print "Calling pcabackest with string:\n$pcabackest_string\n\n";

    system($pcabackest_string);

    print "Generated output file: ${outall}. Continuing...\n\n";
    close(OUTPUT_FILE);	# Close the output file.
}

#@infile2=&runcom("pset pcabackest infile='".$infile."' ");
#@infile2=&runcom("pset pcabackest outfile='".$outroot."' ");
#@infile2=&runcom("pset pcabackest modelfile='".$modelfile."' ");
#@infile2=&runcom("pset pcabackest saahfile='".$saahfile."' ");
#@infile2=&runcom("pset pcabackest interval='".$interval."' ");
#@infile2=&runcom("pset pcabackest layers='".$layers."' ");
#@infile2=&runcom("pset pcabackest gaincorr='".$gaincorr."' ");
#@infile2=&runcom("pset pcabackest gcorrfile='".$gcorrfile."' ");
#@infile2=&runcom("pset pcabackest fullspec='".$fullspec."' ");
#@infile2=&runcom("pset pcabackest syserr='".$syserr."' ");

print "Update Parameter file for PCABACKEST? (Yes, No):";
$fupdate = <STDIN>;
if($fupdate =~ /^[Yy]/){
    @infile2=&runcom("pset pcabackest infile='".$origfile."' outfile='".$outroot."' filterfile='".$filterfile."' modelfile='".$modelfile."' saahfile='".$saahfile."' interval='".$interval."' layers='".$layers."' gaincorr='".$gaincorr."' gcorrfile='".$gcorrfile."' fullspec='".$fullspec."' syserr='".$syserr."'");
    print "PCABACKEST parameter file updated.\n";
}

#!/usr1/local/bin/perl5
# asmchannel 
# J. Lochner
# v 1.0, Dec 6, 1996
# Perl script to separate an asm .col file into separate .lc
# files for the different channels.  Script assumes 3 channels
# with boundaries 410-1188, 1189-1860, 1861-4750.
# If input file name is <infile>.col, output file names are of 
# the form <infile>_ch1.lc, etc.

require "utils.pl";
use Getopt::Std;

#
# Output the help if -h specified
# 
getopts('ch');
if (defined $opt_h) {
  print <<EOHELP1;
ASMCHANNEL v1.0

   This script separates an input XTE ASM color file into 
   separate light curve files for each of the different ASM 
   energy channels.  Currently, the ASM data is analyzed in
   3 channels: 1.3-3.0 kev; 3.0-5.0 kev; 5.0-12.2 kev.

   An input file of the form <infile>.col results in output
   files with names of the form <infile>_ch1.lc, <infile>_ch2.lc,
   and <infile>_ch3.lc.

USAGE
   asmchannel -h (print help) [prints this help page]
              -c (clobber)    [overwrite existing output file with same name?
                              [  (default: NO)]

EOHELP1
exit;
}
print "ASMCHANNEL V1.0 \n";
print "\n";

print "Input name of ASM color file: \n";
chop($color=<STDIN>);
print "\n";

# clobber option:
# Default is to not clobber files unless
# explicitly asked for via the -c switch.

if(defined $opt_c) {
    $clobber="yes";
    print "enabling clobber\n";
} else {
    $clobber="no";
}
# Loop through the three channels
#@minchan = (410,1189,1861); these corresponded to old channels boundries
#changed on day 2195

#now will have lower and upper bounds for channels (l=lower, u=upper)
@bounds = (0,1000,1001,1850,1851,3500);
$l = 0;
$u = 1;
$i = 0;
while ($i <= 2) {
    $chanlc = &outfile($color, $i+1);
#old expression
#    $expr = 'MINCHAN.eq.'.$minchan[$i];

#new expression after channel boundries changed
    $expr = 'MINCHAN.gt.'.$bounds[$l].'.AND.MINCHAN.lt.'.$bounds[$u];

    print "writing ",$chanlc,"\n";
    @result = &runcom('fselect '.$color.' '.$chanlc.' '.$expr.' clobber="'.$clobber.'"');
    $l+=2;
    $u+=2;
    $i++;
}
print "\n";

print "all done\n";


sub outfile {
   local($infile,$i) = @_;
   local($s1,$sfile,$outfile);

   $s1 = index($infile,'.');
   $sfile = substr($infile,0,$s1);
   $outfile = $sfile."_ch".$i.".lc";

}





package provide xsl_menu 1.0
 
proc read_file {read_what } {
global dirname xslfiles filestatus 
file_select
if { $filestatus == 1 } { 
  set read_what quit
  set cmdstr  "xread quit"
} else { 
  set cmdstr  "xread $read_what $xslfiles $dirname"
  unset xslfiles 
} 
RunCommand $cmdstr
}

proc file_select {} { 
global dirname filename filestatus 
global filter 
global filenames

set curdir [pwd]
set filestatus 0

toplevel .xslfile
set width [winfo screenwidth .]
set height [winfo screenheight .]
set x [expr int(2.0*$width/9.0)]
set y [expr int($height/7.0)]
wm geometry .xslfile +$x+$y 

#
# file panel
#
set ffile [frame .xslfile.ffile]
pack $ffile -side left

# file entry
set ffileentry [frame .xslfile.ffile.fileentry]
label $ffileentry.label -text "File:   " 
entry $ffileentry.entry -relief sunken \
       -font  "-*-courier-bold-r-normal--14-*-*-*-*-*" \
       -background white \
       -foreground black \
       -textvariable filename 
button $ffileentry.reset -text Reset -command { reset_file \
                 .xslfile.ffile.ffile.ffilename.filenames \
		 filename }
pack $ffileentry.label -side left
pack $ffileentry.entry -side left -expand true -fill x
pack $ffileentry.reset -side left

#filter entry
set ffilefilter [frame .xslfile.ffile.filefilter]
label $ffilefilter.label -text "Filter:   " 
entry $ffilefilter.entry -relief sunken \
       -font  "-*-courier-bold-r-normal--14-*-*-*-*-*" \
       -foreground black \
       -background white \
       -textvariable filter 
button $ffilefilter.reset -text Reset -command {reset_filter  \
             .xslfile.ffile.ffile.ffilename.filenames \
             .xslfile.ffile.ffile.ffiledate.filedates \
             .xslfile.ffile.ffile.ffilesize.filesizes \
              filter }
pack $ffilefilter.label -side left 
pack $ffilefilter.entry -side left -fill x
pack $ffilefilter.reset -side left

frame .xslfile.ffile.ffile

#file name
set ffilename [frame .xslfile.ffile.ffile.ffilename]
label $ffilename.label -text "File"
set  filenames [ listbox $ffilename.filenames -width 20 -height 20 \
           -borderwidth 2 -relief raised  -selectmode  multiple \
           -font "-*-courier-bold-r-normal--14-*-*-*-*-*" \
             -yscrollcommand {.xslfile.ffile.ffile.ffilesize.yscroll set} ]
pack $ffilename.label -side top -fill x
pack $filenames -side top

# file date
set ffiledate [frame .xslfile.ffile.ffile.ffiledate]
label $ffiledate.label -text "Date"
set  filedates [ listbox $ffiledate.filedates -width 20 -height 20 \
           -borderwidth 2 -relief raised  -selectmode single \
           -font "-*-courier-bold-r-normal--14-*-*-*-*-*" \
           -yscrollcommand {.xslfile.ffile.ffile.ffilesize.yscroll set} ]
pack $ffiledate.label -side top -fill x
pack $filedates -side top

# file size
set ffilesize [frame .xslfile.ffile.ffile.ffilesize]
label $ffilesize.label -text "Size"
set  filesizes [ listbox $ffilesize.filesizes -width 10 -height 20 \
           -borderwidth 2 -relief raised  -selectmode single \
           -font "-*-courier-bold-r-normal--14-*-*-*-*-*" \
           -yscrollcommand {.xslfile.ffile.ffile.ffilesize.yscroll set} ]
scrollbar $ffilesize.yscroll \
          -command { multi_scroll \
           { .xslfile.ffile.ffile.ffilename.filenames \
             .xslfile.ffile.ffile.ffiledate.filedates \
             .xslfile.ffile.ffile.ffilesize.filesizes \
           } }
pack $ffilesize.yscroll -side right -fill y 
pack $ffilesize.label -side top -fill x
pack $filesizes -side top
           
pack $ffilename -side left   
pack $ffiledate -side left  
pack $ffilesize -side left  


pack $ffileentry -side top  -fill x
pack .xslfile.ffile.ffile -side top  -fill both
pack $ffilefilter -side top -fill x -padx 40

#
# directory panel
#
set fdir [frame .xslfile.fdir]

# directory entry
set fdirentry [frame .xslfile.fdir.fdirentry]
label $fdirentry.label -text "Dir.:" 
entry $fdirentry.entry -relief sunken -width 10\
       -font  "-*-courier-bold-r-normal--14-*-*-*-*-*" \
       -foreground black \
       -background white \
       -textvariable dirname 
button $fdirentry.reset -text Reset -command { reset_dir \
             .xslfile.fdir.fdirname.dirnames \
             .xslfile.ffile.ffile.ffilename.filenames \
             .xslfile.ffile.ffile.ffiledate.filedates \
             .xslfile.ffile.ffile.ffilesize.filesizes \
              dirname }
pack $fdirentry.label -side left
pack $fdirentry.entry -side left -fill x 
pack $fdirentry.reset -side left

# directory list
set fdirname [frame .xslfile.fdir.fdirname]
label $fdirname.label -text "Directory"
set  dirnames [ listbox $fdirname.dirnames -width 20 -height 20 \
           -borderwidth 2 -relief raised  -selectmode single \
           -font "-*-courier-bold-r-normal--14-*-*-*-*-*" \
             -yscrollcommand {.xslfile.fdir.fdirname.yscroll set} ]
scrollbar $fdirname.yscroll \
          -command {.xslfile.fdir.fdirname.dirnames yview} 
pack $fdirname.yscroll -side right  -fill y
pack $fdirname.label -side top -fill x
pack $fdirname.dirnames -side top -expand true -fill both

label .xslfile.fdir.dummy  
pack $fdirentry -side top -expand true -fill x
pack $fdirname -side top -expand true
pack .xslfile.fdir.dummy -side bottom -expand true

#control bottons
frame .xslfile.control
button .xslfile.control.ok -text OK -command ok_file 
button .xslfile.control.cancel -text Cancel -command { cancel_file filestatus }
pack .xslfile.control.ok -ipady 10 -pady 50 -ipadx 10 -padx 10 -side top 
pack .xslfile.control.cancel -ipady 10 -ipadx 10 -padx 10 -side top  

pack .xslfile.fdir -side left -expand true -fill both
pack .xslfile.ffile -side left -expand true -fill both -after .xslfile.fdir
pack .xslfile.control -side left -expand true -fill both -after .xslfile.ffile

.xslfile.control.ok configure -state disabled
if ![info exists filter] { 
    set filter "*"
}
if ![file isdirectory $dirname] { 
   set dirname [ pwd ]
}
set_dir $dirnames $filenames $filedates  $filesizes dirname filter
set_file $filenames $filedates $filesizes filename

bind $ffileentry.entry <Return>  { set_file \
              .xslfile.ffile.ffile.ffilename.filenames \
              .xslfile.ffile.ffile.ffiledate.filedates \
              .xslfile.ffile.ffile.ffilesize.filesizes \
              filename }
bind $filenames  <ButtonRelease-1>  { select_file  \
            .xslfile.ffile.ffile.ffilename.filenames filename }
bind $ffilefilter.entry  <Return>  {filter_file \
             .xslfile.ffile.ffile.ffilename.filenames \
             .xslfile.ffile.ffile.ffiledate.filedates \
             .xslfile.ffile.ffile.ffilesize.filesizes \
              filter }
bind $fdirentry.entry <Return>  {set_dir \
             .xslfile.fdir.fdirname.dirnames \
             .xslfile.ffile.ffile.ffilename.filenames \
             .xslfile.ffile.ffile.ffiledate.filedates \
             .xslfile.ffile.ffile.ffilesize.filesizes \
             dirname filter }
bind $dirnames <ButtonRelease-1>  \
{select_dir .xslfile.fdir.fdirname.dirnames \
            .xslfile.ffile.ffile.ffilename.filenames \
            .xslfile.ffile.ffile.ffiledate.filedates \
            .xslfile.ffile.ffile.ffilesize.filesizes \
            dirname filter }

tkwait window .xslfile
set filename [string trim $filename]
set dirname [string trim $dirname] 
cd $curdir
}

#cancel the selection 
proc cancel_file {status } {
    upvar $status lstatus
    set lstatus 1
    destroy .xslfile
} 

# multi-list scrolling
proc multi_scroll {scroll_list args } {
    foreach item $scroll_list  {
        eval $item yview $args
    }
}

proc ok_file {} {
    global dirname filename xslfiles
    global filenames
    set pos [$filenames curselection ]
    foreach  item $pos {
        set filename [$filenames get $item]
        if [info exist xslfiles] { 
             append xslfiles ",$filename" 
        } else { 
             set xslfiles $filename 
        }
    }
    destroy .xslfile
} 

proc set_dir {dirnames filenames filedates filesizes rdirname rfilter}  {
    upvar $rfilter filter
    upvar $rdirname dirname 
    global xsl_last_parentdir

    cd $dirname
    set i 0
    set dirtree [file split $dirname]
    set space ""
    $dirnames delete 0 end
    foreach item $dirtree {
        $dirnames insert $i "$space$item" 
        append space " "
        incr i
    }
    set dirpos $i
    set xsl_last_parentdir [expr $dirpos - 1]
    $dirnames selection set $xsl_last_parentdir
    $dirnames yview $xsl_last_parentdir

    set filter [string trim $filter]
    set filelist [glob -nocomplain -- "*"]
    set filelist [lsort -ascii $filelist]
    set i 0
    foreach item $filelist {
       if [ file isdirectory $item ] {   
           $dirnames insert $dirpos "$space$item"  
           incr dirpos 
       }
       incr i
    }
    filter_file  $filenames $filedates $filesizes filter  
}

proc reset_dir {dirnames filenames filedates filesizes rdirname}  {
    upvar $rdirname dirname 
    set dirname ""
    $dirnames  selection clear 0 end
    $filenames  selection clear 0 end
    $filenames delete 0 end
    $filedates delete 0 end
    $filesizes delete 0 end
    .xslfile.control.ok configure -state disabled
}
   
proc select_dir {dirnames filenames filedates filesizes rdirname rfilter} {
    upvar $rfilter filter
    upvar $rdirname dirname 
    global xsl_last_parentdir
    set pos [$dirnames curselection ]
    set child [$dirnames get $pos]
    set child [string trim $child]
    incr pos -1
    if { $pos > $xsl_last_parentdir } { 
        set pos $xsl_last_parentdir
    }  
    set dirname "" 
    for {set i 0 } { $i <= $pos } {incr i } {
        set p [$dirnames get $i]
        set p [string trim $p] 
        set dirname [file join $dirname $p]
    } 
    set dirname [file join $dirname $child]
    set_dir $dirnames $filenames $filedates $filesizes dirname filter
}

proc filter_file { filenames filedates filesizes rfilter } { 
    upvar $rfilter filter
    if { $filter == "" } { 
        set filter "*"
    }
    set filelist [glob -nocomplain -- $filter]
    set filelist [lsort -ascii $filelist]
    $filenames delete 0 end
    $filedates delete 0 end
    $filesizes delete 0 end
    set i 0
    foreach item $filelist {
       if [ file isfile $item ] { 
           $filenames insert $i $item
           set dstr [clock format [file mtime $item] \
               -format "%Y/%m/%dT%T" ]
           $filedates insert $i $dstr
           $filesizes insert $i [file size $item] 
       }
       incr i
    }
    $filenames yview 0
    .xslfile.control.ok configure -state disabled
} 

proc reset_filter { filenames filedates filesizes rfilter } { 
    upvar $rfilter filter 
    set filter "*"
    filter_file  $filenames $filedates $filesizes filter 
}


proc select_file {filenames rfilename } {
    upvar $rfilename filename
    .xslfile.control.ok configure -state normal
}

proc set_file {filenames filedates filesizes rfilename } {
    upvar $rfilename filename
    set find no
    global xsl_old_set_file
    set filename [string trim $filename ]
#   $filenames  selection clear 0 end
    set last [$filenames index end ]
    for {set i 0 } { $i < $last } {incr i } {
        set line [ $filenames get $i ]
        if {$filename == $line } {
            set find yes
            $filenames selection set $i
            $filenames yview $i
            $filedates yview $i
            $filesizes yview $i
            .xslfile.control.ok configure -state normal
            break;
        }
    }
    if {$find == "no" } { 
        set filename ""
        .xslfile.control.ok configure -state disabled
    } else {
        .xslfile.control.ok configure -state normal
    }
}

proc reset_file {filenames rfilename } {
upvar $rfilename filename
set filename  ""
$filenames  selection clear 0 end
.xslfile.control.ok configure -state disabled
}

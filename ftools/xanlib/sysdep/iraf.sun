C*********
      SUBROUTINE LOCASE(CBUF)
      CHARACTER CBUF*(*)
C---
C Converts CBUF to lower case.
C---
C CBUF    I/O  The character array to convert to lower case
C---
      INTEGER   I, ITMP
C---
      DO 120 I=1,LEN(CBUF)
         ITMP=ICHAR(CBUF(I:I))
         IF(ITMP.GT.64 .AND. ITMP.LT.91) CBUF(I:I)=CHAR(ITMP+32)
  120 CONTINUE
      RETURN
      END
C*********
      SUBROUTINE TRLOG(CBUF, LBUF, CRET, LRET)
      CHARACTER CBUF*(*), CRET*(*)
      INTEGER   LBUF, LRET
C---
C Translate the logical name CBUF(:LBUF) to return CRET(:LRET)
C---
C CBUF    I    The string to translate
C LBUF    I    The number of valid characters in CBUF (can be zero)
C CRET      O  The translated string
C LRET      O  The number of valid characters in CRET (can be zero)
C---
      INTEGER   LENACT
C---
      CALL GETENV(CBUF(:LBUF),CRET)
      LRET=LENACT(CRET)
      RETURN
      END
C*********
      SUBROUTINE CONC(CBUF)
      CHARACTER CBUF*(*)
C---
C Convert case of CBUF to default case of system.
C For Unix this is lower case.
C---
C CBUF    I/O  The file name to be converted.
C---
      CALL LOCASE(CBUF)
      RETURN
      END
C*********
      SUBROUTINE PTEND(CDISK, CDIR, CFILE)
      CHARACTER CDISK*(*), CDIR*(*), CFILE*(*)
C---
C Prefix exTENsion.  Add 'prefix' to file name. Does automatic
C translation of environment variable as "disk".
C---
C CDISK     I    The disk name
C CDIR      I    The directory name
C CFILE     I/O  The file name
C---
C  2-Aug-1988 - [AFT]
C  23-Sep-1990 [KAA] added TRLOG check.
C---
      INTEGER   LENACT
      INTEGER   I, LDISK, LDIR, LFILE, LOUT, LTMP
      CHARACTER*256 CTMP, CTMP2
C---
C- Check for an environment variable as the disk. If none found
C- then also tries lowercase and uppercase versions.
      CTMP2 = CDISK
      LDISK=LENACT(CDISK)-1
      CALL TRLOG(CTMP2(2:LDISK+1), LDISK, CTMP, LTMP)
      IF (LTMP.EQ.0) THEN
         CALL UPC(CTMP2)
         CALL TRLOG(CTMP2(2:LDISK+1), LDISK, CTMP, LTMP)
      ENDIF
      IF (LTMP.EQ.0) THEN
         CALL LOCASE(CTMP2)
         CALL TRLOG(CTMP2(2:LDISK+1), LDISK, CTMP, LTMP)
      ENDIF
C---
C- Check that created filename will not overrun buffer.
      IF(LTMP.GT.0) THEN
         LDISK=LTMP+1
      ELSE
         LDISK=LENACT(CDISK)+2
      ENDIF
      LDIR =LENACT(CDIR)+1
      LFILE=LENACT(CFILE)
      LOUT=LDISK+LDIR+LFILE
      IF(LOUT.GT.LEN(CFILE)) THEN
         WRITE(*,*) 'PTEND error, not enough room to create filename.'
         STOP
      END IF
C---
C- Move characters in CFILE
      DO 170 I=0,LFILE-1
        CFILE(LOUT-I:LOUT-I)=CFILE(LFILE-I:LFILE-I)
  170 CONTINUE
C---
C- Finish the job
      IF(LTMP.GT.0) THEN
         CFILE(1:LDISK)=CTMP(:LTMP)//'/'
      ELSE
         CFILE(1:LDISK)='/'//CDISK(:LDISK-2)//'/'
      ENDIF
      CFILE(LDISK+1:LDISK+LDIR)=CDIR(:LDIR-1)//'/'
      RETURN
      END
C*********
      SUBROUTINE GETDAT (CDATE)
      CHARACTER*9 CDATE
C---
C Return date in format dd-mmm-yy
C---
C CDATE     O  The current date
C---
      CHARACTER*24 UDATE
      CALL FDATE(UDATE)
      CDATE(1:2)=UDATE(9:10)
      CDATE(3:3)="-"
      CDATE(4:6)=UDATE(5:7)
      CDATE(7:7)="-"
      CDATE(8:9)=UDATE(23:24)
      RETURN
      END
C*********
      subroutine getdir(directory)

C get the working directory name

      CHARACTER*(*) directory

      CALL getcwd (directory)
      RETURN
      END

C*********
      SUBROUTINE DIRPOS(CFILE, ISTA, IEND)
      CHARACTER CFILE*(*)
      INTEGER   ISTA, IEND
C---
C CFILE is a full filespec containing the disk and directory names.
C Upon return CFILE(ISTA:IEND) contains only the directory spec.
C---
C CFILE   I    The full file name
C ISTA      O  First valid character in directory spec, can be zero
C IEND      O  Last valid character in directory spec, can be zero
C---
C 1989-Jul-08 - [AFT]
C---
      INTEGER   LENACT
      INTEGER   I, LFILE
C---
      LFILE=LENACT(CFILE)
      IEND=0
      DO 190 I=1,LFILE
         IF(CFILE(I:I).EQ.',') IEND=I
         IF(CFILE(I:I).EQ.'/') IEND=I
  190 CONTINUE
      ISTA=MIN(1,IEND)
      RETURN
      END
C*********
      SUBROUTINE UPC(CSTR)
      CHARACTER CSTR*(*)
C---
C Converts character array in CSTR to upper case.
C---
C CSTR    I/O  The string to convert to upper case
C---
      INTEGER   I, ICSTR
C---
      DO 120 I= 1, LEN(CSTR)
         ICSTR= ICHAR(CSTR(I:I))
         IF(ICSTR.GT.96 .AND. ICSTR.LT.123) CSTR(I:I)= CHAR(ICSTR-32)
  120 CONTINUE
      RETURN
      END
C*********
      SUBROUTINE XCOPY(IFILE, OFILE)
C---
C fwj haberl   25-OCT-1990 
C copy file 'ifile' to 'ofile'
C---
      CHARACTER*(*) IFILE, OFILE
      
      CHARACTER*256 STRING
      INTEGER LSTRING, LENACT, IERR

      STRING = 'cp '//IFILE(1:LENACT(IFILE))//' '//
     &                      OFILE(1:LENACT(OFILE))
      LSTRING = LENACT(STRING)
      CALL SPAWN(STRING, LSTRING, IERR)
      RETURN
      END
C*********
      SUBROUTINE OPENWR(LUN,CFILE,CSTAT,CACC,CAR,LRECL,IREAD,IER)
      CHARACTER CFILE*(*), CSTAT*(*), CACC*(*), CAR*(*)
      INTEGER   LUN, LRECL, IREAD, IER
C---
C Wrapup routine for the Fortran OPEN statement.  This version will
C force the filename to be case insensitive, UNLESS the the first
C character of CFILE is a backslash.  If the first character is a
C backslash, then it should not be considered part of the filename
C on any system.
C   CFILE can be of the form 'disk,dir/sub,file' in which case, OPENWR
C will create 3 strings and call PTEND to construct the (system-
C dependent) file name.  This provides a system independent way
C to specify file names.
C---
C LUN     I    The logical unit number to be opened
C CFILE   I/O  The name of the file
C CSTAT   I    ='OLD', 'NEW' or 'UNKNOWN'
C CACC    I    ='D' for direct access, 'U' for unformatted, 'E' for append
C CAR     I    Carriage control, 'L' for 'LIST' or 'F'
C LRECL   I    Record length (required for direct access files)
C IREAD   I    <>0 for READONLY, SHARED
C IER       O  <>0 if file not opened
C---
      INTEGER   LENACT
C
      CHARACTER CTMP*255
      CHARACTER CDISK*255, CDIR*255
      CHARACTER CDUM
      INTEGER   ICCASE, IFILE, IOS, IS, KP, LFILE, LTMP
C---
   11 FORMAT(A)
C---
      LFILE=LENACT(CFILE)
C---
C Special treatment for terminal device.
C---
      IF(LFILE.EQ.0) THEN
C Needs additional check to prevent trashing a terminal
         IF(CAR(1:1).EQ.'L'.OR.CAR(1:1).EQ.'l') THEN
            OPEN(UNIT=LUN, FILE='/dev/tty', STATUS='OLD',
     :        IOSTAT=IOS)
            GOTO 140
         END IF
      END IF
C---
C Sort out file type.
C  0 = sequential access, formatted         " " only
C  1 = direct access => unformatted           "D" + anything
C  2 = sequential access, unformatted         "U" only
C  3 = sequential access, formatted, append   "E" only
C  4 = sequential access, unformatted, append "UE" only
C  5 = direct access, formatted               "DF' only
C
      CTMP=CACC
      CALL UPC(CTMP)
      IF(INDEX(CTMP,'D').NE.0 .AND. INDEX(CTMP,'F').EQ.0) THEN
         IFILE=1
      ELSE IF(INDEX(CTMP,'D').NE.0 .AND. INDEX(CTMP,'F').NE.0) THEN
         IFILE=5
      ELSE IF(INDEX(CTMP,'U').NE.0 .AND. INDEX(CTMP,'E').NE.0) THEN
         IFILE=4
      ELSE IF(INDEX(CTMP,'U').NE.0) THEN
         IFILE=2
      ELSE IF(INDEX(CTMP,'E').NE.0) THEN
         IFILE=3
      ELSE
         IFILE=0
      END IF
C---
C Check for a "+" as the first character of the first name in which case
C force an append
      IF(CFILE(1:1) .EQ. '+') THEN
         IF(IFILE.EQ.0) IFILE=3
         IF(IFILE.EQ.2) IFILE=4
         CFILE=CFILE(2:)
         LFILE=LFILE-1
      END IF
C
      KP=0
      CALL ALF(CFILE, LFILE, KP, CTMP, LTMP)
      IS=1
      ICCASE=0
      IF(LTMP.LT.LFILE) THEN
C Discovered a 'system independent' file specification.  Decode.
         CDISK=CTMP
         CALL ALF(CFILE, LFILE, KP, CTMP, LTMP)
         CDIR=CTMP
         CALL ALF(CFILE, LFILE, KP, CTMP, LTMP)
         CFILE=CTMP
         CALL PTEND(CDISK, CDIR, CFILE)
         LFILE=LENACT(CFILE)
      ELSE
         IF(CFILE(1:1).EQ.CHAR(92)) THEN
C If first chacter is a backslash, then ignore it (and possible case conv.)
            IS=2
         ELSE
            IF(CSTAT(1:1).EQ.'N' .OR. CSTAT(1:1).EQ.'n') THEN
C New files should be created in single case
               CALL CONC(CFILE)
            ELSE
C Old files can either be mixed case or single case
               ICCASE=1
            END IF
         END IF
      END IF
C---
  130 CONTINUE
      IF(IFILE.EQ.1) THEN
         OPEN(UNIT=LUN, FILE=CFILE(IS:LFILE), STATUS=CSTAT,
     :    ACCESS='DIRECT', RECL=LRECL,
     :    IOSTAT=IOS)
      ELSE IF(IFILE.EQ.2) THEN
         OPEN(UNIT=LUN, FILE=CFILE(IS:LFILE), STATUS=CSTAT,
     :    FORM='UNFORMATTED',
     :    IOSTAT=IOS)
      ELSE IF(IFILE.EQ.3) THEN
         OPEN(UNIT=LUN, FILE=CFILE(IS:LFILE), STATUS=CSTAT,
     :    FILEOPT='EOF',
     :    IOSTAT=IOS)
      ELSE IF(IFILE.EQ.4) THEN
         OPEN(UNIT=LUN, FILE=CFILE(IS:LFILE), STATUS=CSTAT,
     :    FILEOPT='EOF', FORM='UNFORMATTED',
     :    IOSTAT=IOS)
      ELSE IF(IFILE.EQ.5) THEN
         OPEN(UNIT=LUN, FILE=CFILE(IS:LFILE), STATUS=CSTAT,
     :    ACCESS='DIRECT', FORM='FORMATTED', RECL=LRECL,
     :    IOSTAT=IOS)
      ELSE
         OPEN(UNIT=LUN, FILE=CFILE(IS:LFILE), STATUS=CSTAT,
     :    IOSTAT=IOS)
      END IF
C
  140 IF(IOS.EQ.0) THEN
         INQUIRE(UNIT=LUN,NAME=CTMP)
         IF (LENACT(CTMP).GT.LEN(CFILE)) THEN
            WRITE (*,*)'CFILE in OPENWR is too short!'
            WRITE (*,*)'Opening file ',CTMP(1:LENACT(CTMP))
            WRITE (*,*)'Press RETURN to continue'
            READ (*,*)
         ELSE
            CFILE = CTMP
         ENDIF
      ELSE
C Special treatment under UNIX, to allow user to overwrite an
C existing file
C 117 is SUNOS, and 1017 is Solaris.  Pray that there is no conflict.
CEAG no prompting allowed in iraf
         IF(IOS.EQ.117 .OR. IOS.EQ.1017) THEN
c            CALL EDICOM('SAV', 3)
c            CALL PROMPT(CFILE(IS:LFILE)//' exists, reuse it?',0)
c            READ(*,11,ERR=900,END=900) CDUM
c            CALL EDICOM('RES', 3)
c            IF(CDUM.EQ.'Y' .OR. CDUM.EQ.'y') THEN
c               OPEN(UNIT=LUN, FILE=CFILE(IS:LFILE), STATUS='UNKNOWN')
c               CLOSE(UNIT=LUN, STATUS='DELETE')
c               GOTO 130
c            END IF
         END IF
         IF(ICCASE.EQ.1) THEN
            ICCASE=0
            CALL CONC(CFILE)
            GOTO 130
         END IF
      END IF   
  900 CONTINUE
      IER=IOS
      RETURN
      END
C*********
      SUBROUTINE SPAWN(CBUF, LBUF, IER)
      CHARACTER CBUF*(*)
      INTEGER   LBUF, IER
C---
C Spawn to operating system.  If LBUF=0 then this routine should
C spawn a shell and leave the user in the shell until the user logs
C out or exits the shell.  If LBUF<>0 then the system should only
C execute that one command and immediately return to the calling
C routine.
C---
C CBUF    I    The system command to execute
C LBUF    I    The number of valid characters in CBUF (can be zero)
C IER       O  =0 spawn was successful, <>0 otherwise
C---
      CHARACTER CSHELL*64
      INTEGER   IFIRST, LSHELL
      SAVE CSHELL, IFIRST, LSHELL
      DATA IFIRST/1/
C---
      IF(IFIRST.NE.0) THEN
         IFIRST=0
         CALL TRLOG('SHELL', 5, CSHELL, LSHELL)
         IF(LSHELL.EQ.0) THEN
            CSHELL='/bin/csh'
            LSHELL=8
         END IF
      END IF
      IF(LBUF.GT.0) THEN
         CALL system(CBUF(:LBUF))
      ELSE
         WRITE(*,*) 'Type exit to return.'
         CALL system(CSHELL(:LSHELL))
      END IF
      RETURN
      END
C*********
      SUBROUTINE GETTIM (CTIME)
      CHARACTER*8 CTIME
C---
C Return time in format hh:mm:ss
C---
C CTIME     O  The current time
C---
      CHARACTER UDATE*24
C---
      CALL FDATE(UDATE)
      CTIME=UDATE(12:19)
      RETURN
      END

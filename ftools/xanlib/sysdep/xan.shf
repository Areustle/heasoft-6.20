*XANLIB

**GTINIT
GTINIT

GTINIT is a routine to initialize timer.  It calls system-dependent routine
INITTS. 

--------------------------------------------------------------------------------
CALL GTINIT

Library XANLIB
--------------------------------------------------------------------------------

**GTSTAT
GTSTAT

GTSTAT is a routine to get statistics.  It calls the system-dependent routine
GETTS.  See WRSTAT to write them out and GTINT to initialize the timer.

--------------------------------------------------------------------------------
CALL GTSTAT(Value)

INTEGER*4 Value(5)

value(1) - Elapsed clock time (in units of 10msec).
value(2) - Elapsed CPU time (in units of 10msec).
value(3) - buffered I/O count
value(4) - direct I/O count
value(5) - page fault count
 
Library XANLIB
--------------------------------------------------------------------------------

**INQRWR
INQRWR

INQRWR is a wrap-up for the INQUIRE statement which allows machine-independent
filename specification.

--------------------------------------------------------------------------------
CALL INQRWR(Filenm,Ios)   

CHARACTER*(*) Filenm         i: filename
INTEGER*4  Ios               r: inquire status

Library XANLIB
--------------------------------------------------------------------------------

**LCHOP
LCHOP

LCHOP is a function which returns the position of the first non-blank character
in a string.

--------------------------------------------------------------------------------
INTEGER FUNCTION LCHOP(String)

CHARACTER*(*) String

Library XANLIB
--------------------------------------------------------------------------------

**OPENDA
OPENDA 

This subroutine opens a direct access file on unit LUN.

--------------------------------------------------------------------------------
CALL OPENDA(Lun,Cdef,Cext,Lrecl,Iopn,Ier)

CHARACTER Cdef*(*), Cext*(*)
INTEGER   Lun, Lrecl, Iopn, Ier

Lun     I    Free logical unit number.
Cdef    I    Default file name.
Cext    I    Default extension.
Lrecl   I    Record length in bytes.
Iopn      O  = 1 found default file, = 2 User entered filename.
Ier       O  < 0 ^Z pressed, = 0 file opened, > 0 file not opened.

Library XANLIB
--------------------------------------------------------------------------------

**RMVBLK
RMVBLK

RMVBLK is a subroutine to remove blanks from a character string.  The end of
the string is padded with blanks.

--------------------------------------------------------------------------------
CALL RMVBLK(Name)

CHARACTER*(*) Name

Library XANLIB
--------------------------------------------------------------------------------

**RMVLBK
RMVLBK 

RMVLBK is a subroutine which removes leading blanks from a character string. 
The end of the output string is padded with ASCII blanks.

--------------------------------------------------------------------------------
CALL RMVLBK(String)

CHARACTER*(*) String

Library XANLIB
--------------------------------------------------------------------------------

**RMVXBK
RMVXBK

RMVXBK is a subroutine to remove extra blanks from strings.  Wherever two or
more blanks are in succession, only one blank will remain.  The end of the
string is padded with blanks.  Any leading blanks at the beginning of the
string or null characters within the string will also be removed.  Null
characters are replaced with blanks.

--------------------------------------------------------------------------------
CALL RMVXBK(string)

CHARACTER*(*) string

Library XANLIB
--------------------------------------------------------------------------------

**RMVNUL
RMVNUL   

RMVNUL is a subroutine to remove null characters from a character string.  It
replaces them with blanks.

--------------------------------------------------------------------------------
CALL RMVNUL(Name)

CHARACTER*(*) Name

Library XANLIB
--------------------------------------------------------------------------------

**SETCHT
SETCHT 

SETCHT sets the chattiness level for output.  The input is a string containing
two numbers, N and M, where N and M are the chattiness levels of output to the
screen and log file, respectively.  The default is `10 10`.  Higher number
increase the chattiness.  `Iparse` indicates where the parsing begins.

--------------------------------------------------------------------------------
CALL SETCHT(String,Iparse)

CHARACTER*(*) String	  i/r: parse string
INTEGER*4 Iparse          i/r: parse position

Library XANLIB
--------------------------------------------------------------------------------

**SETERR
SETERR

SETERR is a subroutine to open an error log file.  If the file name is "none",
then the file is closed.  SETERR also sets the logging of command file
information.

Andy Pollock routine.  Is this used?

--------------------------------------------------------------------------------
CALL SETERR(Instrg,Parse,Default_file,Seshead)

CHARACTER*(*) Instrg, Default_file, Seshead
INTEGER Parse

Instrg    I    Parse string
Parse     I/O  Parse position string
Default_file   C*(*)    i: default log file if parse string blank
Seshead        C*(*)    i: session header

Library XANLIB
--------------------------------------------------------------------------------

**SETLOG
SETLOG

SETLOG is a subroutine to open a log file.  If the file name is "none", then
the file is closed.  SETLOG also sets the logging of command file information.

--------------------------------------------------------------------------------
CALL SETLOG(Instrg,Lenn,Default_file,Seshead)

CHARACTER*(*) Instrg, Default_file, Seshead
INTEGER Lenn

Instrg    I    Parse string
Lenn      I/O  Parse position string
Default_file   C*(*)    I: default log file if parse string blank
Seshead        C*(*)    I: session header

Library XANLIB
--------------------------------------------------------------------------------

**SETRCA      
SETRCA

SETRCA is a subroutine to set the flag so the recall buffer is enabled or
listed.   

--------------------------------------------------------------------------------
CALL SETRCA(Zstring,Ierr)

CHARACTER*(*) Zstring
INTEGER*4 Ierr , ln

Library XANLIB
--------------------------------------------------------------------------------

**SETSCR       
SETSCR

SETSCR is a subroutine to open a script file.  If the filename is "none", then
the file is closed.

--------------------------------------------------------------------------------
CALL SETSCR(Instrg,Lenn,Default_file,Default_suffix,Seshead)

CHARACTER*(*) Instrg, Default_file, Default_suffix, Seshead
INTEGER Lenn

Instrg         I    Parse string
Lenn           I/O  Parse position string
Default_file   I    Default filename for script
Default_suffix I    Default suffix for filename
Seshead        I    Session identifier

Library XANLIB
--------------------------------------------------------------------------------

**WRSTAT       
WRSTAT

WRSTAT is a subroutine to write statistics to the terminal.

--------------------------------------------------------------------------------
CALL WRSTAT(Value)

INTEGER*4 Value(5)

Value(1) - Elapsed real time in 10msetics
Value(2) - Elapsed CPU time in 10msetics
Value(3) - buffered I/O count
Value(4) - Direct I/O count
Value(5) - Page fault count

Library XANLIB
--------------------------------------------------------------------------------

**XFILL
XFILL

XFILL is a subroutine to fill storage with byte data.  It calls FILBYT.

--------------------------------------------------------------------------------
CALL XFILL(Nbytes,A,B)

Library XANLIB
--------------------------------------------------------------------------------

**XMOVE       
XMOVE

XMOVE is a subroutine to move bytes from A to B.  It calls MOVBYT.

--------------------------------------------------------------------------------
CALL XMOVE(Nbytes,A,B)

BYTE A(*), B(*)
INTEGER Nbytes

Library XANLIB
--------------------------------------------------------------------------------

*System_Dependent_Routines

**BLTOBY
BYTOBL

BYTOBL is a subroutine to accumulate sequential blocks from an access file
into a byte buffer.

This routine uses BYTE arrays and so is non-standard.  I believe that it should
be removed from the documentation to discourage people from using it.  There
should be a BLTOCH routine that uses character arrays.  (I think people will
get the wrong impression of the software if the very first routine listed is
non-standard.)  Also, a couple of other routines use the word BYTE in the
documentation; an attempt should be made to use character arrays. [AFT]

Systems: VMS.

--------------------------------------------------------------------------------
CALL BLTOBY(Bytear,Lenbyt,Buf,Clen,Cpage,Lenbuf,Iunit)

BYTE    Bytear(*), Buf(Lenbuf)
INTEGER Lenbuf, Lenbyt, Iunit, Cpage, Clen
 
Bytear	b(Lenbyt)	r: string of bytes to be accumulated
Lenbyt	i4		i: no. of bytes to accumulate
Buf	b(Lenbuf)	i/r: accumulation buffer
Clen	i4		i/r: current location in buffer
Cpage	i4		i/r: current record in file
Lenbuf	i4		i: size of buffer (BYTES !!!)
Iunit	i4		i: Fortran unit no.  File must have been
			   previously opend as a Fortran Unformatted
     			   direct access file.  Be sure that the record
       			   length in the open statement was a
       			   number of full-words (4-byte quantitites).
			   (Thus Lenbuf must be a multiple of 4)

Library XANLIB
--------------------------------------------------------------------------------
  
**CONC
CONC

CONC is a subroutine to convert a filename to system-preferred case.  It
converts case of Cbuf to default case of system.  For VMS, this is uppercase; 
for UNIX, it is lowercase.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation AIX, NeXT with
Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys Green
Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL CONC(Cbuf)

CHARACTER Cbuf*(*)

Cbuf    I/O  The filename to be converted.

Library XANLIB
--------------------------------------------------------------------------------

**DATTIM
DATTIM

DATTIM is a subroutine which returns the current date and time in format
dd-mmm-yyyy hh:mm:ss.ss.

Systems: VMS. 

--------------------------------------------------------------------------------
CALL DATTIM(Cdate)
      
CHARACTER*(*) Cdate

Cdate     O  The current date and time

Library XANLIB
--------------------------------------------------------------------------------

**DEBUGH
DEBUGH

DEBUGH is a subroutine to set up the VAX debug handler.  It is only operational
on VMS systems; on other systems it is a dummy routine.

This may possibly be a routine only used by XSPEC. [AFT]  
XSPEC does not use it. [KAA]

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, NeXT with Oasys Green Hill compiler,
Sequent.

--------------------------------------------------------------------------------
CALL DEBUGH

Library XANLIB
--------------------------------------------------------------------------------

**DELFIL
DELFIL

DELFIL is a subroutine which deletes the file specified by the input logical
name or file specification.

Systems: VMS. 

--------------------------------------------------------------------------------
CALL DELFIL(File,Status)     

CHARACTER*(*) File      
INTEGER*4 Status      

Library XANLIB
--------------------------------------------------------------------------------

**DIRIMG
DIRIMG    

DIRIMG is a subroutine which spawns to the operating system and calls for a
directory listing of all `*.Cext` files where `Cext` is the input file
extension. 

Systems: VMS, Sun UNIX, Ultrix, NeXT with Oasys Green Hill compiler.

--------------------------------------------------------------------------------
CALL DIRIMG(Cext)

CHARACTER*(*) Cext
CHARACTER*256 String
INTEGER Lstring, Ierr, Lenact

Library XANLIB
--------------------------------------------------------------------------------

**DIRPOS
DIRPOS
 
DIRPOS is a subroutine which returns the number of characters in directory
specification.  Cfile is a full file specification containing the disk and
directory names.  Upon return, CFILE(ISTA:IEND) contains only the directory
spec. 

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL DIRPOS(Cfile,Ista,Iend)

Cfile   I    The full filename 
Ista      O  First valid character in directory specification, can be zero 
Iend      O  Last valid character in directory specification, can be zero

Library XANLIB
--------------------------------------------------------------------------------

**ERRSET
ERRSET

ERRSET is a wrap-up subroutine to load a dummy VMS ERRSET routine.

Systems: Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT with
Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys Green
Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL ERRSET(Ier, Q1, Q2, Q3, Q4, Imxlim)
      
INTEGER   Ier, Imxlim
LOGICAL   Q1, Q2, Q3, Q4

LIBRARY Xanlib
--------------------------------------------------------------------------------

**FILBYT
FILBYT

FILBYT is a subroutine to fill storage with byte data.  It is an interface to
the lib$movc5 system routine for filling data.

Systems: VMS.

--------------------------------------------------------------------------------
CALL FILBYT(Nbytes,A,B)

INTEGER*4 Nbytes  I      ! Number of bytes to move
BYTE A(*)         I      ! Filling character
BYTE B(*)           O    ! Destination of bytes

Library XANLIB
--------------------------------------------------------------------------------

**FILENM
FILENM

FILENM is a subroutine which completes the file specification of the input
logical name or file specification.

Systems: VMS.

--------------------------------------------------------------------------------
CALL FILENM(File,Status)

CHARACTER*(*) File      
INTEGER*4 Status      

Library XANLIB
--------------------------------------------------------------------------------

**FRELUN
FRELUN

FRELUN is a subroutine to release a Logical Unit Number.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL FRELUN(Lun)

Lun       I    The Logical Unit Number.

Library XANLIB
--------------------------------------------------------------------------------

**GETDAT       
GETDAT 

GETDAT is a subroutine to get the current date and return it in the format
dd-mmm-yyyy.

Systems: system independent, using ANSI C time functions

--------------------------------------------------------------------------------
CALL GETDAT(Cdate)

Cdate     O  The current date.

Library XANLIB
--------------------------------------------------------------------------------

**GETDIR       
GETDIR  

GETDIR is a subroutine to get the current working directory.  It opens a
scratch file, tests its existance, then closes it with delete.  This routine
duplicates the Sun-UNIX GETCWD routine.

Systems: VMS, Sun UNIX, Ultrix, NeXT with Oasys Green Hill compiler.

--------------------------------------------------------------------------------
CALL GETDIR(Directory)

CHARACTER*(*) Directory

Library XANLIB
--------------------------------------------------------------------------------

**GETLUN       
GETLUN  

GETLUN is a subroutine to return a free Logical Unit Number.  Units 1-9 should
be avoided since many programs use these units without warning.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstations running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL GETLUN(Lun)

Lun       O  An unopened Logical Unit Number.

Library XANLIB
--------------------------------------------------------------------------------

**GETRAN
GETRAN      

GETRAN is a function to get a random number.  It returns a real number
uniformly distributed between 0 and 1.

This is in the system dependent routines and should not be.  The SUN version
implements Press's random number routine which is very bad.  I have a system
independent routine called RANNUM, but I adopted the Fortran 90 calling
convention and so it is not a 'drop-in' replacement.  (It's now considered bad
form for Functions to change the value in the argument list the way GETRAN
does.) [AFT]

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, Sequent.

--------------------------------------------------------------------------------
REAL FUNCTION GETRAN(Iseed)

Iseed   I/O  Random seed.

Library XANLIB
--------------------------------------------------------------------------------

**GETREM
GETREM

GETREM is a subroutine to return the name of the current remote user.

Systems: VMS.

--------------------------------------------------------------------------------
CALL GETREM(Remuser, Ierr)
      
CHARACTER*(*) Remuser
INTEGER  Ierr

Remuser   O     The remote ID.
Ierr      O     = 1 if valid, <> 0 if it could not generate user ID.

Library XANLIB
--------------------------------------------------------------------------------

**GETTRM
GETTRM

GETTRM is a subroutine to associate a logical unit with the terminal.

Systems: VMS.

--------------------------------------------------------------------------------
CALL GETTRM(Lun,Status)     

INTEGER Lun, Status
      
Library XANLIB
--------------------------------------------------------------------------------

**GETROT       
GETROT

GETROT is a subroutine to get the user's root directory.

Systems: VMS, Sun UNIX, Ultrix, NeXT with Oasys Green Hill compiler.

--------------------------------------------------------------------------------
CALL GETROT(Rootname)

CHARACTER*(*) Rootname

Library XANLIB
--------------------------------------------------------------------------------

**GETTIM
GETTIM

GETTIM is a subroutine to get the current time and return it in format
hh:mm:ss.

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT
with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys
Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL GETTIM(Ctime)

CHARACTER*8 Ctime
Ctime     O  The current time

Library XANLIB
--------------------------------------------------------------------------------

**GETTS
GETTS       

GETTS is a subroutine to get the runtime statistics.

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT
with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys
Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL GETTS(Ivalue)

INTEGER Ivalue(5)

Ivalue(1) - Elapsed real time in 10msetics
Ivalue(2) - Elapsed CPU time in 10msetics
Ivalue(3) - Buffered I/O count
Ivalue(4) - Direct I/O count
Ivalue(5) - Page fault count

Library XANLIB
--------------------------------------------------------------------------------

**GETUSE
GETUSE 

GETUSE is a subroutine to get the current user ID.

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT
with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys
Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL GETUSE(Cuser,Ierr)

CHARACTER Cuser*(*)
INTEGER Ierr

Cuser     O  The current user ID
Ierr      O  = 1 if valid, <> 0 if it could not generate user ID

Library XANLIB
--------------------------------------------------------------------------------

**GTRCLN
GTRCLN

GTRCLN is a function to get the record length of a direct access file.

Get the record length (in bytes) of a direct access unformatted file assuming
that the first sixteen bytes are (what?):

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT
with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys
Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
INTEGER FUNCTION GTRCLN(Cfile)

CHARACTER Cfile*(*)

C*4  Machine ID ('Sun ' or 'VAX ')
I*4  Check integer
R*4  Check real
I*4  Number of bytes per record
Also checks whether check integer and real are correct.
Cfile   I    The filename
GTRCLN    O  If successful = # bytes per record
             If failed to open file = 0
             If failed integer check = -1
             If failed real check = -2

Library XANLIB
--------------------------------------------------------------------------------

**IAND
IAND

IAND is a wrap-up function to simulate VMS IAND function.  The wrapup is NOT
intrinsic; the user must pass INTEGER*4 arguments.

Systems: Sun UNIX, Ultrix, NeXT with AT&T f2c compiler, Sequent.

--------------------------------------------------------------------------------
FUNCTION IAND(Ia, Ib)
     
INTEGER*4 IAND
INTEGER*4 Ia, Ib

Ia    I    First number
Ib    I    Second number

LIBRARY Xanlib
--------------------------------------------------------------------------------

**IOR
IOR

IOR is a wrap-up function to simulate VMS IOR function.  The wrapup is NOT
intrinsic; the user must pass INTEGER*4 arguments.

Systems: Sun UNIX, Ultrix, NeXT with AT&T f2c compiler, Sequent.

--------------------------------------------------------------------------------
FUNCTION IOR(Ia, Ib)
      
INTEGER*4 IOR
INTEGER*4 Ia, Ib

Ia    I    First number
Ib    I    Second number

LIBRARY Xanlib
--------------------------------------------------------------------------------

**ISHFT
ISHFT

ISHFT is a wrap-up function to simulate VMS ISHF function.  The wrapup is NOT
intrinsic; the user must pass INTEGER*4 arguments.

Systems: Sun UNIX, Ultrix, NeXT with AT&T f2c compiler, Sequent.

--------------------------------------------------------------------------------
FUNCTION ISHFT(Ia, Ib)
      
INTEGER*4 ISHFT
INTEGER*4 Ia, Ib

Ia    I    Number to be shifted
Ib    I    Number of bits to shift by (negative=shift right)

LIBRARY Xanlib
--------------------------------------------------------------------------------

**I2CONV
I2CONV

I2CONV is a function to convert INTEGER*2 from IBM byte order to processor byte
order. 

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT
with Absoft  Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys
Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
INTEGER*2 FUNCTION I2CONV(Ix)

INTEGER*2 Ix
Ix      I    The number to be converted

Library XANLIB
--------------------------------------------------------------------------------

**I4CONV
I4CONV

I4CONV is a function to convert INTEGER*4 from IBM byte order to processor byte
order. 

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT
with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys
Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
INTEGER*4 FUNCTION I4CONV(I4data)

INTEGER*2 I4data(2)

Library XANLIB
--------------------------------------------------------------------------------

**INITTS
INITTS 

INITTS is a subroutine to initialize the runtime statistics.

Systems: VMS, Sun UNIX, Ultrix, HP UNIX, IBM Powerstation running AIX, NeXT
with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with Oasys
Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL INITTS

INTEGER LIB$INIT_TIMER
INTEGER istat

Library XANLIB
--------------------------------------------------------------------------------

**LEAVE
LEAVE

LEAVE is a subroutine to signal a successful exit from a program.

Systems: VMS, Sun UNIX, NeXT with Oasys Green Hill compiler.

--------------------------------------------------------------------------------
CALL LEAVE

Library XANLIB
--------------------------------------------------------------------------------

**LOCASE
LOCASE

LOCASE is a subroutine to convert Cbuf to lowercase.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hilll compiler, Sequent.

--------------------------------------------------------------------------------
CALL LOCASE(Cbuf)

CHARACTER Cbuf*(*)

Cbuf    I/O  The character array to convert to lowercase

Library XANLIB
--------------------------------------------------------------------------------

**MOVBYT
MOVBYT  

MOVBYT is a subroutine to move bytes from A to B.  It is an interface to the
lib$movc3 system routine for moving bytes.

Systems: VMS, Sun UNIX, Ultrix, NeXT with Oasys Green Hill compiler.

--------------------------------------------------------------------------------
CALL MOVBYT(Nbytes,A,B)

INTEGER Nbytes    I             ! number of bytes to move
Byte A(*)         I             ! source of bytes
Byte B(*)         O             ! destination of bytes

Library XANLIB
--------------------------------------------------------------------------------

**OPENWR
OPENWR

OPENWR is a wrap-up routine for the Fortran OPEN statement.  This version will
force the filename to be case insensitive, UNLESS the the first character of
Cfile is a backslash.  If the first character is a backslash, then it should
not be considered part of the filename on any system.

Cfile can be of the form 'disk,dir/sub,file' in which case, OPENWR will create
three strings and call PTEND to construct the (system-dependent) filename. 
This provides a system-independent way to specify filenames.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL OPENWR(Lun,Cfile,Cstat,Cacc,Car,Lrecl,Iread,Ier)

Lun     I    The logical unit number to be opened
Cfile   I/O  The name of the file
Cstat   I    ='OLD', 'NEW' or 'UNKNOWN'
Cac     I    ='D' for direct access, 'U' for unformatted, 'E' for append
Car     I    Carriage control, 'L' for 'LIST' or 'F'
Lrecl   I    Record length (required for direct access files)
Iread   I    <> 0 for READONLY, SHARED
Ier       O  <> 0 if file not opened

1989-Aug-10 - Do not call CON if file name starts with backslash [AFT]
1989-Jul-07 - Allow file names of form 'disk,dir/sub,file' [AFT]
1989-Feb-13 - Latest mod [AFT]
1991-May-28 - Added direct access, formatted Ifile=5 [NEW,LA]

Library XANLIB
--------------------------------------------------------------------------------

Needs some examples!

**PLTTER 
PLTTER    

This is a routine used by PLT used only at IOA, Cambridge, UK.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL PLTTER(Ctype)

CHARACTER Ctype*(*)

Ctype='A' switches terminal into alpha mode.
Ctype='G' switches terminal into graphics mode.
NOTE: Caps.

Library XANLIB
--------------------------------------------------------------------------------

**PROMPT
PROMPT       

PROMPT is a subroutine to write Cbuf to the terminal and leave the cursor at
the end of Cbuf when finished.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL PROMPT(Cbuf,Lbuf)

Cbuf    I    The prompt string
Lbuf    I    The number of valid characters in CBUF (can be zero)

Library XANLIB
--------------------------------------------------------------------------------

**PTEND
PTEND   

PTEND is Prefix exTENsion.  It is a subroutine to add a 'prefix' to filename.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL PTEND(Cdisk,Cdir,Cfile)

Cdisk     I    The disk name
Cdir      I    The directory name
Cfile     I/O  The file name

Library XANLIB
--------------------------------------------------------------------------------

**RDFORN
RDFORN

RDFORN is a subroutine to read a foreign command, i.e., the command line.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL RDFORN(Cbuf,Lbuf)

Cbuf      O  Data from the command line
Lbuf      O  The number of valid characters in Cbuf (can be zero)

Library XANLIB
--------------------------------------------------------------------------------

**RDULI2
RDULI2 

RDULI2 is a subroutine from MicroVMS Programmers' Manual 9-8 to read an
INTEGER*2 record and will keep trying if it is locked.

Systems: VMS.

--------------------------------------------------------------------------------
CALL RDULI2(Lu,Rec_no,Len,Ibuf,Status)

INTEGER*4 Lu , Len , Status , Rec_no 
INTEGER*2 Ibuf(*)

Library XANLIB
--------------------------------------------------------------------------------

**RDULKC
RDULKC   

RDULKC is a subroutine from MicroVMS Programmers' Manual 9-8 to read a
character string record and will keep trying if it is locked.  

Systems: VMS, Sun UNIX, Ultrix, NeXT with Oasys Green Hill compiler.

--------------------------------------------------------------------------------
CALL RDULKC(Lu,String,Ieof,Status)

INTEGER*4 Lu , Status , Ieof
CHARACTER*(*) String
 
Library XANLIB
--------------------------------------------------------------------------------

**SPAWN
SPAWN 

SPAWN is a subroutine to spawn to the operating system.  If Lbuf = 0, then this
routine should spawn a shell and leave the user in the shell until he logs out
or exits the shell.  If Lbuf <> 0, then the system should only execute that one
command and immediately return to the calling routine.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL SPAWN(Cbuf,Lbuf,Ier)

Cbuf    I    The system command to execute
Lbuf    I    The number of valid characters in CBUF (can be zero)
Ier       O  = 0 spawn was successful, <> 0 otherwise

Library XANLIB
--------------------------------------------------------------------------------

**STLOG
STLOG

STLOG is a subroutine to set logical name.  It is an interface to
lib$set_logical.

Systems: VMS.

------------------------------------------------------------------------------- 
CALL STLOG(Name,Ln,Value,Lv)

CHARACTER*(*) Name      
INTEGER Ln , Lv     
CHARACTER*(**) Value  

Library XANLIB
--------------------------------------------------------------------------------

**TRLNM
TRLNM

TRLNM is a subroutine to translate the logical name Name(:Ln) in the table
Table(:Lt) to return the Value(:Lv).

Systems: VMS. 

--------------------------------------------------------------------------------
CALL TRLNM(Table, Lt, Name, Ln, Value, Lv)

CHARACTER*(*) Table, Name, Value
INTEGER Lt, Ln, Lv

Table   I    The table containing string to translate
Lt      I    The number of valid characters in TABLE (can be zero)
Name    I    The string to translate
Ln      I    The number of valid characters in NAME (can be zero)
Value     O  The translated string
Lv        O  The number of valid characters in VALUE (can be zero)

Library XANLIB
--------------------------------------------------------------------------------

**TRLOG 
TRLOG 

TRLOG is a subroutine to translate the logical name Cbuf(:Lbuf) to return
Cret(:Lret)

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL TRLOG(Cbuf,Lbuf,Cret,Lret)

Cbuf    I    The string to translate
Lbuf    I    The number of valid characters in CBUF (can be zero)
Cret      O  The translated string
Lret      O  The number of valid characters in CRET (can be zero)

Library XANLIB
--------------------------------------------------------------------------------

**UNLOCK
UNLOCK  

UNLOCK is a subroutine to invoke the VMS system call "unlock".   For non-VMS
systems, it is a dummy version of the VMS routine to unlock a file.

Systems: VMS, Sun UNIX, Ultrix, NeXT with Oasys Green Hill compiler.

--------------------------------------------------------------------------------
CALL UNLOCK(Io)

INTEGER*4 Io

Library XANLIB
--------------------------------------------------------------------------------

**UPC
UPC

UPC is a subroutine to convert the character array in Cstr to uppercase.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, IBM Powerstation running AIX,
NeXT with Absoft Fortran 77 compiler, NeXT with AT&T f2c compiler, NeXT with
Oasys Green Hill compiler, Sequent.

--------------------------------------------------------------------------------
CALL UPC(Cstr)

CHARACTER Cstr*(*)

Cstr    I/O  The string to convert to uppercase

Library XANLIB
--------------------------------------------------------------------------------

**XWAIT
XWAIT

WAIT is a subroutine which waits the specified number of seconds before
returning.

Systems: VMS.

--------------------------------------------------------------------------------
CALL XWAIT(Secs)     

REAL Secs

Secs     I  The number of seconds to wait before returning.

Library XANLIB
--------------------------------------------------------------------------------

**XCOPY
XCOPY

XCOPY is a subroutine to copy file 'Ifile' to file 'Ofile'.

Systems: VMS, Sun UNIX, Ultrix, DOS, HP UNIX, NeXT with Oasys Green Hill
compiler.

--------------------------------------------------------------------------------
CALL XCOPY(Ifile,Ofile)

CHARACTER*(*) Ifile , Ofile

Library XANLIB
--------------------------------------------------------------------------------

**XRENAME
XRENAMS

XRENAME is a subroutine to rename file `Ifile` to file `Ofile`. 

Systems: VMS. 

--------------------------------------------------------------------------------
CALL XRENAM(Ifile, Ofile)

CHARACTER*(*) Ifile, Ofile
      
Library XANLIB
--------------------------------------------------------------------------------

**XLOC
XLOC

XLOC is a subroutine to return the internal address of a program storage
element.

Systems: VMS.

--------------------------------------------------------------------------------
INTEGER*4 FUNCTION XLOC(Arg)

LOGICAL*1 Arg(*)

Library XANLIB
--------------------------------------------------------------------------------

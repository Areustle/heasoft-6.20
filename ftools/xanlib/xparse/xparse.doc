				XPARSE (2)
 
	A set of routines to provide a simple parsing facility.  These are
written in FORTRAN 77 and so should be (semi)transportable, although there
are several VMS hooks.   This documentation is divided into three parts.
The first part describes how a program that uses XPARSE looks to a user
of the program, the second tells how to use the top level XPARSE routines
when you write the program and the third tells how more sophisticated
effects can be derived from special top level routines and selected
lower level XPARSE routines.

HOW AN XPARSE-BASED PROGRAM LOOKS LIKE TO THE USER (INPUT):
 
	The XPARSE routines provide a general easy interface between
a program and the user, particularly for command-driven or other
highly interactive programs.  The basic cycle is where the user inputs
a line (optionally after some prompt) on the terminal.  This line can then
be analyzed by the program as a string of arguments.  The program can then
try to interpert each argument as a number or as a character string.
Character strings can be checked if they are one of an allowed list of
options.  The actual details of how a line is interpreted depend on the
particular program and how it uses the various XPARSE facilities.
An example of an input line might be

Foo , 4.7 "Some information" - ! A comment

which is divided into 3 arguments: "Foo", "4.7"(which can be interpreted
as a number), and "Some information".
	When parsing an input line there are several special characters:
		blank		( ) (a horizontal tab (^I) is treated as
					a blank also)
		comma		(,)
		special delim.	(|) (the vertical bar)
		comment char	(!)
		begin quote	(")  (Note, the begin and end quote are the
		end quote	(")      same character by default, the ")
	There are special characters whose interpretation depends on their
position in the line:
		infinite skip	(/) 
		continuation	(-)
		end of file	(/*) OR CNTRL-Z
		indirect file	(@)
	When parsing a line for an argument initial and trailing blanks
are ignored.  In addition an argument field is delimited by a comma,
or some of the special characters (particularly the comment, end of input,
special delimeter).  If an argument has no non-blank characters before
a delimeter is reached, the argument is said to be an empty, null, or skipped
argument.  Conventionally, an empty argument is to be treated as indicating
some default value.  Examples:
foo
	is a line consisting of a single argument "foo";
foo bar
   foo,bar
foo    bar
foo,   bar
foo  , bar
foo|bar
	are all lines with two arguments "foo" followed by "bar";
,, foo
  , , foo
	have two initial empty arguments followed by "foo";
bar,,foo
	has "bar", an empty argument and "foo".
 
	When looking for arguments, the comment character is treated logically
as the end of the line.  Thus any following characters are ignored (and can
be used as a comment). Thus the line	
foo ! bar
	has a single argument "foo" followed by a comment "bar".  Comment
strings can not be read by the program.
, !a comment
	has a line with two empty arguments before the comment.
 
	If a user wishes to input an argument which contains a blank, comma,
comment char, special delimeter, etc., then he should begin the argument
with the begin quote character, and have at the end an end quote character.
Reaching the end of the input line is equivalent to having the end quote
character.  If you want to have the string include the end quote character
then you should double the character (similar to the way that FORTRAN handles
character strings with embedded single quotes).  By default, the begin quote
and end quote character are the same (the ASCII double-quote: " ), although
a particular program that uses XPARSE is allowed to change these (and all
special characters) to different characters. Examples:
"This argument contains blanks"
"This argument ends with a single """," followed by a 2nd argument with blanks"
"If it wasn't for the initial "" the words following the ! would be missing"
" A final "" is optional for the last argument

	Some characters depend on their location in the input line.  For
example, if the infinite skip character (/) is the last non-blank character
on the line, or the last before the comment character, it is treated as
a character delimeter, similar to a comma.  In addition, it is equivalent
to an infinite series of skipped or empty arguments existing before the
end of line condition is raised.  This is mostly done for compatability with
the standard FORTRAN List Directed I/O standards where a / indicates that
all remaining arguments of a read are to retain their current values.  If
the character is placed anywhere else in the line, it is just an ordinary
character and will be treated as part of an argument.  Examples of lines
that use the infinite skip character:
Foo, bar, bletch /
Foo bar bletch,/
Foo bar bletch/ ! a comment after the infinite skip char
	all have three non-empty arguments, followed by infinite skips. 
In the following cases the / is NOT treated as an infinite skip character:
file/device  !This is a single argument "file/device"
foo/,		!This is a single argument "foo/"
"foo/"		!As is this.

	If the continuation character (-) is the last non-blank character
on a line, or the last before the comment character, then the next line
input will be treated as logically concatenated to the current line.  For
terminal input the user will receive a prompt "->" indicating that the
line is treated as a continuation.  Note that the continuation character
is NOT a delimeter, and thus it must be separated from any earlier argument
by a blank or some other delimeter.  Examples:
These two lines -
are really one line !with 7 arguments
This line is not concatenated- !the 5th argument is "concatenated-"
with the next.
Even if you concatenate -!you are allowed to have comments
on each input line ! this was equivalent to an 8 argument line.
	Because of the way continuations are processed, the user may not
see the prompt until the program processes the last argument on the line.
Thus the type-ahead for the continuation may be `invisible'.

	When a user inputs a line, the first few characters are checked for
two special strings:  the EOF string and the indirect character.  Both
must start at the first character of the string.  The EOF string (by default
the /*) is a way of producing an end of file signal for the read.  For
terminal input, an equivalent way of generating an end of file is
a CTRL-Z (this can also be used to terminate the previous input line).
Examples:
/* !This is a generated EOF
 /* ! This is a single argument input string "/*" because of the initial blank.
	The indirect character tells the program to start reading its input
from the file specified on the remainder of the line.  N.B. that the line is
NOT parsed out and that all characters are considered significant for the
file name.  In particular a comment field is NOT allowed.  Indirect files
can be nested generally to a depth of 10, although circumstances may reduce
this.  The default extension for an indirect file is .COM, although this is
under the control of the program.  An example
@file
	will cause subsequent input to be read from FILE.COM.

	MATCHING KEYWORD ARGUMENTS.

	A common type of argument that a program might expect would be a
character string that is matched against a list of possible keywords, such
as a list of commands to tell the program what to do next.  In general for
such matches case is not significant, i.e. "KEYWORD" would match "keyword".
Also partial matches are usually allowed, i.e. "key" is a partial match
to "keyword".  If the list of allowed matches includes two such partial 
matches, then usually the first in order is taken.  For example if the
match-list is ("keyword","keyhole",...) then "key" matches "keyword".
Of course, any exact match takes precedence, in ("keyword",...,"key") then
"key" matches "key".
	The particular program may modify any of these conditions individually.
Case may be made significant, partial matches may be disallowed, or if allowed
then only unique partial matches (so that "keyh" would be necessary for a
legal argument matched against the list ("keyhole","keyword",...) ).

	Some programs will use a special choice subroutine, which will prompt
a user to input a single argument that will be compared to a list of choices.
An example of such an interface might be

Please choose a keyword: (default)

where the string in parentheses is returned as the default if the user just
returns an empty line.  If the user returns a ?, then he will be given a list
of all the legal options.  An EOF should be handled by the program as an
exceptional reply (e.g. to revert to a previous stage of the program).
	An even more special case is when the user is prompted to provide an
answer to a question:
 
Do you know how to respond to this? (y)
 
In these cases the possible answers are "yes" and "no".
Again the default value is in the parentheses.

	XPARSE OUTPUT: THE LOG-FILE FACILITY

	Some programs may use the XPARSE Log file facility, allowing a copy
of selected output sent to the terminal during the running of the program
to be maintained.  Additional material may also added to the log file.  This
file may be automatically qued for the printer, or saved, depending on program
control.  The default file type for the log is .LOG, and the default name is
LOG (i.e. LOG.LOG).  See the particular program for details.

******************************************************************************
******************************************************************************

	WRITING PROGRAMS THAT USE XPARSE

	The basic cycle of using XPARSE is to read in a string of data from
the terminal (or possibly an indirect file), break it into one or more
arguments, processing the individual argumetns as you go.  By processing
it could just be saving the argument in another character string (e.g. as
a file), returning a real number, or matching the string against a keyword
list.  There are a set of basic subroutine calls to perform these
tasks.  There are also several compound subroutines that may input the
string as well as process it.  More complete control is maintained if the
basic routines are used, although the compound routines provide a fair degree
of flexability.
	BASIC SUBROUTINE
		XPARSE - Initialization Routine:  All programs that use any
XPARSE subroutine (with some exceptions) should include an inital statement
CALL XPARSE(' ') before the first call to another XPARSE subroutine.

	INPUT STRINGS ROUTINES:
		XINIRD - Get the initial command string arguments used on the
				invocation line.
		XNXTRD - Skip over the remainder of the current string
				(including any continuations) and input a
				new string.
		XCREAD - Input a string from the terminal or the current
				`command' file.
		XFLUSH - Flush any continuation lines attached to the current
				string from the `command' file.
		XNEWCM - Make a new file the current command file.

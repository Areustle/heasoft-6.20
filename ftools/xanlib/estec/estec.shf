**ALIADO
ALIADO
call aliado(alias_command,command,show,all,delete,system,
     &                  file_system,file_user,new,page)
INTEGER lenact, ieof
CHARACTER*(*) alias_command, command
CHARACTER*(*) file_system, file_user
LOGICAL*4 show, define, delete, system, user, all
LOGICAL*4 new, page

**ALIAS
ALIAS
alias command names to other names

call alias(command,file_system,file_user,file_type,ui_no,
     &                 status)

**ALIAUI
ALIAUI
call aliaui(alias_command,command,show,all,delete,system,
     &                  previous,new,page,status)
INTEGER*4 nqual, status
PARAMETER (nqual=8)
INTEGER*4 lq(nqual)
CHARACTER*30 quals(nqual)
CHARACTER*(*) alias_command, command
CHARACTER*80 qualifier(nqual)
LOGICAL*4 show, delete, system, previous, all
INTEGER*4 iflag, idelim, nq, jj
LOGICAL*4 qskip, list, user
LOGICAL*4 page, new, full

**CHQUAL
CHQUAL
subroutine checks for a '?' qualifier, if found it returns status=1
and lists the available qualifiers
---------------------------------------------
call chqual(qualifiers,nq,quals,nqual,status)
INTEGER*4 nq, nqual, status, j, l, lenact, ipos, istart, len
INTEGER*4 lenst
CHARACTER*68 comment
CHARACTER*(*) qualifiers(*), quals(*)
LOGICAL*4 found, extra_long, question

Library: xanlib
--------------------------------------------------
**CMPSTR
subroutine to checks for partial matching of string_1 and string_2
string_1 can include one wildcard  (*)
-----------------------------------------
call cmpstr(string_1,string_2,found)
CHARACTER*(*) string_1, string_2
INTEGER lenact, len, len_1, len_2, start, end
INTEGER wild, offset_s, offset_e
LOGICAL found

Library: xanlib
--------------------------------------------------
**CRTFMT
CRTFMT
this routine determines the variable part of a variable
format statement and creates a string to be used in the
format specification
--------------------------------------------------
call crtfmt(inint,outchars,case)
inint    I4    :  the variable part of the format specifier
outchars Ch*20 :  the format specification string returned to calling pgm
case     I4    :  what kind of format specification is needed
 
Library : xanlib
-----------------------------------------------------
**DECOMP
DECOMP
decompose string into fields separated by some character
--------------------------------------------
call decomp(string,length,separator,nf,field_start,
     &                  field_length,status)
 
import :
string          Ch*(*)     - input string
length          Integer    - string length
separator       Ch*1       - separator character

export :
nf              Integer    - number of fields in string
field_start(jf) Integer    - index of first character of field
field_end(jf)   Integer    - index of final character of field 
                             not including separators
status :        INTEGER      status
library: xanlib
------------------------------------------- 
**DFAULT
get (flag=1) or set (flag=0) defaults
n = parameter number to retrieve or store
defaults file contains :
parameter no.  1 -> database name
parameter no.  2 -> sample file name
parameter no.  3 -> sort file name
parameter no.  4 -> right ascension (1950 independently of line 9)
parameter no.  5 -> declination     (1950 independently of line 9)
parameter no.  6 -> search radius in arcmin
parameter no.  7 -> plot device
parameter no.  8 -> source name
parameter no.  9 -> equinox year used to precess coordinates
parameter is returned in a string of characters
parameter no. 10 -> sequence number
parameter no. 15 -> default file for user-defined parameters
parameter no. 16 -> x pixels
parameter no. 17 -> y pixels
parameter no. 18 -> previous def ra
parameter no. 19 -> previous def dec
parameter no. 20 -> previous radius
parameter no. 21 -> ra entered at sc
parameter no. 22 -> dec entered at sc
parameter no. 23 -39 -> spare
parameter no. 40-50-> pe command
parameter no. 51   -> default ascii table for database 1
parameter no. 50+n -> default ascii table for database n
parameter no. 200  -> reserved for internal use
----------------------------------------
call dfault(n,flag,string,ios)
INCLUDE 'xanadu:[lib.estec]estec.inc'
CHARACTER*40 string
INTEGER*4 flag, n, ios
---------------------------------------------------
**DOQUAL
 parsing crapola, general wrap-up routinenick 4.5.90
 from original code by andy, arvind etc...
--------------------------------------------------
call doqual(quals,qualifier,lq,nqual,nq,status)
INCLUDE 'xanadu:[lib.estec]estec.inc'
INTEGER*4 nqual, jj, status, lm1, nq, jqual, llen, klen
INTEGER*4 lm2, lm3, lcx, lenact
CHARACTER*(*) quals(nqual), qualifier(nqual)
CHARACTER*80 string, par, value
INTEGER*4 lq(nqual)
----------------------------------
**GET00
call get00(string,length,status)
CHARACTER*(*) string
INTEGER length
INTEGER status

**GET0C
call get0c(parameter,value,status)
CHARACTER*(*) parameter
CHARACTER*(*) value

**GET0D
call get0d(parameter,value,status)
CHARACTER*(*) parameter
REAL*8 value
INTEGER status

**GET0I
call get0i(parameter,value,status)
CHARACTER*(*) parameter
INTEGER value
INTEGER status
 
**GET0J
call get0j(parameter,value,status)
CHARACTER*(*) parameter
INTEGER*2 value
INTERGER  status

**GET0L
call get0l(parameter,value,status)
CHARACTER*(*) parameter
LOGICAL value
LOGICAL answered
CHARACTER*80 answer
CHARACTER*15 string
INTEGER status

**GET0R
call get0r(parameter,value,status)
CHARACTER*(*) parameter
REAL value
INTEGER status
 
**GET1D
call get1d(parameter,nvals,values,status)
CHARACTER*(*) parameter
INTEGER nvals
REAL*8 values(nvals)
INTEGER status

**GET1I.FOR
      SUBROUTINE get1i(parameter,nvals,values,status)
      INCLUDE 'xanadu:[lib.estec]status.codes'
      CHARACTER*(*) parameter
      INTEGER nvals
      INTEGER values(nvals)
      INTEGER status
**GET1J.FOR
      SUBROUTINE get1j(parameter,nvals,values,status)
      INCLUDE 'xanadu:[lib.estec]status.codes'
      CHARACTER*(*) parameter
      INTEGER nvals
      INTEGER*2 values(nvals)
      INTEGER status
 
**GET1R.FOR
      SUBROUTINE get1r(parameter,nvals,values,status)
      INCLUDE 'xanadu:[lib.estec]status.codes'
      CHARACTER*(*) parameter
      INTEGER nvals
      REAL values(nvals)
      INTEGER status
**GETCMD.FOR
*- get_command - get command, parameter and value
      SUBROUTINE getcmd(line,ll,command,lc,param,lp,value,lv,status)
* description :
*  extracts the first three non-blank fields and their lengths from
*  character*(ll) line
* author :
*  andy pollock (exosat::andy)
* history :
*  14 june 1988 : original
*  12 october 1988 : set parameter and value to null where necessary
*  21 november 1989 : ignore spaces between brackets and double quotes
*  7 february 1990 : discard double quotes at the ends of the output strings
* 25 june 1991: renamed to getcmd
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) line
      INTEGER ll
* export :
      CHARACTER*(*) command
      INTEGER lc
      CHARACTER*(*) param
      INTEGER lp
      CHARACTER*(*) value
      INTEGER lv
* status :
      INTEGER status
**GETCOM.FOR
      SUBROUTINE getcom(prompt_in,command,command_no,sysdir,program,
     &                  version,idone)
c
      INCLUDE 'xanadu:[lib.estec]estec.inc'
      INCLUDE 'xanadu:[lib.estec]commands.inc'
c
c   changed by nick 7/2/90 to use a command file.
c   made program independent and changed to getcom by nick 29/5/91
* input
* all char lengths are recommended
* sysdir (c*30) - the system directory where the commands files are kept
* program (c*10) - the name of the program running (all files are called this)
* version (c*6) - the version number of the program
* prompt_in (c*80) - user defined prompt string, if ' '
*                    then uses [nn]program>
* output
* command_no (i*4) - current command number
* command (c*50 - current command
* idone (i*4) - set to 1 if the command has already been executed in getcom
*
c   all commands are in a file which is read in to common by load_commands.
c   the format is obvious.
c   if you dont want the command to appear
c   under the ? command, then preceed it with a '*'. put these at the
c   end to keep things tidy. they will still be valid commands.
c
c if idone = 1 the command is already found
c program is the program name
c sysdir is where the the system udc file goes
c
      CHARACTER*(*) command, prompt_in, version, program, sysdir
      CHARACTER*80 file_system, file_user, file_type, file_recall
      CHARACTER*80 rootname, file_command
      INTEGER*4 command_no, idone, n_max
      LOGICAL from_recall, udc_found
      CHARACTER*70 char, char2, name
      CHARACTER*20 form
      CHARACTER*80 prompt
      CHARACTER*256 user_def_command, command_in
      CHARACTER*256 tstring, previous_command
      INTEGER*2 start(10), npipe, npip, ico
      INTEGER*4 delim, in, isu, jqual, status, k, iflag, ierr
      INTEGER*4 ldb, lind, lsam, lsub, lenact, lprompt, n, ica
      INTEGER*4 nsub, ii, flag, number
      LOGICAL*4 qskip, xronos_command, xronos_cmd, first_time
      LOGICAL*4 prompt_on
c
      CHARACTER*32 seshead
      CHARACTER*80 log_file, script_file
      INTEGER*4 ui_no
      LOGICAL new, page
c
 
      INTEGER*4 savcom, nccom, nacom
      PARAMETER (savcom=20)
      CHARACTER*255 savstrg(savcom)
**GMATCH.FOR
*- get_match - verify answers
      SUBROUTINE gmatch(list,n,value,index,status)
* description :
*  checks if a string appears in a list
* history :
*  1 july 1988 : original
*  8 november 1988 : put index=0 for blank input value
*  17 november 1988 : remove lower case conversion
*  2 february 1989 : check for exact and abbreviated match
*  2 march 1989 : status=error__ changed to warning__ for ambiguity
*  25 june 1991 : renamed to gmatch
*  8  july 1991 : set index = 0 if no match found
* author :
*  andy pollock (exosat::andy)
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) list(*)
      INTEGER n
      CHARACTER*(*) value
* export :
      INTEGER index
* status :
      INTEGER status
**GTCOM.FOR
**..gtcom.for
      SUBROUTINE gtcom(string,parse,prompt_in,command,command_no,sysdir,
     &                 program,version,idone)
c
      INCLUDE 'xanadu:[lib.estec]estec.inc'
      INCLUDE 'xanadu:[lib.estec]commands.inc'
c
c   changed by nick 7/2/90 to use a command file.
c   made program independent and changed to getcom by nick 29/5/91
c   made into gtcom which passes the parsed string in and out
c                                                     nick 24/6/91
* input
* all char lengths are recommended
* sysdir (c*30) - the system directory where the commands files are kept
* program (c*10) - the name of the program running (all files are called this)
* version (c*6) - the version number of the program
* prompt_in (c*80) - user defined prompt string, if ' '
*                    then uses [nn]program>
* output
* command_no (i*4) - current command number
* command (c*50 - current command
* idone (i*4) - set to 1 if the command has already been executed in getcom
*             - set to -1 if there is a fatal error
c   all commands are in a file which is read in to common by load_commands.
c   the format is obvious.
c   if you dont want the command to appear
c   under the ? command, then preceed it with a '*'. put these at the
c   end to keep things tidy. they will still be valid commands.
c
c if idone = 1 the command is already found
c program is the program name
c sysdir is where the the system udc file goes
c
      CHARACTER*(*) string
      CHARACTER*(*) command, prompt_in, version, program, sysdir
      CHARACTER*80 file_system, file_user, file_type, file_recall
      CHARACTER*80 rootname, file_command
      INTEGER*4 command_no, idone, n_max, parse
      LOGICAL from_recall, udc_found
      CHARACTER*20 form
      CHARACTER*80 prompt
      CHARACTER*256 user_def_command, command_in
      CHARACTER*256 tstring, previous_command, nostar
      INTEGER*2 start(10), npipe, npip, ico
      INTEGER*4 delim, in, jqual, status, iflag, ierr
      INTEGER*4 lenact, lprompt, ica
      INTEGER*4 flag, number
      LOGICAL*4 qskip, first_time
      LOGICAL*4 prompt_on
c
      CHARACTER*32 seshead
      CHARACTER*80 log_file, script_file
      INTEGER*4 ui_no
      LOGICAL new, page
c
 
      INTEGER*4 savcom, nccom, nacom
      PARAMETER (savcom=20)
      CHARACTER*255 savstrg(savcom)
**GTQUAL.FOR
*- gtqual - split up command/qualifiers into command and qualifiers
      SUBROUTINE gtqual(command,lcomm,nqual,qualifier,lqual,status)
* description :
*  splits up command/qualifier into command and qualifier where the qualifier
*  does not include the '/'
* author :
*  andy pollock (exosat::andy)
* history :
*  1 february 1989 : original
*  5 march 1990 : discard double quotes from qualifiers
* 25 june 1991 : renamed gtqual
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import/export :
      CHARACTER*(*) command
      INTEGER lcomm
* export :
      INTEGER nqual
      CHARACTER*(*) qualifier(*)
      INTEGER lqual(*)
* status :
      INTEGER status
**LDCMDS.FOR
      SUBROUTINE ldcmds(infile,ierr)
c
c  load valid browse commands from a file - nick early 1990
c
c updated by nick 28.05.91 to use openwr and new common structure
c changed name from load_commands
c
c  list browse commands
c
      CHARACTER*(*) infile
      CHARACTER*80 string
      INTEGER*4 ispace, isp, iend, ierr, ist, lrecl
      CHARACTER*16 temp_com(zncom), temp1(zncom)
      CHARACTER*30 temp_descrip(zncom)
c
      INTEGER*4 io, lenact, irec, po(zncom), n
      LOGICAL*4 list
c
**LFTJST.FOR
*- lftjst - left justified string
      CHARACTER*80 FUNCTION lftjst(value,type,format)
* description :
*  left justifies an output string as opposed to the default right justification
* author :
*  andy pollock (exosat::andy)
* history :
*  26 january 1989 : original
*  1 october 1991 : allow format='*'
 
      INCLUDE 'status.codes'
* import :
      BYTE value(*)
      CHARACTER*3 type
      CHARACTER*(*) format
* local variables :
      CHARACTER*80 string
      CHARACTER*3 t
      INTEGER*2 i2
      INTEGER*4 i4
      REAL*4 r4
      REAL*8 r8
      INTEGER i, imax
* external reference :
      INTEGER lenact
**LOC0C.FOR
      INTEGER FUNCTION loc0c(x,n,xx)
* import :
      CHARACTER*(*) x
      INTEGER n
      CHARACTER*(*) xx(*)
**LOC0D.FOR
      INTEGER FUNCTION loc0d(x,n,xx)
* import :
      REAL*8 x
      INTEGER n
      REAL*8 xx(*)
**LOC0I.FOR
      INTEGER FUNCTION loc0i(x,n,xx)
* import :
      INTEGER x
      INTEGER n
      INTEGER xx(*)
**LOC0J.FOR
      INTEGER FUNCTION loc0j(x,n,xx)
* import :
      INTEGER*2 x
      INTEGER n
      INTEGER*2 xx(*)
* local variables :
      INTEGER l, m, u
      INTEGER i
**LOC0R.FOR
      INTEGER FUNCTION loc0r(x,n,xx)
* import :
      REAL x
      INTEGER n
      REAL xx(*)
* local variables :
      INTEGER l, m, u
      INTEGER i
**LSTBLK.FOR
      SUBROUTINE lstblk(num,string_list,string_descrip,pages)
c
c   to list a block of browse commands (from ?) command    nick 9/2/90
c
      INTEGER*4 i, ij, nhalf, j, nn, num_start
      INTEGER*4 npages, ndone, num_to_go, num, nlines, num_list
      CHARACTER*(*) string_list(*), string_descrip(*)
c
      CHARACTER*255 zwrite
      CHARACTER*80 line
      LOGICAL*4 odd, finish, pages
**LSTCMD.FOR
      SUBROUTINE lstcmd()
c
c
c  list browse commands  nick 7/2/90
c
c command list info (in common)
c
cinteger*4 zcom_no, zlist_no
c  no read in, no to be listed
c     integer*4 zncom,zlist_nolist
c  max com, no not to be listed
c     character*10 zcom_list(zncom)
c  commands to be listed
c     character*30 zcom_descrip_list(zncom)
c  description of them
c     character*10 zcom_name(zncom)
c  all valid commandsc
ccharacter*30 zcom_descrip(zncom)
c  description
c     character*10 zcom_nolist(zncom)
c  hidden command list
c     character*30 zcom_descrip_nolist(zncom)
c  description
      LOGICAL*4 pages, finish
c
      INTEGER*4 nnn, jj, ii, i, iflag, idelim
      LOGICAL*4 hidden, full
      CHARACTER*30 name(30)
c
      LOGICAL*4 qskip
c
c parsing crapola
c
      INTEGER*4 nqual, status, nq
      PARAMETER (nqual=2)
      CHARACTER*10 quals(nqual)
      CHARACTER*80 qualifier(nqual)
      INTEGER*4 lq(nqual)
**MCHLST.FOR
c
      SUBROUTINE mchlst(name,descrip_list,com_list,list_no,j,pages)
c
      CHARACTER*255 zwrite
      CHARACTER*(*) name, descrip_list(*), com_list(*)
      CHARACTER*70 list, string
      INTEGER*4 list_no, i, j, lenact, ilen
      LOGICAL*4 finish, pages, ifound
**NOSTAR.FOR
c  character function to remove any stars from within the string
 
      FUNCTION nostar(string)
      CHARACTER*(*) nostar, string
 
      INTEGER i, j, len, lenact
 
**OPNDEF.FOR
 
      SUBROUTINE opndef(ierr)
c        open defaults file, or create one if its not there.
c   taken from defaults by nick 10/2/90
c        n = parameter number to retrieve or store
c        defaults file contains :
c        parameter no.  1 -> database name
c        parameter no.  2 -> sample file name
c        parameter no.  3 -> sort file name
c        parameter no.  4 -> right ascension (1950 independently of line 9)
c        parameter no.  5 -> declination     (1950 independently of line 9)
c        parameter no.  6 -> search radius in arcmin
c        parameter no.  7 -> plot device
c        parameter no.  8 -> source name
c        parameter no.  9 -> equinox year used to precess coordinates
c        parameter is returned in a string of characters
c        parameter no. 10 -> sequence number
c        parameter no. 15 -> default file for user-defined parameters
c        parameter no. 16 -> x pixels
c        parameter no. 17 -> y pixels
c        parameter no. 18 -> previous ra defaults
c        parameter no. 19 -> previous de default
c        parameter no. 20 -> previous rad
c        parameter no. 21 -> ra entered at sc
c        parameter no. 22 -> dec entered at sc
c        parameter no. 22 -39 -> spare
c        parameter no. 40 -50 -> pe command
c        parameter no. 51   -> default ascii table for database 1
c        parameter no. 50+n -> default ascii table for database n
c        parameter no. 200  -> reserved for internal use
c
      INCLUDE 'xanadu:[lib.estec]estec.inc'
      CHARACTER*100 filename
c
      CHARACTER*40 string, temp, zero*2, blank*2
      INTEGER*4 lenact
      LOGICAL*2 there, open
      INTEGER*2 numeric(200)
      INTEGER*4 n, ierr, i, ii
**P3COEF.FOR
*+ p3coef - calculates the coefficients of a parabola spec'd by 3 points
      SUBROUTINE p3coef(x1,y1,x2,y2,x3,y3,a0,a1,a2,status)
*    description :
*     the 3 pairs of points (x1,y1), (x2,y2), (x3,y3) are used to determine
*     a parabola whose coefficients are returned in a0 (constant coeff.),
*     a1 (1st order coeff.), and a2 (2nd order coeff.).
*    invocation :
*     call p3coef(x1,y1,x2,y2,x3,y3,a0,a1,a2,status)
*    parameters :
*     parameter[(dimensions)]=type(access)
*           <description of parameter>
*    method :
*    deficiencies :
*    bugs :
*    authors :
*     andy pollock (bhvad::amtp)
*    history :
*     10 apr 84: original (bhvad::amtp)
*     28 october 1987 : estec installation outside sse
*     23 october 1991 : adapted to allow equal pairs (kaa)
*    global constants :
      INCLUDE 'xanadu:[lib.estec]status.codes'
*    import :
      REAL x1, y1, x2, y2, x3, y3
c  points defining parabola
*    import-export :
*    export :
      REAL a0, a1, a2
c  coefficients of parabola
*    status :
**P3INT.FOR
*+ p3int - # point parabolic interpolation
      SUBROUTINE p3int(x1,y1,x2,y2,x3,y3,xp,yp,status)
*    description :
*     the points (x1,y1), (x2,y2), and (x3,y3) are used to determine a
*     parabola. this parabola is the used to establish the value of yp
*     for given xp.
*     status is set if any of the x's are equal and the appropriate y's
*     unequal.
*    invocation :
*     call p3int(x1,y1,x2,y2,x3,y3,xp,yp,status)
*    parameters :
*     parameter[(dimensions)]=type(access)
*           <description of parameter>
*    method :
*    deficiencies :
*    bugs :
*    authors :
*     andy pollock (bhvad::amtp)
*    history :
*     10 apr 84: original (bhvad::amtp)
*     28 october 1987 : estec installation outside sse
*     23 october 1991 : adapted to allow equal pairs (kaa)
*    global constants :
      INCLUDE 'xanadu:[lib.estec]status.codes'
*    import :
      REAL x1, y1, x2, y2, x3, y3
c  3 points defining the parabola
      REAL xp
c  ordinate of point to be found
*    import-export :
*    export :
**PAGBRK.FOR
      SUBROUTINE pagbrk(qend)
c
croutine to do parsable pagebreaks in browse
c31/1/90 nick
      LOGICAL*4 qend, ierr
      CHARACTER*80 prompt
      CHARACTER*10 reply
**PAR0L.FOR
*- par0l - get logical value from string
      SUBROUTINE par0l(string,length,position,parameter,value,status)
* author :
*  andy pollock (exosat::andy)
* history :
*  21 march 1988 : original
* global constants :
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
      INCLUDE 'xanadu:[lib.estec]par.constants'
* import :
      CHARACTER*(*) string
      INTEGER length
      INTEGER position
      CHARACTER*(*) parameter
* export :
      LOGICAL value
* status :
      INTEGER status
* local variables :
      INTEGER nf
      INTEGER field_start(par_maxf)
      INTEGER field_length(par_maxf)
      CHARACTER*80 answer
      INTEGER i, j, k
**POST0C.FOR
*- post0c - post character parameter values into a bin
      INTEGER FUNCTION post0c(x,nx,x1,x2,status)
 
      INCLUDE 'xanadu:[lib.par]status.codes'
* import :
      CHARACTER*(*) x                         ! character value
      INTEGER nx                              ! no of bins
      CHARACTER*(*) x1(*), x2(*)              ! bin limits
* status :
      INTEGER status
* local variables :
      INTEGER i, j
**POST0D.FOR
*- post0d - post real*8 parameter values into a bin
      INTEGER FUNCTION post0d(x,nx,x1,x2,status)
 
      INCLUDE 'xanadu:[lib.par]status.codes'
* import :
      REAL*8 x                                  ! real*8 value
      INTEGER nx                                ! no of bins
      REAL*8 x1(*), x2(*)                       ! bin limits
* status :
      INTEGER status
* local variables :
      INTEGER i, j
*-
**POST0I.FOR
*- post0i - post integer parameter values into a bin
      INTEGER FUNCTION post0i(x,nx,x1,x2,status)
 
      INCLUDE 'xanadu:[lib.par]status.codes'
* import :
      INTEGER x                               ! integer value
      INTEGER nx                              ! no of bins
      INTEGER x1(*), x2(*)                    ! bin limits
* status :
      INTEGER status
* local variables :
      INTEGER i, j
*-
**POST0J.FOR
*- post0j - post integer*2 parameter values into a bin
      INTEGER FUNCTION post0j(x,nx,x1,x2,status)
 
      INCLUDE 'xanadu:[lib.par]status.codes'
* import :
      INTEGER*2 x                             ! integer*2 value
      INTEGER nx                              ! no of bins
      INTEGER*2 x1(*), x2(*)                  ! bin limits
* status :
      INTEGER status
* local variables :
      INTEGER i, j
*-
**POST0R.FOR
*- post0r - post real parameter values into a bin
      INTEGER FUNCTION post0r(x,nx,x1,x2,status)
 
      INCLUDE 'xanadu:[lib.par]status.codes'
* import :
      REAL x                                  ! real value
      INTEGER nx                              ! no of bins
      REAL x1(*), x2(*)                       ! bin limits
* status :
      INTEGER status
* local variables :
**POST1C.FOR
*- post1c - determine the numbers of different character strings
      SUBROUTINE post1c(nstr,string,nval,value,n,status)
 
      INCLUDE 'xanadu:[lib.par]status.codes'
* import :
      INTEGER nstr                         ! no of strings
      CHARACTER*(*) string(*)              ! array of character strings
* export :
      INTEGER nval                         ! no of distinct string values
      CHARACTER*(*) value(*)               ! string values
      INTEGER n(*)                         ! no of occurences of value
* status :
      INTEGER status
**POST1D.FOR
*- post1d - post sorted list of real*8 parameter values into sorted bins
      SUBROUTINE post1d(nvals,x,nx,x1,x2,jv,nv,status)
 
      INCLUDE 'xanadu:[lib.par]status.codes'
* import :
      INTEGER nvals                          ! no of values
      REAL*8 x(*)                            ! list of values
      INTEGER nx                             ! no of bins
      REAL*8 x1(*), x2(*)                    ! bin limits
* export :
      INTEGER jv(*)                          ! index of first value in bin
      INTEGER nv(*)                          ! no of values in bin
* status :
      INTEGER status
**PRMPT.FOR
      SUBROUTINE prmpt(parameter,status)
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
      CHARACTER*(*) parameter
      INTEGER*4 status
      CHARACTER*80 string
* external reference :
      INTEGER*4 lenact
**QLF0C.FOR
*- qlf0c - get named character string from qualifier
      SUBROUTINE qlf0c(string,parameter,value,status)
* author :
*  andy pollock (exosat::andy)
* history :
*  26 april 1989 : original
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) string
      CHARACTER*(*) parameter
* export :
      CHARACTER*(*) value
* status :
      INTEGER status
**QLF0D.FOR
*- qlf0d - get named real*8 from qualifier
      SUBROUTINE qlf0d(string,parameter,value,status)
* author :
*  andy pollock (exosat::andy)
* history :
*  16 march 1989 : original
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) string
      CHARACTER*(*) parameter
* export :
      REAL*8 value
* status :
      INTEGER status
**QLF0I.FOR
*- qlf0i - get named integer from qualifier
      SUBROUTINE qlf0i(string,parameter,value,status)
* author :
*  andy pollock (exosat::andy)
* history :
*  16 march 1989 : original
* 25 june 1991 : renamed qlf0i
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) string
      CHARACTER*(*) parameter
* export :
      INTEGER value
* status :
      INTEGER status
**QLF0J.FOR
*- qlf0j - get named integer*2  from qualifier
      SUBROUTINE qlf0j(string,parameter,value,status)
* author :
*  andy pollock (exosat::andy)
* history :
*  16 march 1989 : original
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) string
      CHARACTER*(*) parameter
* export :
      INTEGER*2 value
* status :
      INTEGER status
**QLF0L.FOR
*- qlf0l - get named logical*4 from qualifier
      SUBROUTINE qlf0l(string,parameter,value,status)
* description :
*  looks for a logical value in a qualifier and sets it by default to .true.
* author :
*  andy pollock (exosat::andy)
* history :
*  16 march 1989 : original
*  25 june 1991 : renamed
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) string
c  string containing parameter values
      CHARACTER*(*) parameter
c  parameter name
* export :
      LOGICAL value
* status :
      INTEGER status
**QLF0R.FOR
*- qlf0r - get named real*4 from qualifier
      SUBROUTINE qlf0r(string,parameter,value,status)
* author :
*  andy pollock (exosat::andy)
* history :
*  16 march 1989 : original
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
      CHARACTER*(*) string
      CHARACTER*(*) parameter
* export :
      REAL*4 value
* status :
      INTEGER status
**QMATCH.FOR
*- qmatch - verify qualifiers
      SUBROUTINE qmatch(list,n,value,position,status)
* description :
*  checks if a string appears in a list
* history :
*  5 april 1989 : original adapted from get_match to deal with value=something
*  8 may 1990 : fix x//y to x(:lx)//y
*  25 junae 1991: renamed to qmatch
* author :
*  andy pollock (exosat::andy)
 
      INCLUDE 'xanadu:[lib.estec]status.codes'
* import :
*  list - list of answers to be checked
      CHARACTER*(*) list(*)
      INTEGER n
      CHARACTER*(*) value
* export :
*  position - position of the value in the list
      INTEGER position
 
 
* status :
      INTEGER status
**QSORSM.FOR
      SUBROUTINE qsorsm(nmax,carray,carra1,nbros)
c
c ,quicksort for characters small version
C modified from algol code to structured fortran,j.c.lewis
C see n.wirth 'algorithms+data structures=programs'
C -quicksort takes an element k (near the middle say),scans the array
C  from the left till an el. gt k is found,scans from the right till an
C  el. lt k is found,& swaps these 2 els.
C  this is continued till all els to left of k are lt k,and all to right
C  are gt k.
C  now do the same for these 'subpartitions'.when all subpartitions
C  are of length 1,array is sorted
c !!!
C   use a stack array to keep track of partitions yet to be sorted-
C  always sort the smaller partition first
C  use stack size=log2(nmax)
C
C  sorts only on the first 4 chars (10000 char*4 = 20000 words)
C  uses ema array as real    since chars are not allowed in ema
C  recovers them via internal i/o  (mod by l.chiappetti 231085)
c  this version should sort 16 characters
c changes to have *(*) character strings nick
C
      DIMENSION st(2,30)
      INTEGER r, s, st, temp, nbros(*), nmax, l, i, j, lmed
      CHARACTER*16 testr, lcvar, lcvaj, tempr
      CHARACTER*(*) carray(*), carra1(*)
C
**RECALL.FOR
      SUBROUTINE recall(n_max,start_no,command_no,flag,filename,ierr)
c   flag=1  -> list last 20 (or up to 50) previously executed commands
c   flag=2  -> store last command in history file
c   flag=3  -> retrieve command
c
      INCLUDE 'xanadu:[lib.estec]estec.inc'
c
      CHARACTER*(*) filename
      INTEGER*4 lu_history, ierr, flag, i, command_no, start_no, total
      INTEGER*4 lenact, start, isum, n_max, id, nrecl, max_list
      CHARACTER*20 form
      CHARACTER*256 string
      LOGICAL open, there, ok
**RECLUI.FOR
      SUBROUTINE reclui(n_max,number,flag,status)
c
c read and write and list the past n_max commands
c
      INCLUDE 'xanadu:[lib.estec]estec.inc'
c
      INTEGER*4 nqual, status, n_max, number, flag
      REAL*8 real8
      PARAMETER (nqual=1)
      INTEGER*4 lq(nqual), nq, jj
      CHARACTER*30 quals(nqual)
      CHARACTER*80 qualifier(nqual), char
      INTEGER*4 iflag, idelim, ierr
      LOGICAL*4 qskip
**SORTQL.FOR
      SUBROUTINE sortql(qualifiers,nqual)
c
c  does a binary search to place qualifiers in alphabetic order
c
      CHARACTER*(*) qualifiers(*)
      CHARACTER*36 stor
      INTEGER*4 nqual, min, i, j, k, in1, in2, in3
c
**STRNUM.FOR
      SUBROUTINE strnum(string,type,real8,ierr)
c
c  converts an input char string to numeric for given type
c  nick 18.6.90, from update_database (arvind?)
c
 
c
      INCLUDE 'estec.inc'
c
      REAL*8 real8
      REAL*4 real4
      INTEGER*2 int2
      INTEGER*4 int4, type, ilen, ii
      CHARACTER*(*) string
      INTEGER*4 ierr, lenact
      LOGICAL*4 numeric
**UDC.FOR
      SUBROUTINE udc(command,alias_name,nflag,file_system,file_user,new,
     &               page)
c
c command - complete input or output command string (256 long)
c alias_name - alias name for command
c  subroutine to load, retrieve and delete user-defined commands
c  nflag = 0 -> to load u-d command
c  nflag = 1 -> to retrieve u-d command
c  nflag = 2 -> to list all user-defined commands
c  nflag = 3 -> delete u-d command
c  nflag = 10 -> to load system-defined command
c  nflag = 11 -> to retrieve s-d command
c  nflag = 12 -> to list all system-defined commands
c  nflag = 13 -> delete system-defined command
c  file_system, user - file names where commands stored
c  new - erase exsiting file
c  page put in page breaks for listing
c routine by paolo
c commands read into memory added - by nick 30.5.91
c plus many other things added - nick 3.6.91
c
      INCLUDE 'xanadu:[lib.estec]estec.inc'
      INTEGER*4 n_max
      PARAMETER (n_max=99)
c
c n_max is the maximum number of commands
c
      CHARACTER*(*) command, file_system, file_user
      CHARACTER*376 blank, string, udcudc, command_string
      CHARACTER*376 save(n_max*2), save_string
      CHARACTER*80 prompt
      CHARACTER*(*) alias_name
      CHARACTER*60 cfile, ans
      CHARACTER*2 com_type(n_max*2)
      LOGICAL found, there, open, never_found, read_sys, read_user
      LOGICAL new, page
      LOGICAL*4 finish, qeof, qans, sys
      INTEGER ios, lun, flag, i, n, in, ic, ncom, isl
      INTEGER isb, lenact, nflag, in1, ii
      INTEGER*4 ierr, wild_1, wild_2, len_1, in2
      INTEGER*4 nbeg, nend, nrecl, nsave, nfound
**XCT0C.FOR
*- xct0c - exact string match
      LOGICAL FUNCTION xct0c(value,n,list)
* description :
*  checks if a string appears in a list
* history :
*  15 february 1990 : original
* author :
*  andy pollock (exosat::andy)
 
* import :
*  value - ..to be checked
      CHARACTER*(*) value
*  n - length of the list
      INTEGER n
*  list(*) - ..of answers to be checked
      CHARACTER*(*) list(*)
 
**XCT0D.FOR
*- xct0d - exact real*8 match
      LOGICAL*4 FUNCTION xct0d(value,n,list)
* description :
*  checks if a value appears in a list
* history :
*  26 november 1990 : original
* author :
*  andy pollock (exosat::andy)
*  computer & scientific co. ltd., 34 westwood road, sheffield s11 7ey, england.
 
* import :
      REAL*8 value
      INTEGER*4 n
      REAL*8 list(*)
* local variables :
      LOGICAL*4 there
      INTEGER*4 j
*-
**XCT0I.FOR
*- xct0i - exact integer*4 match
      LOGICAL*4 FUNCTION xct0i(value,n,list)
* description :
*  checks if a value appears in a list
* history :
*  26 november 1990 : original
* author :
*  andy pollock (exosat::andy)
*  computer & scientific co. ltd., 34 westwood road, sheffield s11 7ey, england.
 
* import :
      INTEGER*4 value
      INTEGER*4 n
      INTEGER*4 list(*)
**XCT0J.FOR
*- xct0j - exact integer*2 match
      LOGICAL*4 FUNCTION xct0j(value,n,list)
* description :
*  checks if a value appears in a list
* history :
*  26 november 1990 : original
* author :
*  andy pollock (exosat::andy)
*  computer & scientific co. ltd., 34 westwood road, sheffield s11 7ey, england.
 
* import :
      INTEGER*2 value
      INTEGER*4 n
      INTEGER*2 list(*)
* local variables :
      LOGICAL*4 there
      INTEGER*4 j
*-
      there = .FALSE.
      j = 0
      DO WHILE (.NOT.there .AND. (j.LT.n))
        j = j + 1
        there = (value.EQ.list(j))
      END DO
 
      xct0j = there
 
      RETURN
 
      END
**XCT0K.FOR
*- xct0k - exact binary-coded string match
      LOGICAL*4 FUNCTION xct0k(size,value,n,list)
* description :
*  checks if a value appears in a list
* history :
*  09 july 1991 : original
* author :
*  andy pollock (exosat::andy)
*  computer & scientific co. ltd., 34 westwood road, sheffield s11 7ey, england.
 
* import :
      INTEGER*4 size
      BYTE value(*)
      INTEGER*4 n
      BYTE list(*)
* local variables :
      LOGICAL*4 there
      INTEGER*4 i, j, k
*-
**XCT0R.FOR
*- xct0r - exact real*4 match
      LOGICAL*4 FUNCTION xct0r(value,n,list)
* description :
*  checks if a value appears in a list
* history :
*  26 november 1990 : original
* author :
*  andy pollock (exosat::andy)
*  computer & scientific co. ltd., 34 westwood road, sheffield s11 7ey, england.
 
* import :
      REAL*4 value
      INTEGER*4 n
      REAL*4 list(*)
* local variables :
      LOGICAL*4 there
      INTEGER*4 j
*-
**XEXACT.FOR
*- xexact - exact string match
      LOGICAL FUNCTION xexact(value,n,list)
* description :
*  checks if a string appears in a list
* history :
*  15 february 1990 : original
* author :
*  andy pollock (exosat::andy)
 
* import :
*  value - ..to be checked
      CHARACTER*(*) value
*  n - length of the list
      INTEGER n
*  list(*) - ..of answers to be checked
      CHARACTER*(*) list(*)
 
**XINDEX.FOR
*- xindex - a rose by any other name
      INTEGER FUNCTION xindex(string,sub_string)
* description :
*  interface to fortran index function for those annoying occasions when you
*  also want to use a variable called index
* author :
*  andy pollock
*-
      CHARACTER*(*) string
      CHARACTER*(*) sub_string
 

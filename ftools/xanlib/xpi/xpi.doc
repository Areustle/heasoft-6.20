A Table Driven Parameter and GUI Interface 
*Overview
**Concept
There is an increasing need to allow analysis software produced to run
under different environments (e.g., IRAF, AIPS, XANADU) to be available
under a single system. At the same time there is a trend to make the
analysis software more user friendly by incorporating graphical user
interfaces, GUIs. This document combines two efforts. The first is to make
an existing analysis environment XANADU, compatable with IRAF such that
XANADU tasks can run under both under IRAF, but still be able to run as
part of the standalone XANADU environment. The second is to provide a
graphical user interface that will sit on top of both IRAF and XANADU. The
proposed solution to this is to have an underlying system of tables which
the GUI and the analysis tasks access as a central resource. Another long
term goal is to put the underlying tables under a database management
system, so allowing a user to rapidly locate tasks to perform the required
function. 

**Requirements.
---
 * To provide for XANADU an IRAF compatable library of subroutine calls to
validate commands and parameters, and to get parameter values. 

 * To provide a generic table driven interface which a GUI can use
to setup the windows to indicate which tasks are available and enable
them to be run.

 * To put all the task, command and parameter information into tables
that ultimately will be accessed by a relational database system.
---
*The_XANADU_Interface
**New_Syntax
The syntax for specifying parameters should be the same, for both command
driven and single task programs. 
***Command_Driven

For a XANADU command driven program two methods are used to specify
parameters: positional and qualifier. All positional parameters must be
entered in a particular order on the command line. In many (but not all
cases) the positonals are required parameters that, if not given, will be
prompted for. A qualifier parameter is entered with the parameter name
preceded by a token (currently a VMS style slash /), and set equal to the
value, e.g., /radius=1.0. Qualifiers are usually optional (but occasionally
they may be required). In some programs, e.g., browse, both parameter methods
are used, whereas in others, e.g., xspec, positional parameters are dominant.
Currently qualifiers MUST be left adjusted (without spaces) and preceed the
positional parameters. 

In the new scheme it is proposed to preserve both approaches, but to make 
two changes, which are backwards compatable with the current scheme:
---
 * make it such that positional parameters can also be specified using 
qualifiers.

 * use the equals sign "=" as the distinguishing token that a qualifer
is being used, and for logicals use logical+ or logical- to specify the
logical state. The / system would also be supported, so as to remain
backward compatable, for logicals /logical would be equivalent to logical+.
---

E.g., in xpsec the command FIT is currently given as: 
-------------------------------------------------------------------
FIT 0.1 10
-------------------------------------------------------------------
where 0.1 is specifying the parameter value dchi2 and 10 is the parameter
niter. In the new scheme this would still work, but so too would: 

-------------------------------------------------------------------
FIT/dchi2=0.1/niter=10 
-------------------------------------------------------------------

or

-------------------------------------------------------------------
FIT /niter=10 0.1
-------------------------------------------------------------------

or

-------------------------------------------------------------------
FIT niter=10 dchi2=0.1
-------------------------------------------------------------------

In the new version qualifiers can be put anywhere on the command string. 

If there is a case where the token is used as part of a positional
parameter (e.g., the pgplot devices all begin with "/") they can be ignored
by use of a special option in the command table, or by enclosing the
parameter in " ". 

If there are spaces in the parameter string then it should be enclosed
with " ", e.g., ra="12 03" dec="+50 16 7.3". If there are spaces in the
postional parameter, then either the " " mechanism can be used, or
the fields separated with coma's, e.g., sc 12 03,+50 16 7.3 . The 
current parser may need modifying to handle this, there have been 
problems with it in the past.

The qualifier ? or /? will list all the valid qualifiers for a particular 
command, then return to the command line without executing the command.

Partial matching of parameter names and command names will be
supported in a future release.

***Single_Tasks
For individual tasks a question/answer session is used to obtain the 
parameter values and bind them to program variables. These can be given
at run time on the command line, in the same order as they are
required by the program. In this case some of the parameters can be 
optional, though they must be the last one(s) in the parameter list.

In the new approach this convention would be preserved, but also the
parameters (required and optional) could be specified with qualifiers. A
task can be spawned from another program including the command string as
typed in the original program. 

***Macros
For a command driven program it is possible to specify at run time a series
of commands that are to be executed (a macro). This is done in one of two
ways. First a file can be created containing a series of valid commands.
This is then run by giving it after the program name at run time preceded 
by an @ symbol, e.g., xspec @macro

If the parser routine getbuf sees the @ it redirects the input to read the
file, until the file is read, it then returns control to the terminal. In
the second approach a series of commands can be given on the runtime line,
separated by a `;`. These are then decoded with a routine called gtcom2 to
run through each command before passing control to the command line, e.g., 
`ximage read/fits fred ; smooth ; display ; exit`. This latter method is
useful in that an intermediate file need not be created. It is typically
used when one command driven program is spawned from another. Both
approaches would be preserved.

For single tasks there are three methods for making a macro: a file containing 
responses to the tasks in the order they are required by the task, 
giving on the command line the responses in the same order, or giving
the parameters using tokens. The latter is new, and will bring the
single task and command driven programs into a single approach.

*A_Table_Driven_System

The proposal here is to create a number of tables which are used by XANADU
tasks to validate commands (for the command driven programs), validate
parameters, and provide a setup for a graphical user interface to use.
There are four tables: a parameter table, a command table, a command alias
table and a key table. The parameter table would be internally structured
to be identical to an IRAF parameter file. The commands table would be
analogous to a package of IRAF tasks. The key table has no analogy under
IRAF, because parameter files are not shared between tasks. 

In addition there will be two additional tables used primarily to setup the
gui: a keyword table to group together related commands under a single
keyword, and a gui table to group together tasks under another single
keyword. 

The files are named as follows <program name>.<table type> where
<program name> would be BROWSE, XSPEC, MKPHA, and so on and 
<table type> would be from the following table.

Table name		Extension	Note
==========		=========	====
Parameter		par
Command			cmd1		1
Alias			udc1		1
Keyword			kw
Key			key


So, browse's parameter table will be called browse.par.


**Parameter_table

This would be an IRAF parameter file. It would contain all the
valid parameters for a particular task, selection of tasks, or command
driven program. It would follow the IRAF parameter file convention and
contain all the standard IRAF parameters:

---
 * parameter name 
 * type
 * mode
 * default value
 * minimum value
 * maximum value
 * prompt
---

The parameter name is in upper case, but is not case sensitive.

The type is one of the following:

---
 * b Boolean
 * i Integer
 * r Real
 * s String
 * f Filename
 * c Coordinate (1)
 * g Range (1)
---

(1) These are not currently implimented and would make a parameter
file incompatible with IRAF.

Each parameter the program uses must be in the parameter file.

**Command_table

This is similar to the current command file read in by xspec, ximage and
browse. It contains all the valid commands for a command driven program, or
group of tasks. It has the following entries:
--- 
 * name 
 * description
 * access
 * window type
---
The command name can be made unique in the first few letters by using a *,
e.g., ps*am will make ps unique, even if there is another command psd. 

The command description gives a summary of what the command does.

Access tells who can do a command.  w means the world, s means system
users. 

Window type is used to define which GUI window is to be used. There will
be a default which will call a standard form filling window. There may
be other special windows for, e.g., doing models.

An example is:
----------------------------------------------------------------------
sc, search in a cone, w, def
sn, search by name, w, def
cdb, change database, w, def
lusers, list registered users, s, sys 
----------------------------------------------------------------------
In the last case there is a command to list registered users, which
only system people can do.

**Command_aliases_table
Within the current command driven environment there is the possibility to
redefine command strings with the "alias" command. This is very useful
for redefining complicated command sequences into a single command. There
are currently two different sets of aliased commands one that is system
wide, available to all users, and another that is user specific. These
aliased commands need to be made available also to the graphical user
interface. The current aliases tables should be modified as 
follows:
---
 * aliased command name
 * command string
---
There would be one of these in a system directory, and another in 
the users root directory (or where ever the users version of the
parameter file is kept).

**Keywords_table
This will assign a keyword to each command or aliased command, and allow 
commands to be grouped together. This table will contain:
---
 * keyword (or group) name
 * command name
---
It is possible for the keyword and the command name to be identical.

The user will be able to update this table both as part of the gui 
interface and to allow the user to make popular commands keywords.

An example is:
----------------------------------------------------------------------
search, sc
search, sp
search, sn
display, dsam
display, dpage
class, bl_lac
----------------------------------------------------------------------
This is separate from the commands database because it may include aliased
command names, as well as commands (bl_lac is an alias in the above example). 
Also the user will be able to customize this table (or have their own
version, it may be better to split the user and system defined keywords to
two tables so making updates easier). 

**Key_table
The Key table defines which parameters belong to which command. It contains:
---
 * command
 * parameter
 * postional order
 * cluster
---
The command and parameter relate the valid parameters to each task. 
The postional order is either 0, in which case this parameter must be
specified with a /paramter=valud or paramter=value, or is a number
which tells the order it will appear on the command line.

The key table will not exist for single tasks. In these cases the 
positional order will be the same as the parameter order in the file.

To ensure that the current parameter parsing can coexist with the new, and
to allow for commands where the parameter checking is handled elsewhere
(e.g., if a process is spawned) there will need to be a special symbol in
the key table so that the parameter checking will know that the parameter
binding and checking is done deeper in the program and that it should
proceed without error. This will be a * for no check, and ** if the 
checking is done by the task. An example of the key table is
---------------------------------------------------------------------------
sc, full,0,
sc, ra, 1,
sc, dec, 2,
sc, radius, 3,
sc, default, 0,
ximage, **XANADU/ximage/manager, 0,
msam, *, 0,
psam, histogram, 0, *
psam, scatter, 0, *
psam, bins, 0, histogram
psam, x-value, 1,
psam, y-value, 2, scatter
psam, y2-value, 3, scatter
psam, y3-value, 3, scatter
---------------------------------------------------------------------------
In this example the sc command is fully specified in the key. For the
ximage command it will spawn the process called ximage, and will find the
command and parameter tables for ximage in the directory specified; the gui
can go there to find out the parameters to display, and the overlying task
will not check the parameters entered since this will be done by ximage.

For msam, the * means that the parameter checking is still done in that
subroutine, so no checking need be done higher up. 

For psam the * in the cluster field indicates that some of the other 
parameters are only used with that particular one and these are
then specified later on, e.g., for bins.

**Backward_compatability

It is important that this new system be backward compatable with the
existing programs, since its likely to take sometime to convert all the
current parameter parsing. It is not desirable that when this new method is 
introduced everything stops working! At the moment all the parameter checking 
and binding occurs deep in the code responsible for executing the function.
The new approach will centralize the checking function higher-up. The 
parameter binding will still occur lower down in the code, but via a
standard parameter interface subroutine library. In the transition phase it
should be possible for the existing parameter functions to be left in the
code, with a flag in the command table to indicate this is the case. 

Most important the look and feel of each program should, whenever possible
be preserved, so that, e.g., a current browse user feels at home.

*Software_calls

**Parameter_binding

A library of routines would be used to bind the parameter values to the
program variables. These routines would get the values from the parameter
common block values that were either loaded at startup from the parameter
file, or input as part fo the parsed string. These routines would be
analogous to those used in the IRAF F77 interface. There would be one set 
of routines for IRAF, one for XANADU, and a wrapup set that calls one
or the other depending on which environment is used. Bill Pence has 
circulated the definition of the wrapup routines as listed below.
For the XANADU versions the leading letter "p" should be replaced with 
"x".

***Subroutine_Naming 

The subroutine names are deliberately somewhat obscure to avoid possible
clashes with names in other subroutine libraries.  All the subroutines begin
with the letter 'p' (for parameter interface) and are limited to 6 characters. 
(The IRAF and the SAO Host Interfaces use these same subroutines, except that
they begin with 'u' instead of 'p'). The second 2 characters indicate the
general type of subroutine (e.g., 'cl' for 'command language'interface).  The
4th character is generally a 'p' or 'g' indicating that the subroutine either
'puts' or 'gets' information.  Many of the subroutines come in families, which
differ only in the datatype of the subroutine parameter.  The last character of
the subroutine name indicates the data type and may have one of the following
values: 
---------------------------------------------------------------------------
	b boolean (4-byte logical)
	d double precision real (8 bytes)
	i integer (default length, usually 4 bytes)
	l long integer (8 bytes if architecture permits)
	r real (4 bytes)
	s short integer (2 bytes)
	t text string  (character*n)
	x complex (pair of real*4 values)
---------------------------------------------------------------------------
Square brackets are used below to include all the allowed datatypes
for that subroutine family (e.g., uclgs[bdi] would indicate that there
are three different subroutines in the family, uclgsb, uclgsd, and uclgsi).


***Interface_Definition

1.  Get/read a scalar parameter 
---------------------------------------------------------------------------
	call pclgs[bdilrstx](parname, buffer, status)

		parname    string    name of parameter to get
		buffer     --        buffer of appropriate data type
		status     integer   return code: 0 = successful return
                                                 -1 = end of file on CL string
                                                  1 = CL parameter not found
                                                  2 = parameter has bad datatype
                                                  3 = parameter is undefined 
---------------------------------------------------------------------------

2.  Get/read a vector parameter  -- not currently implimented

---------------------------------------------------------------------------

	call pclgv[bdilrsx](parname, felem, nelem, nvals, buffer, status)

		parname    string    name of parameter to get
		felem      integer   first element to get (normally 1)
		nelem      integer   number of elements to get
		nvals      integer   number of elements actually read
		buffer     --        buffer of appropriate data type
		status     integer   return code: 0 = successful return
                                                 -1 = end of file on CL string
                                                  1 = CL parameter not found
                                                  3 = parameter is undefined 
                                                  6 = bad first element number
                                                  7 = bad number of elements
---------------------------------------------------------------------------

3.  Put/write a scalar parameter -- not currently implimented

---------------------------------------------------------------------------

	call pclps[bdilrstx](parname, buffer, status)

		parname    string    name of parameter to put
		buffer     --        buffer of appropriate data type
		status     integer   return code: 0 = successful return
                                                  3 = parameter is undefined 
                                                  5 = error putting parameter

---------------------------------------------------------------------------

4.  Put/write a vector parameter -- not currently implimented

---------------------------------------------------------------------------

	call pclpv[bdilrsx](parname, buffer, felem, nelem, status)

		parname    string    name of parameter to put
		buffer     --        buffer of appropriate data type
		felem      integer   first element to put(normally 1)
		nelem      integer   number of elements to put
		status     integer   return code: 0 = successful return
                                                  3 = parameter is undefined 
                                                  6 = bad first element number
                                                  7 = bad number of elements

---------------------------------------------------------------------------

5.  Get the text of error message corresponding to status code -- not
currently implimented

---------------------------------------------------------------------------
	call perget(status,text)

		status     integer  return status (presumably non-zero) from
                                    a previous call to one of the interface
                                    routines
                text       string   returned character string with full text
                                    of the error message

---------------------------------------------------------------------------

6. Write standard output to the screen and a log file.

---------------------------------------------------------------------------
	call xwrite(text, chat)

                text       string   returned character string with full text
                                    of the error message

                chat       integer  chatiness level of output, 5 is high
                                    10 is default, 15 is low

---------------------------------------------------------------------------

7. Write error message to the screen and a log file

---------------------------------------------------------------------------
	call xerror(text, chat)

                text       string   returned character string with full text
                                    of the error message

                chat       integer  chatiness level of output, 5 is high
                                    10 is default, 15 is low

---------------------------------------------------------------------------

**Table_updating

The parameter table will be automatically updated as the user enters
paramters that have a mode of "learn".

**Command_driven
For command driven XANADU programs the subroutine GTCOM2 is used to wrapup
this function. This routine already exists and is as follows: 

---------------------------------------------------------------------------
SUBROUTINE GTCOM2(String,Parse,Prompt_in,Command,Command_no,Sysdiru,
     &                 Sysdirv,Program,Version,Idone)

where
 sysdirv (c*30) - the system directory where the tables are kept (vms)
 sysdiru (c*30) - the system directory where the tables are kept (unix)
 program (c*10) - the name of the program running 
 version (c*6) - the version number of the program
 prompt_in (c*80) - user defined prompt string, if ' ' then uses [nn]program>
 command_no (i*4) - current command number
 command (c*50) - current command
 idone (i*4) - set to 1 if the command has already been executed in gtcom2
             - set to -1 if there is a fatal error
 string - the parsed command string
 parse - the current parse position (the position of the space after the 
          command/qualifer combination)

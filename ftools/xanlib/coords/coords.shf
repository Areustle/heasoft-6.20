*COORDS

**AITOFF_ORIGIN
AITOFF_ORIGIN

AITOFF_ORIGIN is a subroutine to handle Aitoff projections.  It is used by
AITOFF_FRAME.

Via the entry point AITOFF_XY, this subroutine calculates the rectangular
Aitoff coordinates (x,y) where

       -2 <= x <= +2 , -1 <= y <= +1

for the azimuth-elevation coordinates (phi,theta) where usually

       0 <= phi <= 360 DEGREES, -90 <= theta <= +90 DEGREES

although the usual rules of trigonometry apply for angles specified outside
this range.  North, defined by theta=+90, is up.  By default the (x,y) = (0,0)
corresponds to (phi,theta) = (0,0).  The origin may be put elsewhere by way of 
the main entry point.

For the the routines to be used for small parts of the sky as well as the
current all-sky plots, it may be necessary in the future to make all of the
arguments DOUBLE PRECISION REAL*8.

--------------------------------------------------------------------------------
CALL AITOFF_ORIGIN(Phi0,Theta0)

REAL*4 Phi0, Theta0
 
Library COORDS
--------------------------------------------------------------------------------

**AITOFF_FRAME
AITOFF_FRAME

AITOFF_FRAME is a subroutine which works out a series of points for a grid of
coordinates to overlay an Aitoff plot.  Currently it works only for the whole
sky centered on (0.,0.).  It calls AITOFF_ORIGIN and uses AITOFF_XY.

--------------------------------------------------------------------------------
CALL AITOFF_FRAME(Phi0,Theta0,Npts,X,Y)

REAL*4 Phi0, Theta0, X(*), Y(*)
INTEGER*4 Npts

Library COORDS
--------------------------------------------------------------------------------

**ANGLE
ANGLE

ANGLE is a subroutine which uses direction cosines and returns the angle Theta
between two positions on the sky.  Found is `true` if the angle is less than
Radius. 

--------------------------------------------------------------------------------
CALL ANGLE(Ra,Dec,Cenra,Cendec,Radius,Theta,First,Found)

REAL*8 Ra, Dec, Cenra, Cendec, Radius, Theta
LOGICAL*4 First, Found

Ra	     Trial RA
Dec	     Trial Dec
Cenra	     Input RA
Cendec	     Input Dec
Radius	     Cone radius
Theta	     Angular separation
First	     True if it is the first call of angle
Found	     True if Theta < Radius

Library COORDS
--------------------------------------------------------------------------------

**C9_SHF
C9_SHF

C9_SHF is a function to convert a nine-character calendar representation in
format yr, day number, hr, mn, (e.g., 892861729) to SHF key.

--------------------------------------------------------------------------------
INTEGER FUNCTION C9_SHF(Time,Status)

CHARACTER*9 Time
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------

**CHDEC
CHDEC

CHDEC is a subroutine which changes Dec decimal degrees to deg min sec (iflag =
1) or deg min sec to decimal degrees (iflag .ne. 1).

--------------------------------------------------------------------------------
CALL CHDEC(Dec,Idd,Idm,Dsec,Iflag)

REAL*4 Dsec
REAL*8 Dec 
INTEGER*4 Iflag, Idd, Idm

Library COORDS
--------------------------------------------------------------------------------
  
**CHRA
CHRA

CHRA is a subroutine which changes RA decimal degrees to hr min sec (iflag = 1) 
or hr min sec to decimal degrees (iflag .ne. 1). 

--------------------------------------------------------------------------------
CALL CHRA(Ra,Irh,Irm,Rsec,Iflag)

REAL*4 Rsec
REAL*8 Ra 
INTEGER*4 Irh, Irm, Iflag

Library COORDS
--------------------------------------------------------------------------------

**COCO
COCO

COCO is a subroutine to perform various coordinate convertions.  It transforms
coordinates from one reference frame to another according to the value of
Transform as follows :

Transform='GALACTIC TO 1950'
Transform='1950 TO GALACTIC'
Transform='1982.2 TO GALACTIC', the precession is calculated
Transform='1950 TO 2000', for precession
Transform='1976.6 TO ECLIPTIC', for the ecliptic coordinates at that epoch

--------------------------------------------------------------------------------
CALL COCO (Transform,Phi1,Theta1,Phi2,Theta2,Status)

CHARACTER*(*) Transform
REAL*8 Phi1, Theta1
REAL*8 Phi2, Theta2
INTEGER Status

Transform    - transform required
Phi1, Theta1 - azimuth, elevation coordinates in degrees
Phi2, Theta2 - azimuth, elevation coordinates in degrees

Library COORDS
--------------------------------------------------------------------------------

**CTG
CTG

CTG is a subroutine to convert CELESTIAL to GALACTIC coordinates.  The input is
RA and Dec and the output is Lii and Bii for equinox year 1950.  The parameter
Equinox is not currently used.

--------------------------------------------------------------------------------
CALL CTG (Ra,Dec,Equinox,Lii,Bii)
       
REAL*8 Ra, Dec, Equinox, Lii, Bii

Library COORDS
--------------------------------------------------------------------------------

**DIR_COS
DIR_COS

DIR_COS is a subroutine which calculates the three direction cosines for a
given RA and Dec.  It uses DCOSD and DSIND which work in degrees.

--------------------------------------------------------------------------------
CALL DIR_COS(Ra,Dec,Dircos)                         

REAL*8 Ra, Dec, Dircos(3)

Library COORDS
--------------------------------------------------------------------------------

**DPI
DPI

DPI is an INCLUDE file for the definitions of REAL*8 Pi and Qi.  See also PI.

--------------------------------------------------------------------------------
INCLUDE DPI

REAL*8 PI
REAL*8 QI
PARAMETER (PI=3.1415926535898)
PARAMETER (QI=PI/180d0)

Library COORDS
--------------------------------------------------------------------------------

**GETDAYNUM
GETDAYNUM

GETDAYNUM is a subroutine to convert from Month (number), Day, and Year to
sequential Daynumber.  Extra days for leap years are included.

--------------------------------------------------------------------------------
CALL GETDAYNUM(Month,Day,Year,Daynumber)

INTEGER*2 Month, Day, Year, Daynumber

Library COORDS
--------------------------------------------------------------------------------

**GETDEC
GETDEC

GETDEC is a subroutine to convert the Dec in deg min sec from the string and
return it in decimal degrees for the specified equinox.  If the string is
blank, the user will be prompted for the values.  See also XDEC.

--------------------------------------------------------------------------------
CALL GETDEC(String,Equinox,Decdeg,Ierr)

CHARACTER*(*) String
INTEGER*4 Ierr, Equinox
REAL*8 decdeg

Library COORDS
--------------------------------------------------------------------------------

**GETRA
GETRA

GETRA is a subroutine to convert the RA in hr min sec from the string and
return it as Radeg in decimal degrees for the specified equinox.  Radeg is the
default value at input.  If the string is blank, the user will be prompted for
the values.  See also XRA.

--------------------------------------------------------------------------------
CALL GETRA(String,Equinox,Radeg,Ierr)

CHARACTER*(*) string
INTEGER*4 Equinox, Ierr
REAL*8 Radeg

Library COORDS
--------------------------------------------------------------------------------

**GTC
GTC

GTC is a subroutine to convert GALACTIC to CELESTIAL coordinates.  The input
Lii and Bii are in degrees; the output RA and Dec are in degrees for the
equinox year 1950.  The equinox year parameter is not currently used.

--------------------------------------------------------------------------------
CALL GTC (Lii,Bii,Equinox,Ra,Dec)

REAL*8 Lii, Bii, Ra, Dec, Equinox

Library COORDS
--------------------------------------------------------------------------------

**ISITDG
ISITDG

ISITDG is a function to provide context-sensitive interpretation of coordinate
input.  String is an input of what the user specifes for RA or Dec.  Returned
is a logical specifying the type: true = decimal degrees; false = hr mn sec or
deg mn sec.

--------------------------------------------------------------------------------
LOGICAL*4 FUNCTION ISITDG(String)

CHARACTER*(*) String

Library COORDS
--------------------------------------------------------------------------------

**NOW
NOW

NOW is a function which calls VMS lib$date_time.

Systems: VMS

--------------------------------------------------------------------------------
CHARACTER*23 FUNCTION NOW(Status)
       
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------
                                                                                
**OBSDYR
OBSDYR

OBSDYR is a function that returns a REAL*8 decimal year for an input SHF key in
the range of years 1971 to 2000.

--------------------------------------------------------------------------------
REAL*8 FUNCTION OBSDYR(Shf,Status)

INTEGER Shf, Status

Library COORDS
--------------------------------------------------------------------------------
                                                                                
**OBS_SHF
OBS_SHF

OBS_SHF is a function to return the SHF key for an input character Time which
is specified as 'NOW', 'TODAY', 'YESTERDAY', 'LAST_WEEK', 'LAST_MONTH',
'LAST_YEAR', '_DAYS_AGO', '_WEEKS_AGO', '_MONTHS_AGO', or '_YEARS_AGO'.

Systems: VMS.

--------------------------------------------------------------------------------
INTEGER FUNCTION OBS_SHF(Time,Status)

CHARACTER*(*) Time                    
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------
                                                                                
**OBS_YEAR
OBS_YEAR

OBS_YEAR is a function to return the decimal year for an input SHF key within
the current range of years 1976 to 2000.

------------------------------------------------------------------------------- 
REAL*8 FUNCTION OBS_YEAR(Shf,Status)

INTEGER Shf, Status

Library COORDS
--------------------------------------------------------------------------------

**PI
PI

PI is an INCLUDE file for the definitions of REAL*4 PI and QI.  See also DPI.

--------------------------------------------------------------------------------
INCLUDE PI

REAL PI
REAL QI
PARAMETER (PI=3.1415926535898)
PARAMETER (QI=PI/180.)

Library COORDS
--------------------------------------------------------------------------------

**PREC
PREC

PREC is a subroutine to precess celestial coordinates by providing an interface
to a modified version of SLA_PRECESS fixed to the FK5 System.  RA and Dec are
in REAL*8 degrees.  Jy is the INTEGER*4 year (e.g., 2000).  Precession is to
1950 if L=1 or from 1950 if L=2.

--------------------------------------------------------------------------------
CALL PREC(Ra,Dec,Jy,L)
       
INTEGER*4 Jy, L
REAL*8 Ra, Dec

Library COORDS
--------------------------------------------------------------------------------

**PRCESS
PRCESS

PRCESS is a subroutine to precess coordinates.  It was renamed from SLA_PRECESS
and modified to make System case-insensitive.  The precession is either FK4
(Bessel-Newcomb, pre-IAU1976) or FK5 (Fricke, post-IAU1976) as required.  The
epochs are Besselian if system='FK4' and Julian if 'FK5'.  This routine will
not correctly convert between the old and the new systems. If an invalid system
is supplied, values of -99d0,-99d0 will be returned for both RA and Dec.

--------------------------------------------------------------------------------
CALL PRCESS(System,Ra,Dc,Ep0,Ep1)

CHARACTER*(*) System
REAL*8 Ep0, Ep1, Ra, Dc

System        Precession to be applied: 'FK4' or 'FK5'
E0, E1        Starting and ending epochs
Ra, Dc        RA, Dec, mean equator & equinox of epoch Ep0

Library COORDS
--------------------------------------------------------------------------------

**SCHDEC
SCHDEC

SCHDEC is a subroutine to change decimal degrees to a string containing
degrees, minutes, and seconds.

--------------------------------------------------------------------------------
CALL SCHDEC(Dec,String)

CHARACTER*(*) String
REAL*8 Dec 

Library COORDS
--------------------------------------------------------------------------------

**SCHRA
SCHRA

SCHRA is a subroutine to change RA in degrees to a string containing hour,
minute, and seconds. 

--------------------------------------------------------------------------------
CALL SCHRA(Ra,String)

CHARACTER*(*) String
REAL*8 Ra 

Library COORDS
--------------------------------------------------------------------------------

**SHFDYR       
SHFDYR       

SHFDYR is a subroutine which returns a decimal year for a given SHF key within
the current range of years 1976 to 2000.

--------------------------------------------------------------------------------
REAL*8 FUNCTION SHFDYR(Shf, Status)

INTEGER Shf, Status

Library COORDS
--------------------------------------------------------------------------------

**SHFTIM
SHFTIM

SHFTIM is a subroutine which converts a Short History File time, SHF, to year,
day, hour, minute and second.  Tim is the SHF key after the words have been
swapped.  Words are not swapped for Sun.

--------------------------------------------------------------------------------
CALL SHFTIM(Shf, Yr, Day, Hr, Mn, Sec, Tim)

INTEGER*2 Shf(2)
INTEGER Yr, Day, Hr, Mn, Sec, tim

Library COORDS
--------------------------------------------------------------------------------

**SHF_C9
SHF_C9

SHF_C9 is a function to convert SHF key to a nine-character calendar 
representation yr, day, hr, mn.

--------------------------------------------------------------------------------
CHARACTER*9 FUNCTION SHF_C9(Shf,Status)

INTEGER Shf, Status

Library COORDS
--------------------------------------------------------------------------------

**SHF_YMD
SHF_YMD

SHF_YMD is a subroutine to convert SHF key to a nine-character calendar
representation as DD-MON-YR where MON is the three-character abbreviation for
the month name.

--------------------------------------------------------------------------------
CHARACTER*9 FUNCTION SHF_YMD(Shf,Status)

INTEGER Shf, Status

Library COORDS
--------------------------------------------------------------------------------

**SLPREC
SLPREC

SLPREC is a subroutine to precess coordinates from one epoch to another.  It
was modified from SLA_PRECESS.  The precession is fixed system FK5 (Fricke,
post-IAU1976). 

------------------------------------------------------------------------------- 
CALL SLPREC(Ra,Dc,Ep0,Ep1)

DOUBLE PRECISION Ep0, Ep1, Ra, Dc

Library COORDS
--------------------------------------------------------------------------------

***SPREBN
SPREBN

SPREBN is a subroutine to generate the matrix of precession between two epochs
using the pre-IAU1976 Bessel-Newcomb model using Andoyer's formulation.  It is
used by PRCESS and SLPREC.

--------------------------------------------------------------------------------
CALL SPREBN(Bep0,Bep1,Rmatp)

DOUBLE PRECISION Bep0, Bep1, Rmatp(3,3)

Bep0    dp          Beginning Besselian epoch
Bep1    dp          Ending Besselian epoch
Rmatp   dp(3,3)     Precession matrix

Library COORDS
--------------------------------------------------------------------------------

**SPREC
SPREC
     
SPREC is a subroutine to form the matrix of precession between two epochs
(IAU1976/FK5).  It is used by PRCESS and SLPREC.

--------------------------------------------------------------------------------
CALL SPREC(Ep0,Ep1,Rmatp)
 
REAL*8 Ep0, Ep1, Rmatp

Ep0     dp         beginning epoch
Ep1     dp         ending epoch
Rmatp   dp(3,3)    precession matrix

--------------------------------------------------------------------------------

**SDEULER
SDEULER

SDEULER is a subroutine to form a rotation matrix from the Euler angles - three
successive rotations about specified cartesian axes.

--------------------------------------------------------------------------------
CALL SDEULER(Order,Phi,Theta,Psi,Rmat)

CHARACTER*(*) Order
REAL*8 Phi , Theta , Psi , Rmat(3,3)
 
Order  c*(*)    specifies about which axes the rotations occur
Phi    dp       1st rotation (radians)
Theta  dp       2nd rotation (   "   )
Psi    dp       3rd rotation (   "   )

Library COORDS
--------------------------------------------------------------------------------
 
**SDRANRM
SDRANRM

SDRANRM is a subroutine to nomalize an angle into the range zero to two PI.  It
is used by PRCESS and SLPREC.

--------------------------------------------------------------------------------
REAL*8 FUNCTION SDRANRM(Angle)

REAL*8 Angle

Angle     dp      the angle in radians

Library COORDS
--------------------------------------------------------------------------------
 
**SDCS2C
SDCS2C

SDCS2C is a subroutine to convert spherical coordinates to direction cosines. 
It is used by PRCESS and SLPREC.

--------------------------------------------------------------------------------
CALL SDCS2C(A,B,V)

REAL*8 A, B, V(3)

A, B       dp       spherical coordinates in radians
V          dp(3)    x,y,z unit vector

Library COORDS
--------------------------------------------------------------------------------

**SDMXV
SDMXV

SDMXV is a subroutine that performs the a three-dimensional forward unitary 
transformation.  It is used by PRCESS and SLPREC.

--------------------------------------------------------------------------------
CALL SDMXV(Dm,Va,Vb)

REAL*8 Dm(3,3), Va(3), Vb(3)

Dm           dp(3,3)    Matrix
Va, Vb       dp(3)      Vector

Library COORDS
--------------------------------------------------------------------------------

**SDCC2S
SDCC2S

SDCC2S is a subroutine to convert direction cosines to spherical coordinates. 
It is used by PRCESS and SLPREC.

--------------------------------------------------------------------------------
CALL SDCC2S(V,A,B)

REAL*8 V(3), A, B

V      d(3)   x,y,z vector
A, B   d      spherical coordinates in radians

Library COORDS
--------------------------------------------------------------------------------

**TIMAK
TIMAK

TIMAK is a subroutine to convert from year, day number, hour, minute, and
second in an INTEGER*2 array to SHF key.

--------------------------------------------------------------------------------
CALL TIMAK(Tarr,Key)
      
INTEGER*4 Key
INTEGER*2 tarr(5)

Library COORDS
--------------------------------------------------------------------------------

**TIMKA
TIMKA

TIMKA is a subroutine to convert from SHF key to INTEGER*2 array of year, day
number, hour, minute , second.

--------------------------------------------------------------------------------
CALL TIMKA(Key,Tarr)

INTEGER*4 Key
INTEGER*2 Tarr(5)

Library COORDS
--------------------------------------------------------------------------------

**TRANC
TRANC

TRANC is a subroutine which performs a spherical coordinate transformation.

--------------------------------------------------------------------------------
CALL TRANC(Alpha,Delta,Alphap,Deltap,Theta,Thetap,Rinc)

REAL*8 Alpha, Delta, Alphap, Deltap, Theta, Thetap, Rinc

Library COORDS
--------------------------------------------------------------------------------

**XALPHA
XALPHA

XALPHA is a function to return an hr, min, sec, (alpha) string from RA in
degrees.

--------------------------------------------------------------------------------
CHARACTER*80 FUNCTION XALPHA(Ra,Status)
       
REAL*8 ra
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------

**XANGLE
XANGLE

XANGLE is a function to extract in degrees from value, using units, where the
() can be degrees, arcminutes, arcseconds,(), radians.

--------------------------------------------------------------------------------
REAL*8 FUNCTION XANGLE(Angle,Units,Status)

REAL*8 Angle
CHARACTER*(*) Units
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------

**XCTIME
XCTIME

XCTIME is a function to return the VAX/VMS standard ASCII time format.  It
calls the function NOW.

--------------------------------------------------------------------------------
CHARACTER*23 FUNCTION XCTIME(Time,Status)

CHARACTER*(*) Time
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------

**XDEC
XDEC

XDEC is a function to extract declination in decimal degrees from an input
string given in deg min sec.

--------------------------------------------------------------------------------
REAL*8 FUNCTION XDEC(String,Status)
     
CHARACTER*(*) String
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------

**XDELTA
XDELTA

XDELTA is a function to return a deg min sec (delta) string from input
Declination in degrees.

--------------------------------------------------------------------------------
CHARACTER*80 FUNCTION XDELTA(Dec,Status)

REAL*8 Dec
INTEGER Status

Library COORDS
--------------------------------------------------------------------------------

**XKDATE
XKDATE

XKDATE is a function to return the string 'yyyy-MMM-dd hh:mm:ss' from SHF key.

--------------------------------------------------------------------------------
CHARACTER*(*) FUNCTION XKDATE(Shf)

INTEGER*4 Shf

Library COORDS
--------------------------------------------------------------------------------

**XKDDDAT
XKDDAT

XKDDAT is a function to return the string 'yyyy.ddd hh:mm:ss' from SHF key.

--------------------------------------------------------------------------------
CHARACTER*(*) FUNCTION XKDDAT(Shf)

INTEGER*4 Shf

Library COORDS
--------------------------------------------------------------------------------

**XKJD
XKJD

XKJD is a function to return the Julian date from SHF key.

--------------------------------------------------------------------------------
REAL*8 FUNCTION XKJD(Shf)

INTEGER*4 Shf 

Library COORDS
--------------------------------------------------------------------------------

**XKMJD
XKMJD

XKMJD is a function to return the MJD from SHF key.

--------------------------------------------------------------------------------
REAL*8 FUNCTION XKMJD(Shf)

INTEGER*4 Shf  

Library COORDS
--------------------------------------------------------------------------------

**XKYEAR
XKYEAR

XKYEAR is a function to return the decimal year from SHF key using the
subroutine TIMKA.

--------------------------------------------------------------------------------
REAL*8 FUNCTION XKYEAR(Shf)

INTEGER*4 Shf

Library COORDS
--------------------------------------------------------------------------------

**XMONTH
XMONTH

XMONTH is a function to return the month name from month number.

--------------------------------------------------------------------------------
CHARACTER*(*) FUNCTION XMONTH(N)

INTEGER*4 N

Library COORDS
--------------------------------------------------------------------------------

**XRA
XRA

XRA is a function to extract RA in degrees from an input string in hr, min,
sec.

--------------------------------------------------------------------------------
REAL*8 FUNCTION XRA(String,Status)

CHARACTER*(*) String
INTEGER*4 Status

Library COORDS
--------------------------------------------------------------------------------

**XRDANG
XRDANG

XRDANG is a subroutine to read dd-mm-ss.s from an input string and return them
as variables Id, Im, 

--------------------------------------------------------------------------------
CALL XRDANG(String,Id,Im,Rs,*)

CHARACTER*(*) String
REAL*4 Rs
INTEGER*4 Im, Id

Library COORDS
--------------------------------------------------------------------------------

**XYDMD
XYDMD

XYDMD is a subroutine to change for a given YEAR, DAY-OF-YEAR (day number) to
numeric MONTH, DAY-OF-MONTH.

--------------------------------------------------------------------------------
CALL XYDMD(Year,Doy,Month,Dom)

INTEGER*2 Year, Doy, Month, Dom

Library COORDS
--------------------------------------------------------------------------------

**YMDDNO
YMDDNO

YMDDNO is a subroutine to convert VAX 23-character representation to  and
INTEGER*2 array of day number, hour, minute, and second.

--------------------------------------------------------------------------------
CALL YMDDNO(Time,Itim,Ierr)

INTEGER*2 itim(5)
INTEGER*4 Ierr
CHARACTER*22 time

Library COORDS
--------------------------------------------------------------------------------

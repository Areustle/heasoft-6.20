#! /usr1/local/bin/perl5
use Getopt::Std;
require "interface.pl";
require "utils.pl";

# EXOPHA
# This program will prompt the user for information to be included in
# the call to the ascii2pha FTOOL. This program is intended strictly
# for EXOSAT so it will assume certain default values. The inputs can also 
# be given on the command line.
#
# This is the command line syntax
#
# exopha -o outfile -r rate -e error -i instrume -f filter -x exposure
#
# where: 
#      outfile - output FITS file
#      rate - count rate 
#      error - error of count rate
#      instrume - instrument in use (CMA1 or CMA2)
#      filter - filter in use (3lx, 4lx, Al/P, Bor, PPL)
#      exposure - exposure time in seconds
#
# Some of the parameters are defined in the script and don't have to be 
# input by the user they are:
#
# telescope=EXOSAT
# areascal=86.4
# detnam=" "
# infile = ascii_cma.txt
# chanpres = no
# dtype = 2
# qerror = yes
# rows= -
# fchan = 1
# tlmin = 1
# detchans = 1
# equinox=1950.0

#
# These are the default values
#
$telescope="EXOSAT";
$area_scal=86.4;
$detnam="\" \" ";    # Detector name
$chat=9;
$clobber="no";
$equinox=1950.0;
$command_line=0;
$runfile="exopharun";
$in_file="ascii_cma.txt";
$chanpres="no";      # Channel data present
$dtype=2;            # Input datatype 1=counts 2=rate 
$qerror="yes";       # Errors present?
$rows="-";           # List of lines to be read in ASCII file
$fchan=1;            # First Channel Number present in ASCII file
$tlmin=1;            # First legal detector channel
$detchans=1;         # Number of legal detector channels

getopts('o:r:e:i:f:x:yh');
#** Note for using Getopts **
# all arguments in Getopts that are followed by a colon require an argument
# Example:
# h as written above therefore doesn't require an argument
#
# Example 2:
# &Getopts('cde:hmqvw:x:');
# e and w and x require arguments
# c,d,e,h,m,q,and v do not
#****************************

if ( defined $opt_h){
    print <<EOHELP1;
    
EXOPHA
	
USAGE
    exopha -o outfile -r rate -e error -i instrume -f filter -x exposure
	    
DESCRIPTION

 This script generates one channel OGIP FITS PHA file for the Low Energy 
 telescope used in conjunction with the Channel Multiplier array detectors 
 (CMA1 and CMA2) on board EXOSAT. Response matrices suitable for the spectral 
 files generated by this script are available in the HEASARC calibration
 database. The PHA file and response matrices are in XSPEC compatible format.
 To create the PHA file, the script invokes the task 'ascii2pha' available 
 within the heasarc package currently distributed with ftools. The required
 input paramaters are : count rate and error, detector name, filter, exposure
 and output filename. The filter values for both CMA1 and CMA2 are : 
 PPL, 4Lex, 3Lex,Bor,AL/P. Since the CMA1 and CMA2 (all filters) response 
 matrices are on-axis, the count rate for off-axis sources should be 
 corrected as observed on-axis using 'exovign'. Deadtime due to 
 telemetry loss can considerably effect the count rate and ultimatly 
 the flux estimate. The input count rate should therefore derived from 
 images or lightcurves corrected for deadtime using 'cmadead'.
 All input parameters can be entered either in response to prompts or 
 on the command line by using the appropriate flags.
 
FLAGS

     -h - Prints this help file
     -y - overwrite an existing FITS file 

    the following flags require arguments
     -o - the output FITS file name 
     -r - the count rate
     -e - the count rate error
     -i - the instrument [CMA1 or CMA2 only]
     -f - the filter [3Lx, 4Lx, Al/P, Bor, PPL]
     -x - the exposure time in seconds

 Parameters set within the script and relevant for the EXOSAT mission:

 telescope=EXOSAT
 areascal=86.4

EXAMPLES 

   Create a CMA1 pha file with a count rate of 2e-3 +/- 1e-3
   in the 3Lx filter with an exposure of 2000 seconds   
  > exopha -o output.pha -r 2e-3 -e 1e-3 -i cma1 -f 3Lx -x 2000
 
EOHELP1
&exit_wish;
}

open (TEMP,">$runfile");

# Read Command Line Arguments or Prompt User

#Output FITS file name
if(defined $opt_o){
    $out_file=$opt_o;
    $command_line=1;
}else{
    $out_file= &getScalar("Enter output FITS file name");
}

# Clobber any existing output file?
if(defined $opt_y){
    $clobber="yes";
}else{
#check if output file already exists
    if( -e $out_file){
	$clobber=&MessageYesOrNo('n',"Output file already exists! Do you want to overwrite it?\n");
	if($clobber){
	    $clobber="yes";
	}else{
	    $clobber="no";
            `rm $runfile`;
	    die "exopha: $out_file unchanged.\n";
	}
    }
}

# Count rate
if(defined $opt_r){
    $rate=$opt_r;
}else{
    $rate=&getScalar("Count rate",1,"rate"," ");
    if($rate == -999){
       &exit_wish;
    }
}
$notrate=1;
while($notrate){
    if($rate !~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([DdEe]([+-]?\d+))?$/ ){
	print("The count rate is not valid. Enter count rate.\n");
	$rate=&getScalar("Count rate, -999 to quit",1,"rate"," ");
	if($rate == -999){
	    &exit_wish;
	}
    }else{
	$notrate=0;
    }
}      

# Count rate Error
if(defined $opt_e){
    $error=$opt_e;
}else{
    $error=&getScalar("Error",1,"error"," ");
    if($error == -999){
       &exit_wish;
    }
}
$noterr=1;
while($noterr){
    if($error !~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([DdEe]([+-]?\d+))?$/ ){
	print("The error is not valid. Enter error.\n");
	$error=&getScalar("Error, -999 to quit",1,"error"," ");
	if($error == -999){
	    &exit_wish;
	}
    }else{
	$noterr=0;
    }
}      

#Instrument in use [CMA1 or CMA2]
if(defined $opt_i){
    $instrume=$opt_i;
}else{
    $instrume=&getScalar("Instrument in use (CMA1 or CMA2)");  
}
$instrume =~ tr/A-Z/a-z/;
$notinst=1;
if($instrume =~ /^(cma1|cma2)$/) {
#    print("The instrument you selected is ok!\n");
}else{
    while($notinst){
         print("Instrument incorrect. Please select another instrument \n");
         $instrume=&getScalar("CMA1 or CMA2, -999 to quit");  
         $instrume =~ tr/A-Z/a-z/;
         if($instrume =~ /^(cma1|cma2)$/) {
            $notinst=0;
         }elsif($instrume == -999){
           &exit_wish;
         }
    }
}


#Filter in use [3Lx, 4Lx, Al/P, Bor, PPL]
if(defined $opt_f){
    $filter=$opt_f;
}else{
    $filter=&getScalar("Filter in use (3Lx, 4Lx, Al/P, Bor, PPL)");  
}
$filter =~ tr/A-Z/a-z/;
$notfilt=1;
if($filter =~ /^(3lx|4lx|al\/p|bor|ppl)$/) {
#    print("The filter you selected is ok!\n");
}else{
    while($notfilt){
         print("Filter incorrect. Please select another filter \n");
         $filter=&getScalar("3Lx, 4Lx, Al/P, Bor, PPL, -999 to quit");  
         $filter =~ tr/A-Z/a-z/;
         if($filter =~ /^(3lx|4lx|al\/p|bor|ppl)$/) {
            $notfilt=0;
         }elsif($filter == -999){
           &exit_wish;
         }
    }
}
#Exposure time in seconds
if(defined $opt_x){
    $exposure=$opt_x;
}else{
    $exposure=&GetNumber("Exposure time in seconds",1,"exposure"," ");
    if($exposure == -999){
       &exit_wish;
    }

}
if($exposure !~ /^(-?\d+\.?\d*|-?\.\d+)$/ ){
    print("The exposure time is not valid. Enter exposure time.\n");
    $exposure=&GetNumber("Exposure time",1,"exposure"," ");
    if($exposure == -999){
        &exit_wish;
    }
}      


# Create ASCII input file ascii_cma.txt
open (ASCII_INPUT,">$in_file");
print ASCII_INPUT " $rate $error \n";
close ASCII_INPUT;

#print "ascii2pha exposure=$exposure areascal=$area_scal infile=$in_file outfile=$out_file chanpres=$chanpres dtype=$dtype qerror=$qerror rows=$rows fchan=$fchan tlmin=$tlmin detchans=$detchans telescope=$telescope detnam=$detnam instrume=$instrume filter=$filter chatter=$chat clobber=$clobber equinox=$equinox\n";

print TEMP ("ascii2pha exposure=$exposure areascal=$area_scal infile=$in_file outfile=$out_file chanpres=$chanpres dtype=$dtype qerror=$qerror rows=$rows fchan=$fchan tlmin=$tlmin detchans=$detchans telescope=$telescope detnam=$detnam instrume=$instrume filter=$filter chatter=$chat clobber=$clobber equinox=$equinox\n");

close TEMP;

chmod 0777, $runfile;


@output=&runcom("$runfile > outerr");
# print "@output \n";
if($output[0] =~ /Error/i){
    open(ERR,"outerr");
    while($line=<ERR>){
	print("$line");
    }
    close ERR;
    `rm outerr`;
}
open(ERR,"outerr");
while($line=<ERR>){
    print("$line");
}
close ERR;
`rm outerr`;

`rm $in_file`;
`rm $runfile`;


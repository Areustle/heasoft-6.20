#!/usr/bin/perl
#
#  ut_numkarf_fpma
#
#
#
# Changes:
#      0.1.0 : NS 15/12/2011 - First Release
#      0.1.1 : NS 25/01/2012 - Handle new input parameters
#      0.1.2 : NS 08/01/2012 - Handle new input parameters for extended sources
#      0.1.3 : NS 01/03/2012 - Updated the dataset
#      0.1.4 - NS 16/05/2012 - Added 'phibin' input parameter
#      0.1.5 - NS 14/12/2012 - Changed Dataset
#      0.1.6 - NS 22/02/2013 - Added new input parameters
#      0.1.7 - NS 12/04/2013 - Added new input parameters
#      0.1.8 - NS 10/07/2013 - Added new input parameters
#      0.1.9 - NS 19/07/2013 - Added new input parameters
#      0.2.0 - NS 28/03/2014 - Added new input parameters
#      0.2.1 - NS 20/05/2015 - Added new input parameters
#
#

use strict;
use ut_nustar;



# main
{
# Object Istances
    my $ut = ut_nustar->new(
			    name    => "numkarf",
			    utname  => "ut_numkarf_fpma",
			    version => "0.2.1",
			    );
    
# Set Parameter
    my $input = $ut->getParam("input_dir");
    my $output = $ut->getParam("output_dir") . "/" . $ut->getParam("utname");
    $ut->setParam("output_dir",$output);
    my $chat = $ut->getParam("chatter");
    my $clobber = $ut->getParam("clobber");
    
# I/O Directory Check
    $ut->checkIODirectory()
        if $ut->isValid;

# Environment check
    my @chk_env = ("LHEASOFT", "HEADAS", "CALDB");

    $ut->checkEnvironment(@chk_env)
        if $ut->isValid;
    
    my $ArchDir="ut_numkarf";  
    
# Input Files Check
    my @chk_inp = ("$input/$ArchDir/nu00015011001A01_sr.pha",
		   "$input/$ArchDir/nu00015011001A_oa.fits",
		   "$input/$ArchDir/nu00015011001A01_src.reg",
		   );

    $ut->checkExist("Input", @chk_inp)
	if $ut->isValid;
    
# Prototype Check
   my @chk_proto = (
		    "$input/$ArchDir/ut_numkarf_fpma.arf",
		    "$input/$ArchDir/ut_numkarf_fpma_offaxis.fits",
		    "$input/$ArchDir/ut_numkarf_fpma_offaxishisto.fits",
		    "$input/$ArchDir/ut_numkarf_fpma_apstophisto.fits",
		    "$input/$ArchDir/ut_numkarf_fpma_grhisto.fits",
		    );
    $ut->checkExist("Prototype", @chk_proto)
        if $ut->isValid;

# Executables Files Check
    my @chk_exe = ("numkarf","ftdiff","fverify", "pquery2");
    $ut->checkExecutable(@chk_exe)
        if $ut->isValid;

# Task Files Check
    my %par_task = (
		    phafile        => "$input/$ArchDir/nu00015011001A01_sr.pha",
		    outfile        => "$output/out_numkarf_fpma.arf",
		    optaxisfile    => "$input/$ArchDir/nu00015011001A_oa.fits",
		    offaxisfile    => "$output/out_numkarf_fpma_offaxis.fits",
		    offaxishisto   => "$output/out_numkarf_fpma_offaxishisto.fits",
		    apstophisto    => "$output/out_numkarf_fpma_apstophisto.fits",
		    grhisto        => "$output/out_numkarf_fpma_grhisto.fits",
		    infile         => "$input/$ArchDir/nu00015011001A01_cl.evt",
		    pixposfile     => "CALDB",
		    alignfile      => "CALDB",
		    mastaspectfile => "$input/$ArchDir/nu00015011001_mast.fits",
		    attfile        => "$input/$ArchDir/nu00015011001_att.fits",
		    teldef         => "CALDB",
		    instrprobmapfile => "CALDB",
		    inexpomapfile  => "NONE",
		    aberration     => "no",
		    det1reffile    => "$input/$ArchDir/nu00015011001A_det1.fits",
		    pixbin         =>  60,
		    phibin         =>  10,
		    apstopphibin   =>  10,
		    grphibin       =>  10,
		    inarffile      => "CALDB",
		    grppsffile     => "CALDB",
		    psfdir         => "CALDB",
		    vignfile       => "CALDB",
		    apstopcorrfile => "CALDB",
		    grcorrfile     => "CALDB",
		    detabscorrfile => "CALDB",
		    srcregionfile  => "$input/$ArchDir/nu00015011001A01_src.reg",
		    psfflag        => "yes",
		    vignflag       => "yes",
		    apstopflag     => "yes",
		    grflag         => "yes",
		    detabsflag     => "yes",
		    extended       => "no",
		    boxsize        => 10,
		    pilowarf       => 35,
		    pihigharf      => 1909,
		    flatflag       => "no",
		    percent        => 0.02,
		    cutmaps        => "yes",
		    initseed       => "yes",
		    cleanup        => "yes",
		    chatter        => $chat,
		    clobber        => "$clobber",
		    history        => "yes", 
		    );

    $ut->runTask(%par_task)
	if $ut->isValid;
    if($ut->isValid)
    {
	
# fverify
	$ut->fverify("$output/out_numkarf_fpma.arf");
	$ut->fverify("$output/out_numkarf_fpma_offaxis.fits");
	$ut->fverify("$output/out_numkarf_fpma_offaxishisto.fits");
	$ut->fverify("$output/out_numkarf_fpma_apstophisto.fits");
	$ut->fverify("$output/out_numkarf_fpma_grhisto.fits");
	
	
# ftdiff
	$ut->ftdiff("$output/out_numkarf_fpma.arf",
		    "$input/$ArchDir/ut_numkarf_fpma.arf");

	$ut->ftdiff("$output/out_numkarf_fpma_offaxis.fits",
		    "$input/$ArchDir/ut_numkarf_fpma_offaxis.fits");

	$ut->ftdiff("$output/out_numkarf_fpma_offaxishisto.fits",
		    "$input/$ArchDir/ut_numkarf_fpma_offaxishisto.fits");

	$ut->ftdiff("$output/out_numkarf_fpma_apstophisto.fits",
		    "$input/$ArchDir/ut_numkarf_fpma_apstophisto.fits");

	$ut->ftdiff("$output/out_numkarf_fpma_grhisto.fits",
		    "$input/$ArchDir/ut_numkarf_fpma_grhisto.fits");

    }
    
    $ut->delete();
}


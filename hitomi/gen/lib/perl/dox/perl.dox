/**
\defgroup mod_perl_ahapp Perl libraries for astro-h (perl/ahapp)
@ingroup mod_gen_lib
\defgroup mod_perl_ahfilterlib Perl libraries for astro-h (perl/ahfilterlib)
@ingroup mod_gen_lib
\defgroup mod_perl_ahgen Perl libraries for astro-h (perl/ahgen)
@ingroup mod_gen_lib
\defgroup mod_perl_ahlog Perl libraries for astro-h (perl/ahlog)
@ingroup mod_gen_lib
*/

/** \addtogroup mod_perl_ahapp
 *  @{
 *  \section mod_perl_ahapp Interact with parameters, start up and shut down logfile
 */

/// \brief Read standard perl parameters and start log file
void startup(void); 

/// \brief Close log file
void shutdown(void);

/// \brief Traverse the input directory, find all input files that match stem
/// \param[in] param    Parameter to read from par file
/// \param[in] logical  Read parameter as boolean
/// \return value of parameter
string query_parameter(string param, int logical);

/// \brief Create list of parameters or write to file
/// \param[in] fits_file FITS file to write parameters to
/// \param[in] extension Extension to write parameters to
/// \return array of parameters from par file
@string write_parameters(string fits_file, string ext); 

/// \brief Read cleanup flag
/// \return cleanup flag
int getcleanup(void);

/// \brief Add file to array of temporary files
/// \return nonzero if error, otherwise zero
int add_temp_file(void);

/// \brief Delete all current temporary files
/// \return nonzero if error, otherwise zero
int delete_temp_files(void);

/// \brief Print flag to show current tool running
/// \return nonzero if error, otherwise zero
int begin_processing(void);

/// \brief Print all tool parameters to log file if in debug mode
/// \return nonzero if error, otherwise zero
int print_input_parameters(void);

/// \brief Print tool flag, close log file and exit tool
/// \param[in] status Status to exit tool with
/// \return nonzero if error, otherwise zero
int end_processing(void);

/** @} */

/** \addtogroup mod_perl_ahfilterlib
 *  @{
 *  \section mod_perl_ahfilterlib Screening library for Astro-H specific subroutines
 */

/// \brief Merge all input files to single file using ftmerge and ftverify
/// \param[in] infile_list Input \@filelist with files to merge
/// \param[in] outfile     Output file with merged events
/// \return nonzero if error, otherwise zero
int mergeEvents(string infile_list, string outfile);

/// \brief Print tool flag, close log file and exit tool
/// \param[in] infile_list Input \@filelist with files to merge
/// \param[in] outfile     Output file with merged events
/// \param[in] mergemode   (Optional) Merge mode of GTI files AND or OR
/// \param[in] instarts    (Optional) Input START column
/// \param[in] instops     (Optional) Input STOP column
/// \param[in] outstart    (Optional) Output START column
/// \param[in] outstop     (Optional) Output STOP column
/// \param[in] upkeyword   (Optional) Update timing keywords (yes/no)
/// \return number of GTI files merged
int mergeGTI(string infile_list, string outfile, string mergemode, string instarts,
             string instops, string outstart, string outstop, int upkeyword);

/// \brief Read expression from CALDB labelfile
/// \param[in] label       Label to read expression from
/// \param[in] labelfile   CALDB file to read label with
/// \param[in] tstart      Time for CALDB labelfile
/// \param[in] instrument  Instrument for labelfile
/// \return Expression, file suffix and extension
@string GetCaldbExpr(string label, string labelfile, double tstart, string instrument);

/// \brief Print tool flag, close log file and exit tool
/// \param[in] datestart   Requested date in YYYY-MM-DD format 
/// \param[in] timestart   Requested Time in hh:mm:ss format
/// \param[in] instrument  Instrument for CALDB file
/// \param[in] exnum       Number of expected extensions in CALDB file
/// \return list of CALDB file and number of extensions
@string CallQuzcif(string datestart, string timestart, string instrument, int exnum);

/// \brief Read label file to get expression for filtering
/// \param[in] label       Label to read expression from
/// \param[in] labelfile   CALDB file to read label with
/// \return Expression from labelfile
string ReadLabelFile(string label, string labelfile);

/// \brief copy keywords from input, update timing keywords and verify output file 
/// \param[in] infile    Input file to copy keywords from
/// \param[in] outfile   Output file to copy keywords to
/// \param[in] cpkeys    Keywords to copy from input file to output file
/// \param[in] upkeys    Update timing keywords
/// \param[in] inextref  Input extenstions to calculate timing keywords from
/// \param[in] outextref Extensions to write timing keywords to
/// \return nonzero if error, otherwise zero
int finalizeOutfile(string infile, string outfile, int copykeys, int upkeys, @string inextref, @string outextref);

/// \brief Copy list of input keywords to output file
/// \param[in] infile    Input file to copy keywords from
/// \param[in] outfile   Output file to copy keywords to
/// \param[in] cpkeys    Keywords to copy from input file to output file (or ALL)
/// \param[in] outextref Extensions to write timing keywords to
/// \return nonzero if error, otherwise zero
int copyKeywords(string infile, string outfile, int copykeys,@string outextref);

/// \brief Calculate timing keywords from input GTI file and write to a keyword file
/// \param[in] gtifile    Input GTI file to calculate timing keywords from
/// \param[in] gtiext     Input extenstions to calculate timing keywords from
/// \param[in] keys_file  \@file with keywords and values to write to file
/// \return nonzero if error, otherwise zero
int calcTimingKeys(string gtifile, @string gtiext, string keys_file);

/// \brief Use keyword file to update keywords in file and extensions
/// \param[in] gtifile    Output GTI file to write timing keywords to
/// \param[in] extref     Extensions to write timing keywords to
/// \param[in] keys_file  \@file with keywords and values to write to file
/// \return nonzero if error, otherwise zero
int updateKeywords(string gtifile, @string extref, string keys_file);

/// \brief Run tool ftselect and screen data
/// \param[in] ftselect_ref Hash of parameters and values to run ftselect with
/// \return nonzero if error, otherwise zero
int runFtselect(%string & ftselect_ref);

/// \brief Run tool ahgtigen and create or merge gti
/// \param[in] ahgtigen_ref Hash of parameters and values to run ahgtigen with
/// \return nonzero if error, otherwise zero
int runGTIGen(%string & ahgtigen_ref);

/// \brief Run tool ahscreen and screen data
/// \param[in] ahscreen_ref Hash of parameters and values to run ahscreen with
/// \return nonzero if error, otherwise zero
int screenEvents(%string & ahscreen_ref);

/// \brief Run tool ahgainfit and create gain file
/// \param[in] ahgainfit_ref Hash of parameters and values to run ahgainfit with
/// \return nonzero if error, otherwise zero
int runGainfit(%string & ahgainfit_ref);

/// \brief Run tool maketime and create GTI
/// \param[in] maketime_ref Hash of parameters and values to run maketime with
/// \return nonzero if error, otherwise zero
int runMaketime(%string & maketime_ref);

/// \brief Calculate GTI sum, tstart and tstop using gtisum
/// \param[in] infile    Input file to copy keywords from
/// \param[in] extension Extension to read GTI from
/// \return GTI sum, TSTART and TSTOP
@double getGtiSum(string infile, string extension);

/// \brief Convert seconds from epoch time
/// \param[in] intime    Input time to convert
/// \param[in] utcepoch  Input UTC epoch time to calculate from
/// \param[in] format    Format of UTC epoch time
/// \return Converted time
double convertSecondsToDatetime(double intime, double utcepoch, string format);

/** @} */

/** \addtogroup mod_perl_ahgen
 *  @{
 *  \section mod_perl_ahgen General library to interact with FITS files
 */

/// \brief Search for ftool in environment
/// \param[in] ftool     Name of ftool to search for
/// \return Path of ftool
string find_ftool(string ftool);

/// \brief Search for ftool parfile in environment
/// \param[in] ftool     Name of ftool parfile to search for
/// \return nonzero if error, otherwise zero
string find_par_file(string ftool);

/// \brief Run ftool
/// \param[in] ftool      Name of ftool to run
/// \param[in] parameters List of parameters and variables to run with ftool
/// \return nonzero if error, otherwise zero
int run_ftool(string ftool, @string parameters);

/// \brief Decompose a string that possibly contains a file name, HDU extesnsion, and leading '!'
/// \param[in] infile    Input file to parse
/// \return array of filename, extension and clobber
@string parse_file_name(string infile);

/// \brief Read keyword from infile[extension]
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] kword     Keyword to read
/// \return keyword value
string get_keyword(string infile);

/// \brief Run tool maketime and create GTI
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] kword     Keyword to set
/// \param[in] val       Keyword value to set 
/// \return nonzero if error, otherwise zero
int set_keyword(string infile, string extension, string kword, val);

/// \brief Delete keyword from input file
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] kword     Keyword to delete
/// \return nonzero if error, otherwise zero
string delete_keyword(string infile, string extension, string kword);

/// \brief Delete all history keywords from input file
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \return nonzero if error, otherwise zero
int delete_history(string infile, string extension);

/// \brief Get total number of HDUs from input file
/// \param[in] infile    Input file to read from
/// \return Number of HDUs
int get_total_hdu(string infile);

/// \brief Print a list of all columns in input file
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \return array of all columns
@string get_column_names(string infile, string extension);

/// \brief Find number of input column
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] colname   Column name to get number
/// \return Column number or 0 if column does not exist
int get_column_num(string infile, string extension, string colname);

/// \brief Append HDU to target or copy file if not existing
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] target    Output file to copy to
/// \param[in] cols      Optional columns to copy
/// \return nonzero if error, otherwise zero
int copy_hdu(string infile);

/// \brief Delete HDU from input file
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \return nonzero if error, otherwise zero
int delete_hdu(string infile, string extension);

/// \brief This routine is currently a stub
/// \return nonzero if error, otherwise zero
int create_hdu(void);

/// \brief Read \@file list or input file
/// \param[in] infile    Input file to read from
/// \return array of file names
@string get_file_list(string infile);

/// \brief Find HDU and return its number
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \return HDU number
int check_hdu_exists(string infile, string extension);

/// \brief Use ftcalc to add a new column
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] column    Column name to add
/// \param[in] val       Expression to initialize column value
/// \param[in] tform     TFORM column type
/// \return nonzero if error, otherwise zero
int add_column(string infile, string extension, string column, string val, string tform);

/// \brief Read column between rows
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] column    Column name to read
/// \param[in] rowsmin   Read column starting at this row
/// \param[in] rowsmax   Read column stopping at this row
/// \return array of column values
@string read_column(string infile, string extension, string column, int rowsmin, int rowsmax);

/// \brief Read vector or element of column
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] column    Column name to read
/// \param[in] vector    Vector element to read
/// \param[in] rowsmin   Read column starting at this row
/// \param[in] rowsmax   Read column stopping at this row
/// \return array of column value(s)
@string read_column_vector(string infile, string extension, string column, int vector, int rowsmin, int rowsmax);

/// \brief Create a copy of a fits file
/// \param[in] infile    Input file to read from
/// \param[in] outfile   Output fits file
/// \return nonzero if error, otherwise zero
int copy_fits_file(string infile, string outfile);

/// \brief Merge one or more HDUs from a FITS file
/// \param[in] target   Output fits file
/// \param[in] copyall  Copy all HDUs from input file(s)
/// \param[in] nfiles   Number of input files to merge
/// \param[in] infile    Input file to copy
/// \param[in] extension Input file extension to copy
/// \param[in] ...       Alternate between infiles and extensions for nfiles
/// \return nonzero if error, otherwise zero
int merge_fits_file(string target, string copyall, int nfiles, string infile, string extension, ...);

/// \brief Sort a FITS file HDU using ftsort
/// \param[in] infile    Input file to read from
/// \param[in] extension Input file extension to read from
/// \param[in] target    Output fits file
/// \param[in] column    Column name to sort
/// \param[in] unique    Compress on unique values
/// \return nonzero if error, otherwise zero
int sort_fits_file(string infile, string extension, string target, string column, bool unique); 

/// \brief compare two FITS files to check if they duplicate the same information
/// \param[in] filea    Input file to read from
/// \param[in] fileb    Input file to read from
/// \return nonzero if error, otherwise zero
int compare_fits_files(string filea, string fileb);

/// \brief Use ftverify to make sure a file conforms to the FITS standard
/// \param[in] infile    Input file to read from
/// \return nonzero if error, otherwise zero
int check_fits_file(string infile);

/// \brief Return the directory containing the "system" parfiles. This routine is a stub.
/// \return nonzero if error, otherwise zero
int get_syspfiles(void);

/// \brief Return the path to the requested FTOOL. This routine is a stub.
/// \return nonzero if error, otherwise zero
int get_tool_path(void);

/// \brief Get the standard output text from the last FTOOL that was run
/// \return stdout of last ftool run
string get_tool_stdout(void);

/// \brief Get the standard error text from the last FTOOL that was run
/// \return stderr of last ftool run
string get_tool_stderr(void);

/// \brief Get the status of the last FTOOL that was run
/// \return nonzero if error, otherwise zero
int get_tool_status(void);

/// \brief Get the error status flag
/// \return nonzero if error, otherwise zero
int get_error_flag(void);

/// \brief Set the error status flag
/// \param[in] error    Integer error value to set
/// \return nonzero if error, otherwise zero
int set_error_flag(int error);

/// \brief run ftools, ftchecksum and ftverify (check_fits_file), on file
/// \param[in] infile    Input file to read from
/// \return nonzero if error, otherwise zero
int update_checksum_and_verify(string infile);

/** @} */

/** \addtogroup mod_perl_ahlog
 *  @{
 *  \section mod_perl_ahlog Logfile library to create and write to logfiles
 */

/// \brief Set error level and make sure that the error level is valid
/// \param[in] error_level Error level
/// \return error level
int assign_error_level(int error_level);

/// \brief Calculate and get the UTC time
/// \return UTC time in format YYYY-MM-DDZHH:MM:SS.S
string get_utc_time(void); 

/// \brief Create a log line for each error message that was passed
/// \param[in] ecode         Error level of input error message "HIGH" or "LOW"
/// \param[in] error         Error level of input error message
/// \param[in] error_message Error message to write to log file
/// \param[in] use_utc_time  Append UTC to each log message
/// \return error log message
@string create_error_msg(int ecode, int error, string error message, bool use_utc_time);

/// \brief Create log file name
/// \param[in] base_name    Basename of tool being run
/// \param[in] include_pid  Include process ID in log file name
/// \param[in] extension    Extension for log file (default 'log')
/// \param[in] extra        Extra characters in log file name
/// \return log file name
string create_log_file_name(string base_name, bool include_pid, string extension, string extra);

/// \brief Open the log file for reading
/// \param[in] logfile      Name of logfile being read from
/// \param[in] logfilepath  Path to current log file
/// \return log file handle
string open_log_file_read(string logfile, string logfilepath);

/// \brief Open log file for writing
/// \param[in] logfile      Name of logfile being written to
/// \param[in] logfilepath  Path to current log file
/// \param[in] truncate     Overwrite or append to log file
/// \return log file handle
string open_log_file_write(string logfile, string logfilepath, bool truncate);

/// \brief Close log file
/// \return nonzero if error, otherwise zero
int close_log_file(void);

/// \brief Duplicates ah_err without printing to screen
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int log_error(string msg);

/// \brief Write msg to log file. Currently unused
/// \return nonzero if error, otherwise zero
int logmsg(void);

/// \brief Duplicates ah_out without printing to screen
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int log_out(string msg);

/// \brief Duplicates ah_warn without printing to screen
/// \param[in] lvl          Error level
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int log_warning(string lvl, string msg);

/// \brief 
/// \return nonzero if error, otherwise zero
int write_log_msg(void);

/// \brief Write a line to log file
/// \param[in] msg          Message to write to log file
/// \param[in] close_flag   Close log file after writing (yes/no)
/// \param[in] logfile      Name of logfile being read from
/// \param[in] logfilepath  Path to current log file
/// \return nonzero if error, otherwise zero
int write_log_line(string msg, int close_flag, string logfile, string logfilepath);

/// \brief Write a line to the log file with a comment character
/// \param[in] msg            Message to write to log file
/// \param[in] close_flag     Close log file after writing (yes/no)
/// \param[in] cmnt_delimiter Comment character (default: '#')
/// \param[in] logfile        Name of logfile being read from
/// \param[in] logfilepath    Path to current log file
/// \return nonzero if error, otherwise zero
int write_log_comment(string msg, int close_flag, string cmnt_delimiter, string logfile, string logfilepath);

/// \brief Change character for comment delimiter
/// \param[in] cmnt_delimiter Comment character (default: '#')
/// \return nonzero if error, otherwise zero
int update_comnt_delim(string cmnt_delimiter);

/// \brief Change character for field delimiter
/// \param[in] fld_delimiter Field separator character (default: '::')
/// \return nonzero if error, otherwise zero
int update_field_delim(string fld_delimiter);

/// \brief breaks log line up into fields based on a field
/// \param[in] line          Line to read
/// \param[in] fld_delimiter Field separator character (default: '::')
/// \return Field separated array
@string parse_line(string line, string fld_delimiter);

/// \brief Confirm line has n required fields separated by delimiter
/// \param[in] line             Line to read
/// \param[in] required_fields  Number of required fields separated by delimiter
/// \param[in] fld_delimiter    Field separator character (default: '::')
/// \return nonzero if error, otherwise zero
int validate_line(string line, int required_fields, string fld_delimiter);

/// \brief Read a valid line from the log file, ignore blank and comment lines
/// \param[in] cmnt_delimiter Comment character (default: '#')
/// \return valid line
string read_valid_line(string cmnt_delimiter);

/// \brief Read the next valid line from the log file
/// \param[in] index_field      Number of required fields separated by delimiter
/// \param[in] fld_delimiter    Field separator character (default: '::')
/// \param[in] cmnt_delimiter   Comment character (default: '#')
/// \return valid line
int read_log_line(int index_field, string fld_delimiter, string cmnt_delimiter);

/// \brief Find match of target in log file
/// \param[in] index_field      Number of required fields separated by delimiter
/// \param[in] target           Search for line in log file
/// \param[in] fld_delimiter    Field separator character (default: '::')
/// \param[in] cmnt_delimiter   Comment character (default: '#')
/// \return line upon successful match
int find_log_line(int index_field, string target, string fld_delimiter, string cmnt_delimiter);

/// \brief Read next line from log file
/// \return log line
string read_line(void);

/// \brief Find target and return lines with target
/// \param[in] index_field    Number of required fields separated by delimiter
/// \param[in] target         Search for line in log file
/// \param[in] logfile        Name of logfile being read from
/// \param[in] logfilepath    Path to current log file
/// \param[in] fld_delimiter  Field separator character (default: '::')
/// \return array of log lines with matching target
@string search_log(int index_field, string target, string logfile, string logfilepath,
                   string fld_delimiter, string cmnt_delimiter);

/// \brief Set chatter for log file between 0 and 3
/// \param[in] chatter        Chatter level between 0 and 3
/// \return chatter level
int setchatter(int chatter);

/// \brief Get chatter level for log file between 0 and 3
/// \return chatter level
int getchatter(void);

/// \brief Set debug mode for log file
/// \param[in] debug         Print debug statements to log file
/// \return debug mode
bool setdebug(bool debug);

/// \brief Get debug boolean for log file
/// \return debug boolean
bool getdebug(void);

/// \brief Implements the AH_DEBUG macro
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int ah_debug(string msg);

/// \brief Implements the AH_OUT macro
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int ah_out(string msg);

/// \brief Implements the AH_INFO macro
/// \param[in] lvl          Message level
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int ah_info(int lvl, string msg);

/// \brief Implements the AH_WARN macro
/// \param[in] lvl          Error level
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int ah_warn(int lvl, string msg);

/// \brief Implements the AH_ERR macro
/// \param[in] msg          Message to write to log file
/// \return nonzero if error, otherwise zero
int ah_err(string msg);

/// \brief Sets up and opens log file
/// \param[in] log_file_name  Name of log file to open
/// \param[in] exec_name      Current tool being run
/// \param[in] chatter        Chatter level for stdout
/// \param[in] debug_flag     Print debug statements to log file
/// \return nonzero if error, otherwise zero
int start_logging(string log_file_name, string exec_name, int chatter, bool debug_flag); 

/// \brief Close log file
/// \return nonzero if error, otherwise zero
int stop_logging(void);
/** @} */

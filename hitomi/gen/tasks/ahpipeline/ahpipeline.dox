/** 

\defgroup tool_ahpipeline HXI/SGD/SXS/SXI reprocessing tool (ahpipeline)
@ingroup mod_gen_tasks

This task duplicates most of the pipeline (not trend data). It allows the user to run all or part of the pipeline processing and to vary the calibration files and filtering (screening) criteria used. A number of other pipeline processing parameters can also be changed.

The pipeline is divided into 2 stages:
  -# Calibration
  -# Data screening (Not installed yet)

Each stage may be run singly or in combination with the preceeding stages.  This is controlled by the entry_stage and exit_stage parameters.

HXI Stage 1 consists of the following steps:

 -# Run ahtime (optional) 
 -# Generate a telemetry un-saturated GTI (ahgtigen)
 -# Run hxisgdsff
 -# Run hxisgdpha
 -# Run hxisgdexpand
 -# Run hxievtid
 -# Run cams2att
 -# Run coordevt


SGD Stage 1 consists of the following steps:

 -# Run ahtime (optional) 
 -# Generate a telemetry un-saturated GTI (ahgtigen)
 -# Run hxisgdsff
 -# Run hxisgdpha
 -# Run hxisgdexpand
 -# Run sgdevtid


SXS Stage 1 consists of the following steps:

 -# Run sxssamcnt (optional) 
 -# Run ahtime (optional) 
 -# Run mxstime (optional) 
 -# Generate a telemetry un-saturated GTI (ahgtigen)
 -# Run coordevt
 -# Run sxsflagpix
 -# Run sxsupi
 -# Run sxssecid
 -# Run sxsdrift
 -# Run sxspi
 -# Run sxsanticopi


SXI Stage 1 consists of the following steps:

 -# Run ahtime (optional) 
 -# Generate a telemetry un-saturated GTI (ahgtigen)
 -# Run coordevt
 -# Run sxiphas
 -# Run searchflickpix
 -# Run sxiflagpix
 -# Run sxipi


The data screening (Stage 2) is identical to that in the production pipeline, when default parameters are used. For details on the default screening applied to the HXI, SGD, SXS and SXI events (respectively), see:

Data screening not installed yet.

ahpipeline allows the processing of data on an instrument by instrument basis.  This is controlled by the instrument parameter. Possible values are:

ALL  - Process all data for all modules of all instruments
HXI  - Process HXI data (both HXI1 and HXI2) only
HXI1 - Process HXI data HXI1 only
HXI2 - Process HXI data HXI2 only
SGD  - Process SGD data (both SGD1 and SGD2) only
SGD1 - Process SGD data SGD1 only
SGD2 - Process SGD data SGD2 only
SXS  - Process SXS data only
SXI  - Process SXI data only


More than one value may be specified at one time.

Combination of HXI1 and HXI2 is allowed, is equivalent to HXI.

Combination of SGD1 and SGD2 is allowed, is equivalent to SGD.

\section ahpipeline_parfile Tool parameters

\verbatim

indir       ,s,a,"indir/",,,  "Input directory"
outdir      ,s,a,"outdir/",,, "Output directory"
steminputs  ,s,a,"ah1001",,,  "stem inputs"
stemoutputs ,s,a,"ah1001",,,  "stem outputs"
entry_stage ,i,a,1,1,3,       "Entry stage"
exit_stage  ,i,h,2,1,3,       "Exit stage"
instrument  ,s,a,"ALL",,,     "Instrument (ALL,HXI,HXI1,HXI2,SGD,SGD1,SGD2,SXS,SXI)"

verify_input  ,b,a,NO,,,       "Verify with ftverify (YES, NO)"

attitude                ,s,h,"DEFAULT",,, "Attitude file"
housekeeping            ,s,h,"DEFAULT",,, "Housekeeping file"
extended_housekeeping   ,s,h,"DEFAULT",,, "Extended housekeeping file"
makefilter              ,s,h,"DEFAULT",,, "Makefilter file, comma seperated list for multiple files"
orbit                   ,s,h,"DEFAULT",,, "Orbit file, comma seperated list for multiple files"
timfile                 ,s,h,"DEFAULT",,, "Time file, comma seperated list for multiple files"

timing      ,b,h,YES,,, "Run timing during calibration (YES, NO)"
mktim       ,b,h,YES,,, "Run tool ahmktim (YES, NO)"
frqtemfile  ,f,h,"CALDB",,, "ahmktim: existing freq vs. temp CALDB file"
coldeffile  ,f,h,"CALDB",,, "ahtime: Input file with column names for the time corrections"
delayfile   ,f,h,"CALDB",,, "ahtime: Input instrument delay file (or CALDB)"
leapsecfile ,f,h,"CALDB",,, "ahtime: Input leap second file (or CALDB, REFDATA)"
offsetfile  ,f,h,"CALDB",,, "ahtime: Input file with the CAMS offset corrections"

selectfile  ,f,h,"CALDB",,, "ahtime: Input file with the selection expressions"

sxi_start   ,r,h,0.0,,,     "SXI CALDB start time"
sxiteldef   ,f,h,"CALDB",,, "coordevt: teldeffile"
sxibadpixfile  ,f,h,"CALDB",,, "sxiflagpix: badpixfile"
sximaskfile    ,f,h,"CALDB",,, "sxiflagpix: maskfile"
sxivtevnodd    ,f,h,"CALDB",,, "sxipi: evenodd"
sxictifile     ,f,h,"CALDB",,, "sxipi: cti"
sxichtrailfile ,f,h,"CALDB",,, "sxipi: chtrail"
sxispthfile    ,f,h,"CALDB",,, "sxipi: splitth"
sxigainfile    ,f,h,"CALDB",,, "sxipi: gain"
sxipatternfile ,f,h,"CALDB",,, "sxipi: grade"

hxi_start   ,r,h,0.0,,,     "HXI CALDB start time"
hx1teldef   ,f,h,"CALDB",,, "coordevt: teldeffile hxi1"
hx2teldef   ,f,h,"CALDB",,, "coordevt: teldeffile hxi2"
hxiremapfile   ,f,h,"CALDB",,, "hxisgdsff/hxievtid: remapping file"
hxigainfile    ,f,h,"CALDB",,, "hxisgdpha: PHA calibration functions"
hxibadpixfile  ,f,h,"CALDB",,, "hxisgdpha/hxievtid: readout channels "
hxifluorefile  ,f,h,"CALDB",,, "hxievtid: Input fluorescence file "
hxienecutfile  ,f,h,"CALDB",,, "hxievtid: Input energy cut file "

cm1teldef   ,f,h,"CALDB",,, "cams2att: CAMS1 teldeffile"
cm2teldef   ,f,h,"CALDB",,, "cams2att: CAMS2 teldeffile"

sgd_start   ,r,h,0.0,,,     "SGD CALDB start time"
sgdteldef   ,f,h,"CALDB",,, "coordevt: teldeffile"
sgdremapfile   ,f,h,"CALDB",,, "hxisgdsff/hxievtid: remapping file"
sgdgainfile    ,f,h,"CALDB",,, "hxisgdpha: PHA calibration functions"
sgdbadpixfile  ,f,h,"CALDB",,, "hxisgdpha/hxievtid: readout channels "
sgdfluorefile  ,f,h,"CALDB",,, "sgdevtid: Input fluorescence file "
sgdprobseqfile ,f,h,"CALDB",,, "sgdevtid: sequence probability file"
sgdprobfovfile ,f,h,"CALDB",,, "sgdevtid: FOV probability file"

sxs_start       ,r,h,0.0,,,     "SXS CALDB start time"
sxsteldef       ,f,h,"CALDB",,, "coordevt: teldeffile"
sxscoeftime     ,s,h,"CALDB",,, "sxssamcnt: Input file with arrival time coeffs"
sxspixdeffile   ,f,h,"CALDB",,, "sxsflagpix: Input SXS electrical pixel map file"
sxsgainfile     ,f,h,"CALDB",,, "sxsupi: Input SXS gain coefficients file"
sxslinefitfile  ,f,h,"CALDB",,, "sxsdrift: Input calibration line file"
linetocorrect   , s, h, "Mnka"          ,  ,  , "Line to fit (HDU name in linefitfile)"
calmethod       , s, h, "Cal-pix"       ,  ,  , "Calibration method: Cal-pix, MXS, or Fe55"
usemp           , b, h, NO              ,  ,  , "Include Mp events when fitting (YES, NO)"
sxsgainantfile  ,f,h,"CALDB",,, "sxsanticopi: Input antico gain file"

randomize       ,b,h,YES,,, "Allow randomization in PI to UPI conversion (YES, NO)"
seed            ,i,h,0,,, "Random number generator seed (0=use system time)"

cleanup ,b,a,YES,,, "Remove temp files (YES, NO)"
clobber       , b, h, NO              , , , "Overwrite existing output file (YES, NO)" 
chatter       , i, h,  1              ,0,3, "Chatter level for output" 
logfile       , s, h, "!DEFAULT"      , , , "Output log file (DEFAULT, NONE; '!' to clobber)" 
debug         , b, h, NO              , , , "Enable debug mode (YES, NO)" 
history       , b, h, YES             , , , "Record tool parameters in HISTORY (YES, NO)" 
mode          , s, h, "ql"            , , , "Mode of automatic parameters" 

\endverbatim


*/


/** \addtogroup tool_ahpipeline
 *  @{
 */


/// \brief read and set up input parameters
/// \return nonzero if error, otherwise zero
int GetInputParameters(void);

/// \brief check if there will be an excessive log file
/// \return nonzero if error, otherwise zero
int CheckOverload(void);

/// \brief Verify input directory structure exists
/// \return nonzero if error, otherwise zero
int CheckInputDirectory(void);

/// \brief Check if output directory exists or create output directory
/// \return nonzero if error, otherwise zero
int CheckOutputDirectory(void);

/// \brief read and set up input parameters
/// \param[in] indir    input directory structure
/// \param[in] outdir   output directory
/// \return nonzero if error, otherwise zero
int CheckInclusion(string indir, string outdir);

/// \brief create hash of output directory
/// \return nonzero if error, otherwise zero
%string & buildsub(void);

/// \brief create hash of input directory
/// \return nonzero if error, otherwise zero
%string & lookout(void);

/// \brief Check for valid stages to start/stop at
/// \return nonzero if error, otherwise zero
int CheckEntryExitStage(void);

/// \brief Check for valid instruments to process
/// \return nonzero if error, otherwise zero
int CheckInstrument(void);

/// \brief Verify input calibration files exist, CALDB environment set
/// \return nonzero if error, otherwise zero
int CheckCalibrationFiles(void);

/// \brief Traverse the input directory, find all input files that match stem
/// \return nonzero if error, otherwise zero
int FindInputFiles(void);

/// \brief Search for input file in archive-like structure, otherwise return first found.
/// \param[in] filename  Input file base name
/// \param[in] filetype  Type of file (orb, att, evt, etc.);
/// \param[in] filelist  List of files to compare
/// \return recommended file for processing
string getBestFileOfType(string filename, string filetype, @string filelist);

/// \brief read file and run ftverify
/// \param[in] filename  Input file
/// \return nonzero if error, otherwise zero
int VerifyInputFile(string filename);

/// \brief Compile list of files with appropriate stem
/// \param[in] fulldirx  Input directory to check
/// \param[in] stem      Stem to verify against
/// \return list of files
@string GetFileList(string fulldirx, string stem);

/// \brief Create hash of stem, ignoring dots
/// \return hash of stem
%string & Wanted(void);

/// \brief Verify files in auxiliary directory
/// \return nonzero if error, otherwise zero
int CheckAuxilFiles(void);

/// \brief Move through stages 1, 2 and 3
/// \return nonzero if error, otherwise zero
int StageSwitcher(void);

/// \brief Move through calibration stage for instruments
/// \return nonzero if error, otherwise zero
int Stage1(void);

/// \brief Move through filtering stage for instruments
/// \return nonzero if error, otherwise zero
int Stage2(void);

/// \brief Move through prodcut creation stage for instruments
/// \return nonzero if error, otherwise zero
int Stage3(void);

/// \brief Run timing tools for all input files
/// \return nonzero if error, otherwise zero
int S1Timing(void);

/// \brief Run calibration tools all input SXI files
/// \return nonzero if error, otherwise zero
int S1SxiCalibrate(void);

/// \brief Run calibration tools all input HXI files
/// \return nonzero if error, otherwise zero
int S1HxiCalibrate(void);

/// \brief Run calibration tools all input SGD files
/// \return nonzero if error, otherwise zero
int S1SgdCalibrate(void);

/// \brief Run calibration tools all input SXS files
/// \return nonzero if error, otherwise zero
int S1SxsCalibrate(void);

/// \brief Clean all input HXI files
/// \return nonzero if error, otherwise zero
int S2HxiFilter(void);

/// \brief Clean all input SGD files
/// \return nonzero if error, otherwise zero
int S2SgdFilter(void);

/// \brief Clean all input SXS files
/// \return nonzero if error, otherwise zero
int S2SxsFilter(void);

/// \brief Clean all input SXI files
/// \return nonzero if error, otherwise zero
int S2SxiFilter(void);

/// \brief Create products for all input HXI files
/// \return nonzero if error, otherwise zero
int S3Hxi(void);

/// \brief Create products for all input SGD files
/// \return nonzero if error, otherwise zero
int S3Sgd(void);

/// \brief Create products for all input SXS files
/// \return nonzero if error, otherwise zero
int S3Sxs(void);     

/// \brief Create products for all input SXI files
/// \return nonzero if error, otherwise zero
int S3Sxi(void);

/// \brief Write input parameters for ahpipeline too all succesfully processed files
/// \return nonzero if error, otherwise zero
int FileHistory(void);

/** @} */

-------------------------------------------------------------------------------
This is the top level of the Astro-H software distribution tree.
-------------------------------------------------------------------------------

Welcome to the Astro-H Calibration Software Package!
This is based on a subset of HEASoft v. 6.16, with a custom version of the
attitude package updated for Astro-H.

Contents of this file:
 1. Description of all Astro-H documentation
 2. Layout of source directories
 3. Build instructions
 4. Unit tests
 5. Troubleshooting


-------------------------------------------------------------------------------
1. Description of all Astro-H documentation
-------------------------------------------------------------------------------

The Astro-H software documentation includes the following:

 README files 
   - present in most source directories in the tree
   - describe contents of current directory
   - include a minimal description of tools and libraries

 Release Notes
   - present in the top level of astroh as a PDF (Release_Notes.pdf)
   - exported from the Astro-H Redmine wiki at GSFC
   - contain general descriptions of the tools and libraries in the 
     current release
   - summarize current state of code (completeness, limitations, etc)

 Change Summary
   - present in the top level of astroh (AstroH_Build_06_Change_Summary.txt)
   - plain text summary of major changes in this release.

 FHELP HTML files
   - standard help file accessible with the fhelp command
   - available for each tool

 User's Manual
   - available as a PDF file in the top level of astroh
     (AstroH_Software_Manual.pdf)
   - available as a web page at astroh/doc/doc/html/index.html
   - includes full description of tools and libraries
   - generated from the source code using Doxygen


-------------------------------------------------------------------------------
2. Layout of source directories
-------------------------------------------------------------------------------

BUILD_DIR - standard hmake-style headas build directory
doc       - (internal) uncontrolled documents collected during development
gen       - generic (not Astro-H specific) software
help      - top level fhelp for the package astroh.
mission   - Astro-H specific (not instrument-specific) software
hxisgd    - software that works with both HXI and SGD data
sxi       - SXI instrument specific software
sxs       - SXS instrument specific software


-------------------------------------------------------------------------------
 3. Build instructions
-------------------------------------------------------------------------------

The following build instructions assume that you are in the headas directory
(the parent directory of that containing this README file).  The build system
is the same as HEASoft.  See:

http://heasarc.gsfc.nasa.gov/docs/software/lheasoft/install.html

for more detailed build instructions.

1. Build Astro-H software. Note that this should be executed starting from
the top (headas) level of the source tree, which is one level up from the
astroh directory.

  $ cd BUILD_DIR
  $ ./configure
  $ ./hmake
  $ ./hmake install

2. Set up environment

In the headas directory, you should now have a directory named according to 
your system; e.g. x86_64-unknown-linux-gnu-libc2.13-20.  Calling this directory
<direc>, do

with bash:
  $ cd ../<direc>
  $ HEADAS=$PWD
  $ export HEADAS
  $ . headas-init.sh

or, with csh:
  $ cd ../<direc>
  $ setenv HEADAS $PWD
  $ source headas-init.csh

3. (Optional). Check binary linkage and revision numbers

We can check that binaries link to the correct libraries and get version
information using the ahsysinfo tool.  For example, to check the ahdemo tool:

  $ cd $HEADAS/bin
  $ ahsysinfo ahdemo

The ahsysinfo tool is not restricted to just Astro-H tools, but will work for
all FTools.  Some Astro-H tools were compiled with special strings in
the source code.  These strings allow ahsysinfo to print additional details
about revisions of individual source and header files used to produce each
tool.


-------------------------------------------------------------------------------
 4. Unit tests
-------------------------------------------------------------------------------

Each source code directory contains unit test code, test data, and
ancillary test files. Unit tests for libraries and applications (tools)
are laid out differently.

Note: when performing the units tests described here, or independent tests, 
it may be useful to employ the `script` command to log all commands and 
output from your terminal session.  If you encounter a problem, this log can
be sent to the Astro-H Programming Team to assist in resolving the issue.  
See the man page page of `script` for usage instructions.


Application (Tool) Unit Tests
-----------------------------

In each subdirectory of the astroh directory (gen, mission, hxisgd, etc.)
there is a directory named "ut" at the top level. This directory contains
a subdirectory for each application. Each of these subdirectories contains
at least one unit test.

The application unit tests are generated and run with the aht utility,
which is a HEADAS Perl test utility.


Library Unit Tests
------------------

Each library has a unit test binary located in the src/test subdirectory.
Unit tests are designed to be run from that directory, and contain all
necessary input files.


Building/Installing Unit Tests
------------------------------

After the Astro-H software is built and installed, (see installation
instructions) the unit tests may also be built and installed. To do this,
execute these commands in the top level BUILD_DIR directory (the same
directory where you executed the previous hmake commands):

 $ hmake test
 $ hmake install-test

Assuming these commands succeed, the first will build, the second will
install the unit tests.


Running Unit Tests
------------------

After unit tests are built and installed, it is necessary to perform
the set-up described above in order to run unit tests.  All unit tests
may be executed from the top level BUILD_DIR directory using the command:

 $ hmake run-test

As with all standard make targets, this will exit as soon as any test
fails.

Assuming that the unit tests were installed as described above, and
assuming that the runtime environment has been initialized,
individual unit tests may be executed from individual test directories.
For libraries, this is accomplished using the run-test macro.  For
example, to run the ahfits unit test:

 $ cd astroh/gen/lib/ahfits/src/test; hmake run-test

For individual tool unit tests, instead the aht utility is used.
For example, to run the first unit test of the ahtime application:

 $ cd astroh/mission/ut/ahtime/ut01; aht


-------------------------------------------------------------------------------
 5. Troubleshooting
-------------------------------------------------------------------------------

Competing installations of HEATOOLS can sometimes conflict with each other.
Therefore, we recommend starting with a clean environment before initializing
and running the Astro-H tools.  If still experiencing a problem with an
Astro-H tool:

1. Start a new, clean shell
2. Use `script` from the command line to log all input/output from the session
3. Initialize the HEADAS environment (described in Section 3)
4. Use ahsysinfo on the tool to check for incompatible libraries
5. Run the tool to reproduce the error
6. Close the `script` output with 'exit'
7. Send the session output and any tool log files to the GSFC Astro-H Software
   Development Team
